/// <reference types="react" />
import * as PropTypes from "prop-types";
export declare type SizeUnit = number | string | undefined;
export declare enum ResizeType {
    Left = "resize-left",
    Right = "resize-right",
    Top = "resize-top",
    Bottom = "resize-bottom",
    NW = "resize-nw",
    NE = "resize-ne",
    SW = "resize-sw",
    SE = "resize-se"
}
export declare enum AnchorType {
    Left = "anchor-left",
    Right = "anchor-right",
    Top = "anchor-top",
    Bottom = "anchor-bottom"
}
export declare const AnchorTypes: AnchorType[];
export declare const AnchorToResizeTypeMap: {
    "anchor-left": ResizeType;
    "anchor-right": ResizeType;
    "anchor-bottom": ResizeType;
    "anchor-top": ResizeType;
};
export declare enum CenterType {
    None = "none",
    Vertical = "vertical",
    HorizontalVertical = "horizontalVertical"
}
export interface IReactEvents {
    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    onDoubleClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseDown?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseEnter?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseLeave?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    onMouseMove?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    onTouchStart?: (event: React.TouchEvent<HTMLElement>) => void;
    onTouchMove?: (event: React.TouchEvent<HTMLElement>) => void;
    onTouchEnd?: (event: React.TouchEvent<HTMLElement>) => void;
}
export interface IParentSpace {
    startMouseDrag: (e: React.MouseEvent<HTMLElement, MouseEvent>, onDragEnd?: (position: IPosition) => void) => void;
    startMouseResize: (e: React.MouseEvent<HTMLElement, MouseEvent>, resizeType: ResizeType, onResizeEnd?: (newSize: number) => void) => void;
}
export interface IPosition {
    left?: number;
    top?: number;
    right?: number;
    bottom?: number;
    width?: number;
    height?: number;
}
export interface IPublicProps extends IReactEvents {
    id?: string;
    className?: string;
    style?: React.CSSProperties;
    scrollable?: boolean;
    trackSize?: boolean;
    centerContent?: CenterType;
    as?: string;
    children?: React.ReactNode;
    zIndex?: number;
}
export declare const publicProps: {
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    scrollable: PropTypes.Requireable<boolean>;
    trackSize: PropTypes.Requireable<boolean>;
    centerContent: PropTypes.Requireable<CenterType>;
    as: PropTypes.Requireable<string>;
    zIndex: PropTypes.Requireable<number>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchEnd: PropTypes.Requireable<(...args: any[]) => any>;
};
export interface IPrivateProps {
    isPositioned?: boolean;
    anchorSize?: SizeUnit;
    anchor?: AnchorType;
    resizable?: boolean;
    order?: number;
}
export declare const privateProps: {
    isPositioned: PropTypes.Requireable<boolean>;
    anchorSize: PropTypes.Requireable<import("react").ReactText>;
    anchor: PropTypes.Requireable<AnchorType>;
    resizable: PropTypes.Requireable<boolean>;
    order: PropTypes.Requireable<number>;
    topMost: PropTypes.Requireable<boolean>;
};
export interface IAnchoredProps {
    size: SizeUnit;
    order?: number;
}
export declare const anchoredProps: {
    size: PropTypes.Validator<import("react").ReactText>;
    order: PropTypes.Requireable<number>;
};
export interface IResizableProps {
    handleSize?: number;
    overlayHandle?: boolean;
    minimumSize?: number;
    maximumSize?: number;
    onResizeStart?: () => boolean | void;
    onResizeEnd?: (newSize: number) => void;
}
export declare const resizableProps: {
    handleSize: PropTypes.Requireable<number>;
    overlayHandle: PropTypes.Requireable<boolean>;
    minimumSize: PropTypes.Requireable<number>;
    maximumSize: PropTypes.Requireable<number>;
    onResizeStart: PropTypes.Requireable<(...args: any[]) => any>;
    onResizeEnd: PropTypes.Requireable<(...args: any[]) => any>;
};
export interface IPositionedProps {
    left?: SizeUnit;
    top?: SizeUnit;
    right?: SizeUnit;
    bottom?: SizeUnit;
    width?: SizeUnit;
    height?: SizeUnit;
    resizable?: boolean;
}
export declare const positionedProps: {
    left: PropTypes.Requireable<import("react").ReactText>;
    top: PropTypes.Requireable<import("react").ReactText>;
    right: PropTypes.Requireable<import("react").ReactText>;
    bottom: PropTypes.Requireable<import("react").ReactText>;
    width: PropTypes.Requireable<import("react").ReactText>;
    height: PropTypes.Requireable<import("react").ReactText>;
    resizable: PropTypes.Requireable<boolean>;
};
export declare type AllProps = IPublicProps & IPrivateProps & IResizableProps & IPositionedProps;
export declare const allProps: {
    left: PropTypes.Requireable<import("react").ReactText>;
    top: PropTypes.Requireable<import("react").ReactText>;
    right: PropTypes.Requireable<import("react").ReactText>;
    bottom: PropTypes.Requireable<import("react").ReactText>;
    width: PropTypes.Requireable<import("react").ReactText>;
    height: PropTypes.Requireable<import("react").ReactText>;
    resizable: PropTypes.Requireable<boolean>;
    handleSize: PropTypes.Requireable<number>;
    overlayHandle: PropTypes.Requireable<boolean>;
    minimumSize: PropTypes.Requireable<number>;
    maximumSize: PropTypes.Requireable<number>;
    onResizeStart: PropTypes.Requireable<(...args: any[]) => any>;
    onResizeEnd: PropTypes.Requireable<(...args: any[]) => any>;
    isPositioned: PropTypes.Requireable<boolean>;
    anchorSize: PropTypes.Requireable<import("react").ReactText>;
    anchor: PropTypes.Requireable<AnchorType>;
    order: PropTypes.Requireable<number>;
    topMost: PropTypes.Requireable<boolean>;
    id: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    scrollable: PropTypes.Requireable<boolean>;
    trackSize: PropTypes.Requireable<boolean>;
    centerContent: PropTypes.Requireable<CenterType>;
    as: PropTypes.Requireable<string>;
    zIndex: PropTypes.Requireable<number>;
    onClick: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
    onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchStart: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchMove: PropTypes.Requireable<(...args: any[]) => any>;
    onTouchEnd: PropTypes.Requireable<(...args: any[]) => any>;
};
export interface IState {
    id: string;
    resizing: boolean;
    children: ISpace[];
}
export interface ISize {
    width: number;
    height: number;
}
export interface ISpace {
    id: string;
    adjustedLeft: number;
    adjustedTop: number;
    adjustedWidth: number;
    adjustedHeight: number;
    order: number;
    zIndex: number;
    anchorType: AnchorType | undefined;
    anchorSize: SizeUnit;
    adjustedSize: number;
    left?: SizeUnit;
    top?: SizeUnit;
    right?: SizeUnit;
    bottom?: SizeUnit;
    width?: SizeUnit;
    height?: SizeUnit;
    isPositioned: boolean;
}
export interface ISpaceInfo {
    width: number;
    height: number;
}
