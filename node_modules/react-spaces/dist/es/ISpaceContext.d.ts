/// <reference types="react" />
import { ISpace, ResizeType, IPosition } from "./types";
export interface ISpaceContext {
    level: number;
    children: ISpace[];
    updateChildren: (children: ISpace[]) => void;
    updateResizing: (state: boolean) => void;
    startMouseDrag: (e: React.MouseEvent<HTMLElement, MouseEvent>, onDragEnd?: (info: IPosition) => void) => void;
    startMouseResize: (e: React.MouseEvent<HTMLElement, MouseEvent>, resizeType: ResizeType, onResizeEnd?: (newSize: number) => void) => void;
}
export declare const getSpace: (context: ISpaceContext, id: string) => ISpace | undefined;
export declare const registerSpace: (context: ISpaceContext, space: ISpace) => ISpace;
export declare const removeSpace: (context: ISpaceContext, id: string) => void;
export declare const updateSpace: (context: ISpaceContext, id: string, delta: Partial<ISpace>) => void;
export declare const createSpaceContext: (children: ISpace[], updateChildren: (children: ISpace[]) => void, updateResizing: (state: boolean) => void, startMouseDrag: (e: import("react").MouseEvent<HTMLElement, MouseEvent>, onDragEnd?: ((info: IPosition) => void) | undefined) => void, startMouseResize: (e: import("react").MouseEvent<HTMLElement, MouseEvent>, resizeType: ResizeType, onResizeEnd?: ((newSize: number) => void) | undefined) => void, parent?: ISpaceContext | null | undefined) => ISpaceContext;
