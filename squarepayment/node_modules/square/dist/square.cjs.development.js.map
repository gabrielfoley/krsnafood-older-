{"version":3,"file":"square.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/models/registerDomainRequest.ts","../src/models/error.ts","../src/models/registerDomainResponse.ts","../src/api/baseApi.ts","../src/api/applePayApi.ts","../src/models/bankAccount.ts","../src/models/getBankAccountByV1IdResponse.ts","../src/models/getBankAccountResponse.ts","../src/models/listBankAccountsResponse.ts","../src/api/bankAccountsApi.ts","../src/models/appointmentSegment.ts","../src/models/booking.ts","../src/models/createBookingRequest.ts","../src/models/createBookingResponse.ts","../src/models/teamMemberBookingProfile.ts","../src/models/listTeamMemberBookingProfilesResponse.ts","../src/models/retrieveBookingResponse.ts","../src/models/money.ts","../src/models/businessAppointmentSettings.ts","../src/models/businessBookingProfile.ts","../src/models/retrieveBusinessBookingProfileResponse.ts","../src/models/retrieveTeamMemberBookingProfileResponse.ts","../src/models/filterValue.ts","../src/models/segmentFilter.ts","../src/models/timeRange.ts","../src/models/searchAvailabilityFilter.ts","../src/models/searchAvailabilityQuery.ts","../src/models/searchAvailabilityRequest.ts","../src/models/availability.ts","../src/models/searchAvailabilityResponse.ts","../src/models/updateBookingRequest.ts","../src/models/updateBookingResponse.ts","../src/api/bookingsApi.ts","../src/models/cashDrawerShiftEvent.ts","../src/models/listCashDrawerShiftEventsResponse.ts","../src/models/cashDrawerShiftSummary.ts","../src/models/listCashDrawerShiftsResponse.ts","../src/models/cashDrawerDevice.ts","../src/models/cashDrawerShift.ts","../src/models/retrieveCashDrawerShiftResponse.ts","../src/api/cashDrawersApi.ts","../src/models/batchDeleteCatalogObjectsRequest.ts","../src/models/batchDeleteCatalogObjectsResponse.ts","../src/models/batchRetrieveCatalogObjectsRequest.ts","../src/models/catalogCategory.ts","../src/models/catalogCustomAttributeDefinitionNumberConfig.ts","../src/models/catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection.ts","../src/models/catalogCustomAttributeDefinitionSelectionConfig.ts","../src/models/catalogCustomAttributeDefinitionStringConfig.ts","../src/models/sourceApplication.ts","../src/models/catalogCustomAttributeDefinition.ts","../src/models/catalogCustomAttributeValue.ts","../src/models/catalogDiscount.ts","../src/models/catalogImage.ts","../src/models/catalogModifierOverride.ts","../src/models/catalogItemModifierListInfo.ts","../src/models/catalogItemOptionForItem.ts","../src/models/catalogItem.ts","../src/models/catalogItemOption.ts","../src/models/catalogItemOptionValue.ts","../src/models/catalogItemOptionValueForItemVariation.ts","../src/models/itemVariationLocationOverrides.ts","../src/models/catalogItemVariation.ts","../src/models/measurementUnitCustom.ts","../src/models/measurementUnit.ts","../src/models/catalogMeasurementUnit.ts","../src/models/catalogModifier.ts","../src/models/catalogModifierList.ts","../src/models/catalogPricingRule.ts","../src/models/catalogProductSet.ts","../src/models/catalogQuickAmount.ts","../src/models/catalogQuickAmountsSettings.ts","../src/models/subscriptionPhase.ts","../src/models/catalogSubscriptionPlan.ts","../src/models/catalogTax.ts","../src/models/catalogTimePeriod.ts","../src/models/catalogV1Id.ts","../src/models/catalogObject.ts","../src/models/batchRetrieveCatalogObjectsResponse.ts","../src/models/catalogObjectBatch.ts","../src/models/batchUpsertCatalogObjectsRequest.ts","../src/models/catalogIdMapping.ts","../src/models/batchUpsertCatalogObjectsResponse.ts","../src/models/catalogInfoResponseLimits.ts","../src/models/standardUnitDescription.ts","../src/models/standardUnitDescriptionGroup.ts","../src/models/catalogInfoResponse.ts","../src/models/createCatalogImageRequest.ts","../src/models/createCatalogImageResponse.ts","../src/models/deleteCatalogObjectResponse.ts","../src/models/listCatalogResponse.ts","../src/models/retrieveCatalogObjectResponse.ts","../src/models/range.ts","../src/models/customAttributeFilter.ts","../src/models/searchCatalogItemsRequest.ts","../src/models/searchCatalogItemsResponse.ts","../src/models/catalogQueryExact.ts","../src/models/catalogQueryItemsForItemOptions.ts","../src/models/catalogQueryItemsForModifierList.ts","../src/models/catalogQueryItemsForTax.ts","../src/models/catalogQueryItemVariationsForItemOptionValues.ts","../src/models/catalogQueryPrefix.ts","../src/models/catalogQueryRange.ts","../src/models/catalogQuerySet.ts","../src/models/catalogQuerySortedAttribute.ts","../src/models/catalogQueryText.ts","../src/models/catalogQuery.ts","../src/models/searchCatalogObjectsRequest.ts","../src/models/searchCatalogObjectsResponse.ts","../src/models/updateItemModifierListsRequest.ts","../src/models/updateItemModifierListsResponse.ts","../src/models/updateItemTaxesRequest.ts","../src/models/updateItemTaxesResponse.ts","../src/models/upsertCatalogObjectRequest.ts","../src/models/upsertCatalogObjectResponse.ts","../src/api/catalogApi.ts","../src/models/address.ts","../src/models/chargeRequestAdditionalRecipient.ts","../src/models/orderFulfillmentPickupDetailsCurbsidePickupDetails.ts","../src/models/orderFulfillmentRecipient.ts","../src/models/orderFulfillmentPickupDetails.ts","../src/models/orderFulfillmentShipmentDetails.ts","../src/models/orderFulfillment.ts","../src/models/orderLineItemAppliedDiscount.ts","../src/models/orderLineItemAppliedTax.ts","../src/models/orderLineItemModifier.ts","../src/models/orderQuantityUnit.ts","../src/models/orderLineItem.ts","../src/models/orderLineItemDiscount.ts","../src/models/orderLineItemTax.ts","../src/models/orderMoneyAmounts.ts","../src/models/orderPricingOptions.ts","../src/models/orderReturnDiscount.ts","../src/models/orderReturnLineItemModifier.ts","../src/models/orderReturnLineItem.ts","../src/models/orderReturnServiceCharge.ts","../src/models/orderReturnTax.ts","../src/models/orderRoundingAdjustment.ts","../src/models/orderReturn.ts","../src/models/orderReward.ts","../src/models/orderServiceCharge.ts","../src/models/orderSource.ts","../src/models/additionalRecipient.ts","../src/models/refund.ts","../src/models/card.ts","../src/models/tenderCardDetails.ts","../src/models/tenderCashDetails.ts","../src/models/tender.ts","../src/models/order.ts","../src/models/createOrderRequest.ts","../src/models/createCheckoutRequest.ts","../src/models/checkout.ts","../src/models/createCheckoutResponse.ts","../src/api/checkoutApi.ts","../src/models/customerGroup.ts","../src/models/createCustomerGroupRequest.ts","../src/models/createCustomerGroupResponse.ts","../src/models/deleteCustomerGroupResponse.ts","../src/models/listCustomerGroupsResponse.ts","../src/models/retrieveCustomerGroupResponse.ts","../src/models/updateCustomerGroupRequest.ts","../src/models/updateCustomerGroupResponse.ts","../src/api/customerGroupsApi.ts","../src/models/addGroupToCustomerResponse.ts","../src/models/createCustomerCardRequest.ts","../src/models/createCustomerCardResponse.ts","../src/models/createCustomerRequest.ts","../src/models/customerGroupInfo.ts","../src/models/customerPreferences.ts","../src/models/customer.ts","../src/models/createCustomerResponse.ts","../src/models/deleteCustomerCardResponse.ts","../src/models/deleteCustomerResponse.ts","../src/models/listCustomersResponse.ts","../src/models/removeGroupFromCustomerResponse.ts","../src/models/retrieveCustomerResponse.ts","../src/models/customerCreationSourceFilter.ts","../src/models/customerTextFilter.ts","../src/models/customerFilter.ts","../src/models/customerSort.ts","../src/models/customerQuery.ts","../src/models/searchCustomersRequest.ts","../src/models/searchCustomersResponse.ts","../src/models/updateCustomerRequest.ts","../src/models/updateCustomerResponse.ts","../src/api/customersApi.ts","../src/models/customerSegment.ts","../src/models/listCustomerSegmentsResponse.ts","../src/models/retrieveCustomerSegmentResponse.ts","../src/api/customerSegmentsApi.ts","../src/models/deviceCode.ts","../src/models/createDeviceCodeRequest.ts","../src/models/createDeviceCodeResponse.ts","../src/models/getDeviceCodeResponse.ts","../src/models/listDeviceCodesResponse.ts","../src/api/devicesApi.ts","../src/models/disputedPayment.ts","../src/models/dispute.ts","../src/models/acceptDisputeResponse.ts","../src/models/createDisputeEvidenceFileRequest.ts","../src/models/disputeEvidence.ts","../src/models/createDisputeEvidenceFileResponse.ts","../src/models/createDisputeEvidenceTextRequest.ts","../src/models/createDisputeEvidenceTextResponse.ts","../src/models/listDisputeEvidenceResponse.ts","../src/models/listDisputesResponse.ts","../src/models/removeDisputeEvidenceResponse.ts","../src/models/retrieveDisputeEvidenceResponse.ts","../src/models/retrieveDisputeResponse.ts","../src/models/submitEvidenceResponse.ts","../src/api/disputesApi.ts","../src/models/employee.ts","../src/models/listEmployeesResponse.ts","../src/models/retrieveEmployeeResponse.ts","../src/api/employeesApi.ts","../src/models/inventoryAdjustment.ts","../src/models/inventoryPhysicalCount.ts","../src/models/inventoryTransfer.ts","../src/models/inventoryChange.ts","../src/models/batchChangeInventoryRequest.ts","../src/models/inventoryCount.ts","../src/models/batchChangeInventoryResponse.ts","../src/models/batchRetrieveInventoryChangesRequest.ts","../src/models/batchRetrieveInventoryChangesResponse.ts","../src/models/batchRetrieveInventoryCountsRequest.ts","../src/models/batchRetrieveInventoryCountsResponse.ts","../src/models/retrieveInventoryAdjustmentResponse.ts","../src/models/retrieveInventoryChangesResponse.ts","../src/models/retrieveInventoryCountResponse.ts","../src/models/retrieveInventoryPhysicalCountResponse.ts","../src/api/inventoryApi.ts","../src/models/cancelInvoiceRequest.ts","../src/models/invoicePaymentReminder.ts","../src/models/invoicePaymentRequest.ts","../src/models/invoiceRecipient.ts","../src/models/invoice.ts","../src/models/cancelInvoiceResponse.ts","../src/models/createInvoiceRequest.ts","../src/models/createInvoiceResponse.ts","../src/models/deleteInvoiceResponse.ts","../src/models/getInvoiceResponse.ts","../src/models/listInvoicesResponse.ts","../src/models/publishInvoiceRequest.ts","../src/models/publishInvoiceResponse.ts","../src/models/invoiceFilter.ts","../src/models/invoiceSort.ts","../src/models/invoiceQuery.ts","../src/models/searchInvoicesRequest.ts","../src/models/searchInvoicesResponse.ts","../src/models/updateInvoiceRequest.ts","../src/models/updateInvoiceResponse.ts","../src/api/invoicesApi.ts","../src/models/breakType.ts","../src/models/createBreakTypeRequest.ts","../src/models/createBreakTypeResponse.ts","../src/models/break.ts","../src/models/shiftWage.ts","../src/models/shift.ts","../src/models/createShiftRequest.ts","../src/models/createShiftResponse.ts","../src/models/deleteBreakTypeResponse.ts","../src/models/deleteShiftResponse.ts","../src/models/getBreakTypeResponse.ts","../src/models/employeeWage.ts","../src/models/getEmployeeWageResponse.ts","../src/models/getShiftResponse.ts","../src/models/teamMemberWage.ts","../src/models/getTeamMemberWageResponse.ts","../src/models/listBreakTypesResponse.ts","../src/models/listEmployeeWagesResponse.ts","../src/models/listTeamMemberWagesResponse.ts","../src/models/workweekConfig.ts","../src/models/listWorkweekConfigsResponse.ts","../src/models/dateRange.ts","../src/models/shiftWorkday.ts","../src/models/shiftFilter.ts","../src/models/shiftSort.ts","../src/models/shiftQuery.ts","../src/models/searchShiftsRequest.ts","../src/models/searchShiftsResponse.ts","../src/models/updateBreakTypeRequest.ts","../src/models/updateBreakTypeResponse.ts","../src/models/updateShiftRequest.ts","../src/models/updateShiftResponse.ts","../src/models/updateWorkweekConfigRequest.ts","../src/models/updateWorkweekConfigResponse.ts","../src/api/laborApi.ts","../src/models/businessHoursPeriod.ts","../src/models/businessHours.ts","../src/models/coordinates.ts","../src/models/location.ts","../src/models/createLocationRequest.ts","../src/models/createLocationResponse.ts","../src/models/listLocationsResponse.ts","../src/models/retrieveLocationResponse.ts","../src/models/updateLocationRequest.ts","../src/models/updateLocationResponse.ts","../src/api/locationsApi.ts","../src/models/loyaltyEventAccumulatePoints.ts","../src/models/accumulateLoyaltyPointsRequest.ts","../src/models/loyaltyEventAdjustPoints.ts","../src/models/loyaltyEventCreateReward.ts","../src/models/loyaltyEventDeleteReward.ts","../src/models/loyaltyEventExpirePoints.ts","../src/models/loyaltyEventOther.ts","../src/models/loyaltyEventRedeemReward.ts","../src/models/loyaltyEvent.ts","../src/models/accumulateLoyaltyPointsResponse.ts","../src/models/adjustLoyaltyPointsRequest.ts","../src/models/adjustLoyaltyPointsResponse.ts","../src/models/calculateLoyaltyPointsRequest.ts","../src/models/calculateLoyaltyPointsResponse.ts","../src/models/loyaltyAccountMapping.ts","../src/models/loyaltyAccount.ts","../src/models/createLoyaltyAccountRequest.ts","../src/models/createLoyaltyAccountResponse.ts","../src/models/loyaltyReward.ts","../src/models/createLoyaltyRewardRequest.ts","../src/models/createLoyaltyRewardResponse.ts","../src/models/deleteLoyaltyRewardResponse.ts","../src/models/loyaltyProgramAccrualRule.ts","../src/models/loyaltyProgramExpirationPolicy.ts","../src/models/loyaltyProgramRewardDefinition.ts","../src/models/loyaltyProgramRewardTier.ts","../src/models/loyaltyProgramTerminology.ts","../src/models/loyaltyProgram.ts","../src/models/listLoyaltyProgramsResponse.ts","../src/models/redeemLoyaltyRewardRequest.ts","../src/models/redeemLoyaltyRewardResponse.ts","../src/models/retrieveLoyaltyAccountResponse.ts","../src/models/retrieveLoyaltyRewardResponse.ts","../src/models/searchLoyaltyAccountsRequestLoyaltyAccountQuery.ts","../src/models/searchLoyaltyAccountsRequest.ts","../src/models/searchLoyaltyAccountsResponse.ts","../src/models/loyaltyEventDateTimeFilter.ts","../src/models/loyaltyEventLocationFilter.ts","../src/models/loyaltyEventLoyaltyAccountFilter.ts","../src/models/loyaltyEventOrderFilter.ts","../src/models/loyaltyEventTypeFilter.ts","../src/models/loyaltyEventFilter.ts","../src/models/loyaltyEventQuery.ts","../src/models/searchLoyaltyEventsRequest.ts","../src/models/searchLoyaltyEventsResponse.ts","../src/models/searchLoyaltyRewardsRequestLoyaltyRewardQuery.ts","../src/models/searchLoyaltyRewardsRequest.ts","../src/models/searchLoyaltyRewardsResponse.ts","../src/api/loyaltyApi.ts","../src/models/merchant.ts","../src/models/listMerchantsResponse.ts","../src/models/retrieveMerchantResponse.ts","../src/api/merchantsApi.ts","../src/models/createMobileAuthorizationCodeRequest.ts","../src/models/createMobileAuthorizationCodeResponse.ts","../src/api/mobileAuthorizationApi.ts","../src/models/obtainTokenRequest.ts","../src/models/obtainTokenResponse.ts","../src/models/renewTokenRequest.ts","../src/models/renewTokenResponse.ts","../src/models/revokeTokenRequest.ts","../src/models/revokeTokenResponse.ts","../src/api/oAuthApi.ts","../src/models/batchRetrieveOrdersRequest.ts","../src/models/batchRetrieveOrdersResponse.ts","../src/models/calculateOrderRequest.ts","../src/models/calculateOrderResponse.ts","../src/models/createOrderResponse.ts","../src/models/payOrderRequest.ts","../src/models/payOrderResponse.ts","../src/models/retrieveOrderResponse.ts","../src/models/searchOrdersCustomerFilter.ts","../src/models/searchOrdersDateTimeFilter.ts","../src/models/searchOrdersFulfillmentFilter.ts","../src/models/searchOrdersSourceFilter.ts","../src/models/searchOrdersStateFilter.ts","../src/models/searchOrdersFilter.ts","../src/models/searchOrdersSort.ts","../src/models/searchOrdersQuery.ts","../src/models/searchOrdersRequest.ts","../src/models/orderEntry.ts","../src/models/searchOrdersResponse.ts","../src/models/updateOrderRequest.ts","../src/models/updateOrderResponse.ts","../src/api/ordersApi.ts","../src/models/cancelPaymentByIdempotencyKeyRequest.ts","../src/models/cancelPaymentByIdempotencyKeyResponse.ts","../src/models/deviceDetails.ts","../src/models/cardPaymentDetails.ts","../src/models/processingFee.ts","../src/models/riskEvaluation.ts","../src/models/payment.ts","../src/models/cancelPaymentResponse.ts","../src/models/completePaymentResponse.ts","../src/models/createPaymentRequest.ts","../src/models/createPaymentResponse.ts","../src/models/getPaymentResponse.ts","../src/models/listPaymentsResponse.ts","../src/api/paymentsApi.ts","../src/models/paymentRefund.ts","../src/models/getPaymentRefundResponse.ts","../src/models/listPaymentRefundsResponse.ts","../src/models/refundPaymentRequest.ts","../src/models/refundPaymentResponse.ts","../src/api/refundsApi.ts","../src/models/subscription.ts","../src/models/cancelSubscriptionResponse.ts","../src/models/createSubscriptionRequest.ts","../src/models/createSubscriptionResponse.ts","../src/models/subscriptionEvent.ts","../src/models/listSubscriptionEventsResponse.ts","../src/models/retrieveSubscriptionResponse.ts","../src/models/searchSubscriptionsFilter.ts","../src/models/searchSubscriptionsQuery.ts","../src/models/searchSubscriptionsRequest.ts","../src/models/searchSubscriptionsResponse.ts","../src/models/updateSubscriptionRequest.ts","../src/models/updateSubscriptionResponse.ts","../src/api/subscriptionsApi.ts","../src/models/teamMemberAssignedLocations.ts","../src/models/teamMember.ts","../src/models/createTeamMemberRequest.ts","../src/models/bulkCreateTeamMembersRequest.ts","../src/models/createTeamMemberResponse.ts","../src/models/bulkCreateTeamMembersResponse.ts","../src/models/updateTeamMemberRequest.ts","../src/models/bulkUpdateTeamMembersRequest.ts","../src/models/updateTeamMemberResponse.ts","../src/models/bulkUpdateTeamMembersResponse.ts","../src/models/retrieveTeamMemberResponse.ts","../src/models/jobAssignment.ts","../src/models/wageSetting.ts","../src/models/retrieveWageSettingResponse.ts","../src/models/searchTeamMembersFilter.ts","../src/models/searchTeamMembersQuery.ts","../src/models/searchTeamMembersRequest.ts","../src/models/searchTeamMembersResponse.ts","../src/models/updateWageSettingRequest.ts","../src/models/updateWageSettingResponse.ts","../src/api/teamApi.ts","../src/models/tipSettings.ts","../src/models/deviceCheckoutOptions.ts","../src/models/terminalCheckout.ts","../src/models/cancelTerminalCheckoutResponse.ts","../src/models/terminalRefund.ts","../src/models/cancelTerminalRefundResponse.ts","../src/models/createTerminalCheckoutRequest.ts","../src/models/createTerminalCheckoutResponse.ts","../src/models/createTerminalRefundRequest.ts","../src/models/createTerminalRefundResponse.ts","../src/models/getTerminalCheckoutResponse.ts","../src/models/getTerminalRefundResponse.ts","../src/models/terminalCheckoutQueryFilter.ts","../src/models/terminalCheckoutQuerySort.ts","../src/models/terminalCheckoutQuery.ts","../src/models/searchTerminalCheckoutsRequest.ts","../src/models/searchTerminalCheckoutsResponse.ts","../src/models/terminalRefundQueryFilter.ts","../src/models/terminalRefundQuerySort.ts","../src/models/terminalRefundQuery.ts","../src/models/searchTerminalRefundsRequest.ts","../src/models/searchTerminalRefundsResponse.ts","../src/api/terminalApi.ts","../src/models/captureTransactionResponse.ts","../src/models/chargeRequest.ts","../src/models/transaction.ts","../src/models/chargeResponse.ts","../src/models/createRefundRequest.ts","../src/models/createRefundResponse.ts","../src/models/listRefundsResponse.ts","../src/models/listTransactionsResponse.ts","../src/models/retrieveTransactionResponse.ts","../src/models/voidTransactionResponse.ts","../src/api/transactionsApi.ts","../src/models/device.ts","../src/models/v1Money.ts","../src/models/v1CashDrawerEvent.ts","../src/models/v1CashDrawerShift.ts","../src/models/v1Employee.ts","../src/models/v1EmployeeRole.ts","../src/models/v1Timecard.ts","../src/models/v1TimecardEvent.ts","../src/api/v1EmployeesApi.ts","../src/models/v1AdjustInventoryRequest.ts","../src/models/v1Category.ts","../src/models/v1Discount.ts","../src/models/v1Fee.ts","../src/models/v1InventoryEntry.ts","../src/models/v1ItemImage.ts","../src/models/v1ModifierOption.ts","../src/models/v1ModifierList.ts","../src/models/v1Variation.ts","../src/models/v1Item.ts","../src/models/v1PageCell.ts","../src/models/v1Page.ts","../src/models/v1UpdateModifierListRequest.ts","../src/api/v1ItemsApi.ts","../src/models/v1MerchantLocationDetails.ts","../src/models/v1PhoneNumber.ts","../src/models/v1Merchant.ts","../src/api/v1LocationsApi.ts","../src/models/v1BankAccount.ts","../src/models/v1CreateRefundRequest.ts","../src/models/v1OrderHistoryEntry.ts","../src/models/v1Tender.ts","../src/models/v1Order.ts","../src/models/v1PaymentDiscount.ts","../src/models/v1PaymentItemDetail.ts","../src/models/v1PaymentModifier.ts","../src/models/v1PaymentTax.ts","../src/models/v1PaymentItemization.ts","../src/models/v1PaymentSurcharge.ts","../src/models/v1Refund.ts","../src/models/v1Payment.ts","../src/models/v1SettlementEntry.ts","../src/models/v1Settlement.ts","../src/models/v1UpdateOrderRequest.ts","../src/api/v1TransactionsApi.ts","../src/http/httpHeaders.ts","../src/http/httpInterceptor.ts","../src/authentication.ts","../src/configuration.ts","../src/defaultConfiguration.ts","../src/errors/apiError.ts","../src/apiHelper.ts","../src/errors/abortError.ts","../src/fileWrapper.ts","../src/http/queryString.ts","../src/http/httpClient.ts","../src/errors/argumentsValidationError.ts","../src/errors/responseValidationError.ts","../src/http/pathTemplate.ts","../src/http/validate.ts","../src/http/xmlSerialization.ts","../src/http/requestBuilder.ts","../src/client.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { object, Schema, string } from '../schema';\n\n/**\n * Defines the parameters that can be included in the body of\n * a request to the [RegisterDomain](#endpoint-registerdomain) endpoint.\n */\nexport interface RegisterDomainRequest {\n  /** A domain name as described in RFC-1034 that will be registered with ApplePay */\n  domainName: string;\n}\n\nexport const registerDomainRequestSchema: Schema<RegisterDomainRequest> = object(\n  { domainName: ['domain_name', string()] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents an error encountered during a request to the Connect API.\n * See [Handling errors](#handlingerrors) for more information.\n */\nexport interface Error {\n  /**\n   * Indicates which high-level category of error has occurred during a\n   * request to the Connect API.\n   */\n  category: string;\n  /**\n   * Indicates the specific error that occurred during a request to a\n   * Square API.\n   */\n  code: string;\n  /** A human-readable description of the error for debugging purposes. */\n  detail?: string;\n  /**\n   * The name of the field provided in the original request (if any) that\n   * the error pertains to.\n   */\n  field?: string;\n}\n\nexport const errorSchema: Schema<Error> = object({\n  category: ['category', string()],\n  code: ['code', string()],\n  detail: ['detail', optional(string())],\n  field: ['field', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RegisterDomain](#endpoint-registerdomain) endpoint.\n * Either `errors` or `status` will be present in a given response (never both).\n */\nexport interface RegisterDomainResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The status of domain registration. */\n  status?: string;\n}\n\nexport const registerDomainResponseSchema: Schema<RegisterDomainResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    status: ['status', optional(string())],\n  }\n);\n","import { ClientInterface, SdkRequestBuilderFactory } from '../clientInterface';\n\n/** Base class for all controllers */\nexport class BaseApi {\n  /** Create a request builder */\n  protected createRequest: SdkRequestBuilderFactory;\n\n  constructor(client: ClientInterface) {\n    this.createRequest = client.getRequestBuilderFactory();\n  }\n}\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  RegisterDomainRequest,\n  registerDomainRequestSchema,\n} from '../models/registerDomainRequest';\nimport {\n  RegisterDomainResponse,\n  registerDomainResponseSchema,\n} from '../models/registerDomainResponse';\nimport { BaseApi } from './baseApi';\n\nexport class ApplePayApi extends BaseApi {\n  /**\n   * Activates a domain for use with Web Apple Pay and Square. A validation\n   * will be performed on this domain by Apple to ensure is it properly set up as\n   * an Apple Pay enabled domain.\n   *\n   * This endpoint provides an easy way for platform developers to bulk activate\n   * Web Apple Pay with Square for merchants using their platform.\n   *\n   * To learn more about Apple Pay on Web see the Apple Pay section in the\n   * [Square Payment Form Walkthrough](https://developer.squareup.com/docs/payment-form/payment-form-\n   * walkthrough).\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                             corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async registerDomain(\n    body: RegisterDomainRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RegisterDomainResponse>> {\n    const req = this.createRequest('POST', '/v2/apple-pay/domains');\n    const mapped = req.prepareArgs({\n      body: [body, registerDomainRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(registerDomainResponseSchema, requestOptions);\n  }\n}\n","import { boolean, number, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a bank account. For more information about\n * linking a bank account to a Square account, see\n * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n */\nexport interface BankAccount {\n  /** The unique, Square-issued identifier for the bank account. */\n  id: string;\n  /** The last few digits of the account number. */\n  accountNumberSuffix: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country: string;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency: string;\n  /** Indicates the financial purpose of the bank account. */\n  accountType: string;\n  /**\n   * Name of the account holder. This name must match the name\n   * on the targeted bank account record.\n   */\n  holderName: string;\n  /**\n   * Primary identifier for the bank. For more information, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  primaryBankIdentificationNumber: string;\n  /**\n   * Secondary identifier for the bank. For more information, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  secondaryBankIdentificationNumber?: string;\n  /**\n   * Reference identifier that will be displayed to UK bank account owners\n   * when collecting direct debit authorization. Only required for UK bank accounts.\n   */\n  debitMandateReferenceId?: string;\n  /**\n   * Client-provided identifier for linking the banking account to an entity\n   * in a third-party system (for example, a bank account number or a user identifier).\n   */\n  referenceId?: string;\n  /** The location to which the bank account belongs. */\n  locationId?: string;\n  /** Indicates the current verification status of a `BankAccount` object. */\n  status: string;\n  /** Indicates whether it is possible for Square to send money to this bank account. */\n  creditable: boolean;\n  /**\n   * Indicates whether it is possible for Square to take money from this\n   * bank account.\n   */\n  debitable: boolean;\n  /**\n   * A Square-assigned, unique identifier for the bank account based on the\n   * account information. The account fingerprint can be used to compare account\n   * entries and determine if the they represent the same real-world bank account.\n   */\n  fingerprint?: string;\n  /** The current version of the `BankAccount`. */\n  version?: number;\n  /**\n   * Read only. Name of actual financial institution.\n   * For example \"Bank of America\".\n   */\n  bankName?: string;\n}\n\nexport const bankAccountSchema: Schema<BankAccount> = object({\n  id: ['id', string()],\n  accountNumberSuffix: ['account_number_suffix', string()],\n  country: ['country', string()],\n  currency: ['currency', string()],\n  accountType: ['account_type', string()],\n  holderName: ['holder_name', string()],\n  primaryBankIdentificationNumber: [\n    'primary_bank_identification_number',\n    string(),\n  ],\n  secondaryBankIdentificationNumber: [\n    'secondary_bank_identification_number',\n    optional(string()),\n  ],\n  debitMandateReferenceId: ['debit_mandate_reference_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  status: ['status', string()],\n  creditable: ['creditable', boolean()],\n  debitable: ['debitable', boolean()],\n  fingerprint: ['fingerprint', optional(string())],\n  version: ['version', optional(number())],\n  bankName: ['bank_name', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BankAccount, bankAccountSchema } from './bankAccount';\nimport { Error, errorSchema } from './error';\n\n/** Response object returned by GetBankAccountByV1Id. */\nexport interface GetBankAccountByV1IdResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a bank account. For more information about\n   * linking a bank account to a Square account, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  bankAccount?: BankAccount;\n}\n\nexport const getBankAccountByV1IdResponseSchema: Schema<GetBankAccountByV1IdResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    bankAccount: ['bank_account', optional(lazy(() => bankAccountSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BankAccount, bankAccountSchema } from './bankAccount';\nimport { Error, errorSchema } from './error';\n\n/** Response object returned by `GetBankAccount`. */\nexport interface GetBankAccountResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a bank account. For more information about\n   * linking a bank account to a Square account, see\n   * [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).\n   */\n  bankAccount?: BankAccount;\n}\n\nexport const getBankAccountResponseSchema: Schema<GetBankAccountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    bankAccount: ['bank_account', optional(lazy(() => bankAccountSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { BankAccount, bankAccountSchema } from './bankAccount';\nimport { Error, errorSchema } from './error';\n\n/** Response object returned by ListBankAccounts. */\nexport interface ListBankAccountsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** List of BankAccounts associated with this account. */\n  bankAccounts?: BankAccount[];\n  /**\n   * When a response is truncated, it includes a cursor that you can\n   * use in a subsequent request to fetch next set of bank accounts.\n   * If empty, this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listBankAccountsResponseSchema: Schema<ListBankAccountsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    bankAccounts: [\n      'bank_accounts',\n      optional(array(lazy(() => bankAccountSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  GetBankAccountByV1IdResponse,\n  getBankAccountByV1IdResponseSchema,\n} from '../models/getBankAccountByV1IdResponse';\nimport {\n  GetBankAccountResponse,\n  getBankAccountResponseSchema,\n} from '../models/getBankAccountResponse';\nimport {\n  ListBankAccountsResponse,\n  listBankAccountsResponseSchema,\n} from '../models/listBankAccountsResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class BankAccountsApi extends BaseApi {\n  /**\n   * Returns a list of [BankAccount](#type-bankaccount) objects linked to a Square account.\n   *\n   * @param cursor      The pagination cursor returned by a previous call to this endpoint. Use it in the\n   *                              next `ListBankAccounts` request to retrieve the next set  of results.  See the\n   *                              [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide\n   *                              for more information.\n   * @param limit       Upper limit on the number of bank accounts to return in the response.  Currently,\n   *                              1000 is the largest supported limit. You can specify a limit  of up to 1000 bank\n   *                              accounts. This is also the default limit.\n   * @param locationId  Location ID. You can specify this optional filter  to retrieve only the linked bank\n   *                              accounts belonging to a specific location.\n   * @return Response from the API call\n   */\n  async listBankAccounts(\n    cursor?: string,\n    limit?: number,\n    locationId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListBankAccountsResponse>> {\n    const req = this.createRequest('GET', '/v2/bank-accounts');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n      locationId: [locationId, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    req.query('location_id', mapped.locationId);\n    return req.callAsJson(listBankAccountsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details of a [BankAccount](#type-bankaccount) identified by V1 bank account ID.\n   *\n   * @param v1BankAccountId    Connect V1 ID of the desired `BankAccount`. For more information, see\n   *                                     [Retrieve a bank account by using an ID issued by V1 Bank Accounts API](https:\n   *                                     //developer.squareup.com/docs/bank-accounts-api#retrieve-a-bank-account-by-\n   *                                     using-an-id-issued-by-v1-bank-accounts-api).\n   * @return Response from the API call\n   */\n  async getBankAccountByV1Id(\n    v1BankAccountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetBankAccountByV1IdResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      v1BankAccountId: [v1BankAccountId, string()],\n    });\n    req.appendTemplatePath`/v2/bank-accounts/by-v1-id/${mapped.v1BankAccountId}`;\n    return req.callAsJson(getBankAccountByV1IdResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details of a [BankAccount](#type-bankaccount)\n   * linked to a Square account.\n   *\n   * @param bankAccountId   Square-issued ID of the desired `BankAccount`.\n   * @return Response from the API call\n   */\n  async getBankAccount(\n    bankAccountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetBankAccountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      bankAccountId: [bankAccountId, string()],\n    });\n    req.appendTemplatePath`/v2/bank-accounts/${mapped.bankAccountId}`;\n    return req.callAsJson(getBankAccountResponseSchema, requestOptions);\n  }\n}\n","import { number, object, Schema, string } from '../schema';\n\n/** Defines an appointment segment of a booking. */\nexport interface AppointmentSegment {\n  /** The time span in minutes of an appointment segment. */\n  durationMinutes: number;\n  /** The ID of the [CatalogItemVariation](#type-CatalogItemVariation) object representing the service booked in this segment. */\n  serviceVariationId: string;\n  /** The ID of the [TeamMember](#type-TeamMember) object representing the team member booked in this segment. */\n  teamMemberId: string;\n  /** The current version of the item variation representing the service booked in this segment. */\n  serviceVariationVersion: number;\n}\n\nexport const appointmentSegmentSchema: Schema<AppointmentSegment> = object({\n  durationMinutes: ['duration_minutes', number()],\n  serviceVariationId: ['service_variation_id', string()],\n  teamMemberId: ['team_member_id', string()],\n  serviceVariationVersion: ['service_variation_version', number()],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  AppointmentSegment,\n  appointmentSegmentSchema,\n} from './appointmentSegment';\n\n/**\n * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n * at a given location to a requesting customer in one or more appointment segments.\n */\nexport interface Booking {\n  /** A unique ID of this object representing a booking. */\n  id?: string;\n  /** The revision number for the booking used for optimistic concurrency. */\n  version?: number;\n  /** Supported booking statuses. */\n  status?: string;\n  /** The timestamp specifying the creation time of this booking. */\n  createdAt?: string;\n  /** The timestamp specifying the most recent update time of this booking. */\n  updatedAt?: string;\n  /** The timestamp specifying the starting time of this booking. */\n  startAt?: string;\n  /** The ID of the [Location](#type-location) object representing the location where the booked service is provided. */\n  locationId?: string;\n  /** The ID of the [Customer](#type-Customer) object representing the customer attending this booking */\n  customerId?: string;\n  /** The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](#type-CatalogObject) instance. */\n  customerNote?: string;\n  /**\n   * The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](#type-CatalogObject) instance.\n   * This field should not be visible to customers.\n   */\n  sellerNote?: string;\n  /** A list of appointment segments for this booking. */\n  appointmentSegments?: AppointmentSegment[];\n}\n\nexport const bookingSchema: Schema<Booking> = object({\n  id: ['id', optional(string())],\n  version: ['version', optional(number())],\n  status: ['status', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  startAt: ['start_at', optional(string())],\n  locationId: ['location_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  customerNote: ['customer_note', optional(string())],\n  sellerNote: ['seller_note', optional(string())],\n  appointmentSegments: [\n    'appointment_segments',\n    optional(array(lazy(() => appointmentSegmentSchema))),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Booking, bookingSchema } from './booking';\n\nexport interface CreateBookingRequest {\n  /** A unique key to make this request an idempotent operation. */\n  idempotencyKey?: string;\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking: Booking;\n}\n\nexport const createBookingRequestSchema: Schema<CreateBookingRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  booking: ['booking', lazy(() => bookingSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface CreateBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createBookingResponseSchema: Schema<CreateBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */\nexport interface TeamMemberBookingProfile {\n  /** The ID of the [TeamMember](#type-TeamMember) object for the team member associated with the booking profile. */\n  teamMemberId?: string;\n  /** The description of the team member. */\n  description?: string;\n  /** The display name of the team member. */\n  displayName?: string;\n  /** Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (`true) or not (`false`). */\n  isBookable?: boolean;\n  /** The URL of the team member's image for the bookings profile. */\n  profileImageUrl?: string;\n}\n\nexport const teamMemberBookingProfileSchema: Schema<TeamMemberBookingProfile> = object(\n  {\n    teamMemberId: ['team_member_id', optional(string())],\n    description: ['description', optional(string())],\n    displayName: ['display_name', optional(string())],\n    isBookable: ['is_bookable', optional(boolean())],\n    profileImageUrl: ['profile_image_url', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  TeamMemberBookingProfile,\n  teamMemberBookingProfileSchema,\n} from './teamMemberBookingProfile';\n\nexport interface ListTeamMemberBookingProfilesResponse {\n  /** The list of team member booking profiles. */\n  teamMemberBookingProfiles?: TeamMemberBookingProfile[];\n  /** The cursor for paginating through the results. */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listTeamMemberBookingProfilesResponseSchema: Schema<ListTeamMemberBookingProfilesResponse> = object(\n  {\n    teamMemberBookingProfiles: [\n      'team_member_booking_profiles',\n      optional(array(lazy(() => teamMemberBookingProfileSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveBookingResponseSchema: Schema<RetrieveBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents an amount of money. `Money` fields can be signed or unsigned.\n * Fields that do not explicitly define whether they are signed or unsigned are\n * considered unsigned and can only hold positive amounts. For signed fields, the\n * sign of the value indicates the purpose of the money transfer. See\n * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n * for more information.\n */\nexport interface Money {\n  /**\n   * The amount of money, in the smallest denomination of the currency\n   * indicated by `currency`. For example, when `currency` is `USD`, `amount` is\n   * in cents. Monetary amounts can be positive or negative. See the specific\n   * field description to determine the meaning of the sign in a particular case.\n   */\n  amount?: number;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency?: string;\n}\n\nexport const moneySchema: Schema<Money> = object({\n  amount: ['amount', optional(number())],\n  currency: ['currency', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** The service appointment settings, including where and how the service is provided. */\nexport interface BusinessAppointmentSettings {\n  /**\n   * Types of the location allowed for bookings.\n   * See [BookingLocationType](#type-bookinglocationtype) for possible values\n   */\n  locationTypes?: string[];\n  /** Time units of a service duration for bookings. */\n  alignmentTime?: string;\n  /** The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time. */\n  minBookingLeadTimeSeconds?: number;\n  /** The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time. */\n  maxBookingLeadTimeSeconds?: number;\n  /**\n   * Indicates whether a customer can choose from all available time slots and have a staff member assigned\n   * automatically (`true`) or not (`false`).\n   */\n  anyTeamMemberBookingEnabled?: boolean;\n  /** Indicates whether a customer can book multiple services in a single online booking. */\n  multipleServiceBookingEnabled?: boolean;\n  /** Types of daily appointment limits. */\n  maxAppointmentsPerDayLimitType?: string;\n  /** The maximum number of daily appointments per team member or per location. */\n  maxAppointmentsPerDayLimit?: number;\n  /** The cut-off time in seconds for allowing clients to cancel or reschedule an appointment. */\n  cancellationWindowSeconds?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cancellationFeeMoney?: Money;\n  /** The category of the seller’s cancellation policy. */\n  cancellationPolicy?: string;\n  /** The free-form text of the seller's cancellation policy. */\n  cancellationPolicyText?: string;\n  /** Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`). */\n  skipBookingFlowStaffSelection?: boolean;\n}\n\nexport const businessAppointmentSettingsSchema: Schema<BusinessAppointmentSettings> = object(\n  {\n    locationTypes: ['location_types', optional(array(string()))],\n    alignmentTime: ['alignment_time', optional(string())],\n    minBookingLeadTimeSeconds: [\n      'min_booking_lead_time_seconds',\n      optional(number()),\n    ],\n    maxBookingLeadTimeSeconds: [\n      'max_booking_lead_time_seconds',\n      optional(number()),\n    ],\n    anyTeamMemberBookingEnabled: [\n      'any_team_member_booking_enabled',\n      optional(boolean()),\n    ],\n    multipleServiceBookingEnabled: [\n      'multiple_service_booking_enabled',\n      optional(boolean()),\n    ],\n    maxAppointmentsPerDayLimitType: [\n      'max_appointments_per_day_limit_type',\n      optional(string()),\n    ],\n    maxAppointmentsPerDayLimit: [\n      'max_appointments_per_day_limit',\n      optional(number()),\n    ],\n    cancellationWindowSeconds: [\n      'cancellation_window_seconds',\n      optional(number()),\n    ],\n    cancellationFeeMoney: [\n      'cancellation_fee_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    cancellationPolicy: ['cancellation_policy', optional(string())],\n    cancellationPolicyText: ['cancellation_policy_text', optional(string())],\n    skipBookingFlowStaffSelection: [\n      'skip_booking_flow_staff_selection',\n      optional(boolean()),\n    ],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  BusinessAppointmentSettings,\n  businessAppointmentSettingsSchema,\n} from './businessAppointmentSettings';\n\nexport interface BusinessBookingProfile {\n  /** The ID of the seller, obtainable using the Merchants API. */\n  sellerId?: string;\n  /** The RFC-3339 timestamp specifying the booking's creation time. */\n  createdAt?: string;\n  /** Indicates whether the seller is open for booking. */\n  bookingEnabled?: boolean;\n  /** Choices of customer-facing time zone used for bookings. */\n  customerTimezoneChoice?: string;\n  /** Policies for accepting bookings. */\n  bookingPolicy?: string;\n  /** Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`). */\n  allowUserCancel?: boolean;\n  /** The service appointment settings, including where and how the service is provided. */\n  businessAppointmentSettings?: BusinessAppointmentSettings;\n}\n\nexport const businessBookingProfileSchema: Schema<BusinessBookingProfile> = object(\n  {\n    sellerId: ['seller_id', optional(string())],\n    createdAt: ['created_at', optional(string())],\n    bookingEnabled: ['booking_enabled', optional(boolean())],\n    customerTimezoneChoice: ['customer_timezone_choice', optional(string())],\n    bookingPolicy: ['booking_policy', optional(string())],\n    allowUserCancel: ['allow_user_cancel', optional(boolean())],\n    businessAppointmentSettings: [\n      'business_appointment_settings',\n      optional(lazy(() => businessAppointmentSettingsSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  BusinessBookingProfile,\n  businessBookingProfileSchema,\n} from './businessBookingProfile';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveBusinessBookingProfileResponse {\n  businessBookingProfile?: BusinessBookingProfile;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveBusinessBookingProfileResponseSchema: Schema<RetrieveBusinessBookingProfileResponse> = object(\n  {\n    businessBookingProfile: [\n      'business_booking_profile',\n      optional(lazy(() => businessBookingProfileSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  TeamMemberBookingProfile,\n  teamMemberBookingProfileSchema,\n} from './teamMemberBookingProfile';\n\nexport interface RetrieveTeamMemberBookingProfileResponse {\n  /** The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider. */\n  teamMemberBookingProfile?: TeamMemberBookingProfile;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveTeamMemberBookingProfileResponseSchema: Schema<RetrieveTeamMemberBookingProfileResponse> = object(\n  {\n    teamMemberBookingProfile: [\n      'team_member_booking_profile',\n      optional(lazy(() => teamMemberBookingProfileSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * A filter to select resources based on an exact field value. For any given\n * value, the value can only be in one property. Depending on the field, either\n * all properties can be set or only a subset will be available.\n * Refer to the documentation of the field.\n */\nexport interface FilterValue {\n  /** A list of terms that must be present on the field of the resource. */\n  all?: string[];\n  /**\n   * A list of terms where at least one of them must be present on the\n   * field of the resource.\n   */\n  any?: string[];\n  /** A list of terms that must not be present on the field the resource */\n  none?: string[];\n}\n\nexport const filterValueSchema: Schema<FilterValue> = object({\n  all: ['all', optional(array(string()))],\n  any: ['any', optional(array(string()))],\n  none: ['none', optional(array(string()))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { FilterValue, filterValueSchema } from './filterValue';\n\n/** A query filter to search for appointment segments by. */\nexport interface SegmentFilter {\n  /** The ID of the [CatalogItemVariation](#type-CatalogItemVariation) representing the service booked in this segment. */\n  serviceVariationId: string;\n  /**\n   * A filter to select resources based on an exact field value. For any given\n   * value, the value can only be in one property. Depending on the field, either\n   * all properties can be set or only a subset will be available.\n   * Refer to the documentation of the field.\n   */\n  teamMemberIdFilter?: FilterValue;\n}\n\nexport const segmentFilterSchema: Schema<SegmentFilter> = object({\n  serviceVariationId: ['service_variation_id', string()],\n  teamMemberIdFilter: [\n    'team_member_id_filter',\n    optional(lazy(() => filterValueSchema)),\n  ],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a generic time range. The start and end values are\n * represented in RFC 3339 format. Time ranges are customized to be\n * inclusive or exclusive based on the needs of a particular endpoint.\n * Refer to the relevant endpoint-specific documentation to determine\n * how time ranges are handled.\n */\nexport interface TimeRange {\n  /**\n   * A datetime value in RFC 3339 format indicating when the time range\n   * starts.\n   */\n  startAt?: string;\n  /**\n   * A datetime value in RFC 3339 format indicating when the time range\n   * ends.\n   */\n  endAt?: string;\n}\n\nexport const timeRangeSchema: Schema<TimeRange> = object({\n  startAt: ['start_at', optional(string())],\n  endAt: ['end_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { SegmentFilter, segmentFilterSchema } from './segmentFilter';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/** A query filter to search for availabilities by. */\nexport interface SearchAvailabilityFilter {\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  startAtRange: TimeRange;\n  /**\n   * The query expression to search for availabilities matching the specified seller location IDs.\n   * This query expression is not applicable when `booking_id` is present.\n   */\n  locationId?: string;\n  /**\n   * The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per\n   * availability. It is not applicable when `booking_id` is present.\n   */\n  segmentFilters?: SegmentFilter[];\n  /**\n   * The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.\n   * This is commonly used to reschedule an appointment.\n   * If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.\n   */\n  bookingId?: string;\n}\n\nexport const searchAvailabilityFilterSchema: Schema<SearchAvailabilityFilter> = object(\n  {\n    startAtRange: ['start_at_range', lazy(() => timeRangeSchema)],\n    locationId: ['location_id', optional(string())],\n    segmentFilters: [\n      'segment_filters',\n      optional(array(lazy(() => segmentFilterSchema))),\n    ],\n    bookingId: ['booking_id', optional(string())],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport {\n  SearchAvailabilityFilter,\n  searchAvailabilityFilterSchema,\n} from './searchAvailabilityFilter';\n\n/** Query conditions to search for availabilities of bookings. */\nexport interface SearchAvailabilityQuery {\n  /** A query filter to search for availabilities by. */\n  filter: SearchAvailabilityFilter;\n}\n\nexport const searchAvailabilityQuerySchema: Schema<SearchAvailabilityQuery> = object(\n  { filter: ['filter', lazy(() => searchAvailabilityFilterSchema)] }\n);\n","import { lazy, object, Schema } from '../schema';\nimport {\n  SearchAvailabilityQuery,\n  searchAvailabilityQuerySchema,\n} from './searchAvailabilityQuery';\n\nexport interface SearchAvailabilityRequest {\n  /** Query conditions to search for availabilities of bookings. */\n  query: SearchAvailabilityQuery;\n}\n\nexport const searchAvailabilityRequestSchema: Schema<SearchAvailabilityRequest> = object(\n  { query: ['query', lazy(() => searchAvailabilityQuerySchema)] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  AppointmentSegment,\n  appointmentSegmentSchema,\n} from './appointmentSegment';\n\n/** Describes a slot available for booking, encapsulating appointment segments, the location and starting time. */\nexport interface Availability {\n  /** The RFC-3339 timestamp specifying the beginning time of the slot available for booking. */\n  startAt?: string;\n  /** The ID of the location available for booking. */\n  locationId?: string;\n  /** The list of appointment segments available for booking */\n  appointmentSegments?: AppointmentSegment[];\n}\n\nexport const availabilitySchema: Schema<Availability> = object({\n  startAt: ['start_at', optional(string())],\n  locationId: ['location_id', optional(string())],\n  appointmentSegments: [\n    'appointment_segments',\n    optional(array(lazy(() => appointmentSegmentSchema))),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Availability, availabilitySchema } from './availability';\nimport { Error, errorSchema } from './error';\n\nexport interface SearchAvailabilityResponse {\n  /** List of slots available for booking. */\n  availabilities?: Availability[];\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const searchAvailabilityResponseSchema: Schema<SearchAvailabilityResponse> = object(\n  {\n    availabilities: [\n      'availabilities',\n      optional(array(lazy(() => availabilitySchema))),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Booking, bookingSchema } from './booking';\n\nexport interface UpdateBookingRequest {\n  /** A unique key to make this request an idempotent operation. */\n  idempotencyKey?: string;\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking: Booking;\n}\n\nexport const updateBookingRequestSchema: Schema<UpdateBookingRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  booking: ['booking', lazy(() => bookingSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Booking, bookingSchema } from './booking';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateBookingResponse {\n  /**\n   * Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service\n   * at a given location to a requesting customer in one or more appointment segments.\n   */\n  booking?: Booking;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateBookingResponseSchema: Schema<UpdateBookingResponse> = object(\n  {\n    booking: ['booking', optional(lazy(() => bookingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateBookingRequest,\n  createBookingRequestSchema,\n} from '../models/createBookingRequest';\nimport {\n  CreateBookingResponse,\n  createBookingResponseSchema,\n} from '../models/createBookingResponse';\nimport {\n  ListTeamMemberBookingProfilesResponse,\n  listTeamMemberBookingProfilesResponseSchema,\n} from '../models/listTeamMemberBookingProfilesResponse';\nimport {\n  RetrieveBookingResponse,\n  retrieveBookingResponseSchema,\n} from '../models/retrieveBookingResponse';\nimport {\n  RetrieveBusinessBookingProfileResponse,\n  retrieveBusinessBookingProfileResponseSchema,\n} from '../models/retrieveBusinessBookingProfileResponse';\nimport {\n  RetrieveTeamMemberBookingProfileResponse,\n  retrieveTeamMemberBookingProfileResponseSchema,\n} from '../models/retrieveTeamMemberBookingProfileResponse';\nimport {\n  SearchAvailabilityRequest,\n  searchAvailabilityRequestSchema,\n} from '../models/searchAvailabilityRequest';\nimport {\n  SearchAvailabilityResponse,\n  searchAvailabilityResponseSchema,\n} from '../models/searchAvailabilityResponse';\nimport {\n  UpdateBookingRequest,\n  updateBookingRequestSchema,\n} from '../models/updateBookingRequest';\nimport {\n  UpdateBookingResponse,\n  updateBookingResponseSchema,\n} from '../models/updateBookingResponse';\nimport { boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class BookingsApi extends BaseApi {\n  /**\n   * Creates a booking.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                            corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createBooking(\n    body: CreateBookingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateBookingResponse>> {\n    const req = this.createRequest('POST', '/v2/bookings');\n    const mapped = req.prepareArgs({\n      body: [body, createBookingRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createBookingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for availabilities for booking.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                                 corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchAvailability(\n    body: SearchAvailabilityRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchAvailabilityResponse>> {\n    const req = this.createRequest('POST', '/v2/bookings/availability/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchAvailabilityRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchAvailabilityResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a seller's booking profile.\n   *\n   * @return Response from the API call\n   */\n  async retrieveBusinessBookingProfile(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveBusinessBookingProfileResponse>> {\n    const req = this.createRequest(\n      'GET',\n      '/v2/bookings/business-booking-profile'\n    );\n    return req.callAsJson(\n      retrieveBusinessBookingProfileResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Lists booking profiles for team members.\n   *\n   * @param bookableOnly  Indicates whether to include only bookable team members in the returned result\n   *                                 (`true`) or not (`false`).\n   * @param limit         The maximum number of results to return.\n   * @param cursor        The cursor for paginating through the results.\n   * @param locationId    Indicates whether to include only team members enabled at the given location in\n   *                                 the returned result.\n   * @return Response from the API call\n   */\n  async listTeamMemberBookingProfiles(\n    bookableOnly?: boolean,\n    limit?: number,\n    cursor?: string,\n    locationId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListTeamMemberBookingProfilesResponse>> {\n    const req = this.createRequest(\n      'GET',\n      '/v2/bookings/team-member-booking-profiles'\n    );\n    const mapped = req.prepareArgs({\n      bookableOnly: [bookableOnly, optional(boolean())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n    });\n    req.query('bookable_only', mapped.bookableOnly);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    return req.callAsJson(\n      listTeamMemberBookingProfilesResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a team member's booking profile.\n   *\n   * @param teamMemberId   The ID of the team member to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveTeamMemberBookingProfile(\n    teamMemberId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveTeamMemberBookingProfileResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ teamMemberId: [teamMemberId, string()] });\n    req.appendTemplatePath`/v2/bookings/team-member-booking-profiles/${mapped.teamMemberId}`;\n    return req.callAsJson(\n      retrieveTeamMemberBookingProfileResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a booking.\n   *\n   * @param bookingId  The ID of the [Booking](#type-booking) object representing the to-be-retrieved\n   *                             booking.\n   * @return Response from the API call\n   */\n  async retrieveBooking(\n    bookingId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveBookingResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ bookingId: [bookingId, string()] });\n    req.appendTemplatePath`/v2/bookings/${mapped.bookingId}`;\n    return req.callAsJson(retrieveBookingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a booking.\n   *\n   * @param bookingId  The ID of the [Booking](#type-booking) object representing the\n   *                                                  to-be-updated booking.\n   * @param body       An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateBooking(\n    bookingId: string,\n    body: UpdateBookingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateBookingResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      bookingId: [bookingId, string()],\n      body: [body, updateBookingRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/bookings/${mapped.bookingId}`;\n    return req.callAsJson(updateBookingResponseSchema, requestOptions);\n  }\n}\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\nexport interface CashDrawerShiftEvent {\n  /** The unique ID of the event. */\n  id?: string;\n  /** The ID of the employee that created the event. */\n  employeeId?: string;\n  /**\n   * The types of events on a CashDrawerShift.\n   * Each event type represents an employee action on the actual cash drawer\n   * represented by a CashDrawerShift.\n   */\n  eventType?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  eventMoney?: Money;\n  /** The event time in ISO 8601 format. */\n  createdAt?: string;\n  /**\n   * An optional description of the event, entered by the employee that\n   * created the event.\n   */\n  description?: string;\n}\n\nexport const cashDrawerShiftEventSchema: Schema<CashDrawerShiftEvent> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  eventType: ['event_type', optional(string())],\n  eventMoney: ['event_money', optional(lazy(() => moneySchema))],\n  createdAt: ['created_at', optional(string())],\n  description: ['description', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  CashDrawerShiftEvent,\n  cashDrawerShiftEventSchema,\n} from './cashDrawerShiftEvent';\nimport { Error, errorSchema } from './error';\n\nexport interface ListCashDrawerShiftEventsResponse {\n  /**\n   * All of the events (payments, refunds, etc.) for a cash drawer during\n   * the shift.\n   */\n  events?: CashDrawerShiftEvent[];\n  /**\n   * Opaque cursor for fetching the next page. Cursor is not present in\n   * the last page of results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listCashDrawerShiftEventsResponseSchema: Schema<ListCashDrawerShiftEventsResponse> = object(\n  {\n    events: ['events', optional(array(lazy(() => cashDrawerShiftEventSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * The summary of a closed cash drawer shift.\n * This model contains only the money counted to start a cash drawer shift, counted\n * at the end of the shift, and the amount that should be in the drawer at shift\n * end based on summing all cash drawer shift events.\n */\nexport interface CashDrawerShiftSummary {\n  /** The shift unique ID. */\n  id?: string;\n  /** The current state of a cash drawer shift. */\n  state?: string;\n  /** The shift start time in ISO 8601 format. */\n  openedAt?: string;\n  /** The shift end time in ISO 8601 format. */\n  endedAt?: string;\n  /** The shift close time in ISO 8601 format. */\n  closedAt?: string;\n  /** An employee free-text description of a cash drawer shift. */\n  description?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  openedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  expectedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  closedCashMoney?: Money;\n}\n\nexport const cashDrawerShiftSummarySchema: Schema<CashDrawerShiftSummary> = object(\n  {\n    id: ['id', optional(string())],\n    state: ['state', optional(string())],\n    openedAt: ['opened_at', optional(string())],\n    endedAt: ['ended_at', optional(string())],\n    closedAt: ['closed_at', optional(string())],\n    description: ['description', optional(string())],\n    openedCashMoney: ['opened_cash_money', optional(lazy(() => moneySchema))],\n    expectedCashMoney: [\n      'expected_cash_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    closedCashMoney: ['closed_cash_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  CashDrawerShiftSummary,\n  cashDrawerShiftSummarySchema,\n} from './cashDrawerShiftSummary';\nimport { Error, errorSchema } from './error';\n\nexport interface ListCashDrawerShiftsResponse {\n  /**\n   * A collection of CashDrawerShiftSummary objects for shifts that match\n   * the query.\n   */\n  items?: CashDrawerShiftSummary[];\n  /**\n   * Opaque cursor for fetching the next page of results. Cursor is not\n   * present in the last page of results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listCashDrawerShiftsResponseSchema: Schema<ListCashDrawerShiftsResponse> = object(\n  {\n    items: ['items', optional(array(lazy(() => cashDrawerShiftSummarySchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface CashDrawerDevice {\n  /** The device Square-issued ID */\n  id?: string;\n  /** The device merchant-specified name. */\n  name?: string;\n}\n\nexport const cashDrawerDeviceSchema: Schema<CashDrawerDevice> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CashDrawerDevice, cashDrawerDeviceSchema } from './cashDrawerDevice';\nimport { Money, moneySchema } from './money';\n\n/**\n * This model gives the details of a cash drawer shift.\n * The cash_payment_money, cash_refund_money, cash_paid_in_money,\n * and cash_paid_out_money fields are all computed by summing their respective\n * event types.\n */\nexport interface CashDrawerShift {\n  /** The shift unique ID. */\n  id?: string;\n  /** The current state of a cash drawer shift. */\n  state?: string;\n  /** The time when the shift began, in ISO 8601 format. */\n  openedAt?: string;\n  /** The time when the shift ended, in ISO 8601 format. */\n  endedAt?: string;\n  /** The time when the shift was closed, in ISO 8601 format. */\n  closedAt?: string;\n  /**\n   * The IDs of all employees that were logged into Square Point of Sale at any\n   * point while the cash drawer shift was open.\n   */\n  employeeIds?: string[];\n  /** The ID of the employee that started the cash drawer shift. */\n  openingEmployeeId?: string;\n  /** The ID of the employee that ended the cash drawer shift. */\n  endingEmployeeId?: string;\n  /**\n   * The ID of the employee that closed the cash drawer shift by auditing\n   * the cash drawer contents.\n   */\n  closingEmployeeId?: string;\n  /** The free-form text description of a cash drawer by an employee. */\n  description?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  openedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashPaymentMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashRefundsMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashPaidInMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  cashPaidOutMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  expectedCashMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  closedCashMoney?: Money;\n  device?: CashDrawerDevice;\n}\n\nexport const cashDrawerShiftSchema: Schema<CashDrawerShift> = object({\n  id: ['id', optional(string())],\n  state: ['state', optional(string())],\n  openedAt: ['opened_at', optional(string())],\n  endedAt: ['ended_at', optional(string())],\n  closedAt: ['closed_at', optional(string())],\n  employeeIds: ['employee_ids', optional(array(string()))],\n  openingEmployeeId: ['opening_employee_id', optional(string())],\n  endingEmployeeId: ['ending_employee_id', optional(string())],\n  closingEmployeeId: ['closing_employee_id', optional(string())],\n  description: ['description', optional(string())],\n  openedCashMoney: ['opened_cash_money', optional(lazy(() => moneySchema))],\n  cashPaymentMoney: ['cash_payment_money', optional(lazy(() => moneySchema))],\n  cashRefundsMoney: ['cash_refunds_money', optional(lazy(() => moneySchema))],\n  cashPaidInMoney: ['cash_paid_in_money', optional(lazy(() => moneySchema))],\n  cashPaidOutMoney: ['cash_paid_out_money', optional(lazy(() => moneySchema))],\n  expectedCashMoney: ['expected_cash_money', optional(lazy(() => moneySchema))],\n  closedCashMoney: ['closed_cash_money', optional(lazy(() => moneySchema))],\n  device: ['device', optional(lazy(() => cashDrawerDeviceSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CashDrawerShift, cashDrawerShiftSchema } from './cashDrawerShift';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveCashDrawerShiftResponse {\n  /**\n   * This model gives the details of a cash drawer shift.\n   * The cash_payment_money, cash_refund_money, cash_paid_in_money,\n   * and cash_paid_out_money fields are all computed by summing their respective\n   * event types.\n   */\n  cashDrawerShift?: CashDrawerShift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveCashDrawerShiftResponseSchema: Schema<RetrieveCashDrawerShiftResponse> = object(\n  {\n    cashDrawerShift: [\n      'cash_drawer_shift',\n      optional(lazy(() => cashDrawerShiftSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  ListCashDrawerShiftEventsResponse,\n  listCashDrawerShiftEventsResponseSchema,\n} from '../models/listCashDrawerShiftEventsResponse';\nimport {\n  ListCashDrawerShiftsResponse,\n  listCashDrawerShiftsResponseSchema,\n} from '../models/listCashDrawerShiftsResponse';\nimport {\n  RetrieveCashDrawerShiftResponse,\n  retrieveCashDrawerShiftResponseSchema,\n} from '../models/retrieveCashDrawerShiftResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CashDrawersApi extends BaseApi {\n  /**\n   * Provides the details for all of the cash drawer shifts for a location\n   * in a date range.\n   *\n   * @param locationId  The ID of the location to query for a list of cash drawer shifts.\n   * @param sortOrder   The order in which cash drawer shifts are listed in the response, based on their\n   *                              opened_at field. Default value: ASC\n   * @param beginTime   The inclusive start time of the query on opened_at, in ISO 8601 format.\n   * @param endTime     The exclusive end date of the query on opened_at, in ISO 8601 format.\n   * @param limit       Number of cash drawer shift events in a page of results (200 by default, 1000 max).\n   * @param cursor      Opaque cursor for fetching the next page of results.\n   * @return Response from the API call\n   */\n  async listCashDrawerShifts(\n    locationId: string,\n    sortOrder?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCashDrawerShiftsResponse>> {\n    const req = this.createRequest('GET', '/v2/cash-drawers/shifts');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      sortOrder: [sortOrder, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listCashDrawerShiftsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Provides the summary details for a single cash drawer shift. See\n   * [ListCashDrawerShiftEvents](#endpoint-CashDrawers-ListCashDrawerShiftEvents) for a list of cash\n   * drawer shift events.\n   *\n   * @param locationId  The ID of the location to retrieve cash drawer shifts from.\n   * @param shiftId     The shift ID.\n   * @return Response from the API call\n   */\n  async retrieveCashDrawerShift(\n    locationId: string,\n    shiftId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCashDrawerShiftResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      shiftId: [shiftId, string()],\n    });\n    req.query('location_id', mapped.locationId);\n    req.appendTemplatePath`/v2/cash-drawers/shifts/${mapped.shiftId}`;\n    return req.callAsJson(\n      retrieveCashDrawerShiftResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Provides a paginated list of events for a single cash drawer shift.\n   *\n   * @param locationId  The ID of the location to list cash drawer shifts for.\n   * @param shiftId     The shift ID.\n   * @param limit       Number of resources to be returned in a page of results (200 by default, 1000 max).\n   * @param cursor      Opaque cursor for fetching the next page of results.\n   * @return Response from the API call\n   */\n  async listCashDrawerShiftEvents(\n    locationId: string,\n    shiftId: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCashDrawerShiftEventsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      shiftId: [shiftId, string()],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/cash-drawers/shifts/${mapped.shiftId}/events`;\n    return req.callAsJson(\n      listCashDrawerShiftEventsResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface BatchDeleteCatalogObjectsRequest {\n  /**\n   * The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects\n   * in the graph that depend on that object will be deleted as well (for example, deleting a\n   * CatalogItem will delete its CatalogItemVariation.\n   */\n  objectIds?: string[];\n}\n\nexport const batchDeleteCatalogObjectsRequestSchema: Schema<BatchDeleteCatalogObjectsRequest> = object(\n  { objectIds: ['object_ids', optional(array(string()))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface BatchDeleteCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The IDs of all CatalogObjects deleted by this request. */\n  deletedObjectIds?: string[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  deletedAt?: string;\n}\n\nexport const batchDeleteCatalogObjectsResponseSchema: Schema<BatchDeleteCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deletedObjectIds: ['deleted_object_ids', optional(array(string()))],\n    deletedAt: ['deleted_at', optional(string())],\n  }\n);\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\nexport interface BatchRetrieveCatalogObjectsRequest {\n  /** The IDs of the CatalogObjects to be retrieved. */\n  objectIds: string[];\n  /**\n   * If `true`, the response will include additional objects that are related to the\n   * requested objects, as follows:\n   * If the `objects` field of the response contains a CatalogItem, its associated\n   * CatalogCategory objects, CatalogTax objects, CatalogImage objects and\n   * CatalogModifierLists will be returned in the `related_objects` field of the\n   * response. If the `objects` field of the response contains a CatalogItemVariation,\n   * its parent CatalogItem will be returned in the `related_objects` field of\n   * the response.\n   */\n  includeRelatedObjects?: boolean;\n}\n\nexport const batchRetrieveCatalogObjectsRequestSchema: Schema<BatchRetrieveCatalogObjectsRequest> = object(\n  {\n    objectIds: ['object_ids', array(string())],\n    includeRelatedObjects: ['include_related_objects', optional(boolean())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** A category to which a `CatalogItem` instance belongs. */\nexport interface CatalogCategory {\n  /** The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n}\n\nexport const catalogCategorySchema: Schema<CatalogCategory> = object({\n  name: ['name', optional(string())],\n});\n","import { number, object, optional, Schema } from '../schema';\n\nexport interface CatalogCustomAttributeDefinitionNumberConfig {\n  /**\n   * An integer between 0 and 5 that represents the maximum number of\n   * positions allowed after the decimal in number custom attribute values\n   * For example:\n   * - if the precision is 0, the quantity can be 1, 2, 3, etc.\n   * - if the precision is 1, the quantity can be 0.1, 0.2, etc.\n   * - if the precision is 2, the quantity can be 0.01, 0.12, etc.\n   * Default: 5\n   */\n  precision?: number;\n}\n\nexport const catalogCustomAttributeDefinitionNumberConfigSchema: Schema<CatalogCustomAttributeDefinitionNumberConfig> = object(\n  { precision: ['precision', optional(number())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** A named selection for this `SELECTION`-type custom attribute definition. */\nexport interface CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection {\n  /** Unique ID set by Square. */\n  uid?: string;\n  /** Selection name, unique within `allowed_selections`. */\n  name: string;\n}\n\nexport const catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema: Schema<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> = object(\n  { uid: ['uid', optional(string())], name: ['name', string()] }\n);\n","import { array, lazy, number, object, optional, Schema } from '../schema';\nimport {\n  CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection,\n  catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema,\n} from './catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection';\n\n/** Configuration associated with `SELECTION`-type custom attribute definitions. */\nexport interface CatalogCustomAttributeDefinitionSelectionConfig {\n  /**\n   * The maximum number of selections that can be set. The maximum value for this\n   * attribute is 100. The default value is 1. The value can be modified, but changing the value will not\n   * affect existing custom attribute values on objects. Clients need to\n   * handle custom attributes with more selected values than allowed by this limit.\n   */\n  maxAllowedSelections?: number;\n  /**\n   * The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100\n   * selections can be defined. Can be modified.\n   */\n  allowedSelections?: CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection[];\n}\n\nexport const catalogCustomAttributeDefinitionSelectionConfigSchema: Schema<CatalogCustomAttributeDefinitionSelectionConfig> = object(\n  {\n    maxAllowedSelections: ['max_allowed_selections', optional(number())],\n    allowedSelections: [\n      'allowed_selections',\n      optional(\n        array(\n          lazy(\n            () =>\n              catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema\n          )\n        )\n      ),\n    ],\n  }\n);\n","import { boolean, object, optional, Schema } from '../schema';\n\n/** Configuration associated with Custom Attribute Definitions of type `STRING`. */\nexport interface CatalogCustomAttributeDefinitionStringConfig {\n  /**\n   * If true, each Custom Attribute instance associated with this Custom Attribute\n   * Definition must have a unique value within the seller's catalog. For\n   * example, this may be used for a value like a SKU that should not be\n   * duplicated within a seller's catalog. May not be modified after the\n   * definition has been created.\n   */\n  enforceUniqueness?: boolean;\n}\n\nexport const catalogCustomAttributeDefinitionStringConfigSchema: Schema<CatalogCustomAttributeDefinitionStringConfig> = object(\n  { enforceUniqueness: ['enforce_uniqueness', optional(boolean())] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Provides information about the application used to generate a change. */\nexport interface SourceApplication {\n  /** Indicates the Square product used to generate an inventory change. */\n  product?: string;\n  /**\n   * Read-only Square ID assigned to the application. Only used for\n   * [Product](#type-product) type `EXTERNAL_API`.\n   */\n  applicationId?: string;\n  /**\n   * Read-only display name assigned to the application\n   * (e.g. `\"Custom Application\"`, `\"Square POS 4.74 for Android\"`).\n   */\n  name?: string;\n}\n\nexport const sourceApplicationSchema: Schema<SourceApplication> = object({\n  product: ['product', optional(string())],\n  applicationId: ['application_id', optional(string())],\n  name: ['name', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogCustomAttributeDefinitionNumberConfig,\n  catalogCustomAttributeDefinitionNumberConfigSchema,\n} from './catalogCustomAttributeDefinitionNumberConfig';\nimport {\n  CatalogCustomAttributeDefinitionSelectionConfig,\n  catalogCustomAttributeDefinitionSelectionConfigSchema,\n} from './catalogCustomAttributeDefinitionSelectionConfig';\nimport {\n  CatalogCustomAttributeDefinitionStringConfig,\n  catalogCustomAttributeDefinitionStringConfigSchema,\n} from './catalogCustomAttributeDefinitionStringConfig';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Contains information defining a custom attribute. Custom attributes are\n * intended to store additional information about a catalog object or to associate a\n * catalog object with an entity in another system. Do not use custom attributes\n * to store any sensitive information (personally identifiable information, card details, etc.).\n * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)\n */\nexport interface CatalogCustomAttributeDefinition {\n  /** Defines the possible types for a custom attribute. */\n  type: string;\n  /**\n   * The name of this definition for API and seller-facing UI purposes.\n   * The name must be unique within the (merchant, application) pair. Required.\n   * May not be empty and may not exceed 255 characters. Can be modified after creation.\n   */\n  name: string;\n  /**\n   * Seller-oriented description of the meaning of this Custom Attribute,\n   * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.\n   */\n  description?: string;\n  /** Provides information about the application used to generate a change. */\n  sourceApplication?: SourceApplication;\n  /**\n   * The set of Catalog Object Types that this Custom Attribute may be applied to.\n   * Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.\n   * See [CatalogObjectType](#type-catalogobjecttype) for possible values\n   */\n  allowedObjectTypes: string[];\n  /**\n   * Defines the visibility of a custom attribute to sellers in Square\n   * client applications, Square APIs or in Square UIs (including Square Point\n   * of Sale applications and Square Dashboard).\n   */\n  sellerVisibility?: string;\n  /**\n   * Defines the visibility of a custom attribute to applications other than their\n   * creating application.\n   */\n  appVisibility?: string;\n  /** Configuration associated with Custom Attribute Definitions of type `STRING`. */\n  stringConfig?: CatalogCustomAttributeDefinitionStringConfig;\n  numberConfig?: CatalogCustomAttributeDefinitionNumberConfig;\n  /** Configuration associated with `SELECTION`-type custom attribute definitions. */\n  selectionConfig?: CatalogCustomAttributeDefinitionSelectionConfig;\n  /**\n   * __Read-only.__ The number of custom attributes that reference this\n   * custom attribute definition. Set by the server in response to a ListCatalog\n   * request with `include_counts` set to `true`.  If the actual count is greater\n   * than 100, `custom_attribute_usage_count` will be set to `100`.\n   */\n  customAttributeUsageCount?: number;\n  /**\n   * The name of the desired custom attribute key that can be used to access\n   * the custom attribute value on catalog objects. Cannot be modified after the\n   * custom attribute definition has been created.\n   * Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.\n   */\n  key?: string;\n}\n\nexport const catalogCustomAttributeDefinitionSchema: Schema<CatalogCustomAttributeDefinition> = object(\n  {\n    type: ['type', string()],\n    name: ['name', string()],\n    description: ['description', optional(string())],\n    sourceApplication: [\n      'source_application',\n      optional(lazy(() => sourceApplicationSchema)),\n    ],\n    allowedObjectTypes: ['allowed_object_types', array(string())],\n    sellerVisibility: ['seller_visibility', optional(string())],\n    appVisibility: ['app_visibility', optional(string())],\n    stringConfig: [\n      'string_config',\n      optional(lazy(() => catalogCustomAttributeDefinitionStringConfigSchema)),\n    ],\n    numberConfig: [\n      'number_config',\n      optional(lazy(() => catalogCustomAttributeDefinitionNumberConfigSchema)),\n    ],\n    selectionConfig: [\n      'selection_config',\n      optional(\n        lazy(() => catalogCustomAttributeDefinitionSelectionConfigSchema)\n      ),\n    ],\n    customAttributeUsageCount: [\n      'custom_attribute_usage_count',\n      optional(number()),\n    ],\n    key: ['key', optional(string())],\n  }\n);\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\n/**\n * An instance of a custom attribute. Custom attributes can be defined and\n * added to `ITEM` and `ITEM_VARIATION` type catalog objects.\n * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).\n */\nexport interface CatalogCustomAttributeValue {\n  /** The name of the custom attribute. */\n  name?: string;\n  /** The string value of the custom attribute.  Populated if `type` = `STRING`. */\n  stringValue?: string;\n  /** __Read-only.__ The id of the [CatalogCustomAttributeDefinition](#type-CatalogCustomAttributeDefinition) this value belongs to. */\n  customAttributeDefinitionId?: string;\n  /** Defines the possible types for a custom attribute. */\n  type?: string;\n  /**\n   * Populated if `type` = `NUMBER`. Contains a string\n   * representation of a decimal number, using a `.` as the decimal separator.\n   */\n  numberValue?: string;\n  /** A `true` or `false` value. Populated if `type` = `BOOLEAN`. */\n  booleanValue?: boolean;\n  /** One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`. */\n  selectionUidValues?: string[];\n  /** __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`. */\n  key?: string;\n}\n\nexport const catalogCustomAttributeValueSchema: Schema<CatalogCustomAttributeValue> = object(\n  {\n    name: ['name', optional(string())],\n    stringValue: ['string_value', optional(string())],\n    customAttributeDefinitionId: [\n      'custom_attribute_definition_id',\n      optional(string()),\n    ],\n    type: ['type', optional(string())],\n    numberValue: ['number_value', optional(string())],\n    booleanValue: ['boolean_value', optional(boolean())],\n    selectionUidValues: ['selection_uid_values', optional(array(string()))],\n    key: ['key', optional(string())],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A discount applicable to items. */\nexport interface CatalogDiscount {\n  /** The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** How to apply a CatalogDiscount to a CatalogItem. */\n  discountType?: string;\n  /**\n   * The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal\n   * separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`\n   * is `VARIABLE_PERCENTAGE`.\n   * Do not use this field for amount-based or variable discounts.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Indicates whether a mobile staff member needs to enter their PIN to apply the\n   * discount to a payment in the Square Point of Sale app.\n   */\n  pinRequired?: boolean;\n  /** The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code. */\n  labelColor?: string;\n  modifyTaxBasis?: string;\n}\n\nexport const catalogDiscountSchema: Schema<CatalogDiscount> = object({\n  name: ['name', optional(string())],\n  discountType: ['discount_type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  pinRequired: ['pin_required', optional(boolean())],\n  labelColor: ['label_color', optional(string())],\n  modifyTaxBasis: ['modify_tax_basis', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * An image file to use in Square catalogs. It can be associated with catalog\n * items, item variations, and categories.\n */\nexport interface CatalogImage {\n  /** The internal name to identify this image in calls to the Square API. */\n  name?: string;\n  /**\n   * The URL of this image, generated by Square after an image is uploaded\n   * using the [CreateCatalogImage](#endpoint-Catalog-CreateCatalogImage) endpoint.\n   */\n  url?: string;\n  /**\n   * A caption that describes what is shown in the image. Displayed in the\n   * Square Online Store. This is a searchable attribute for use in applicable query filters.\n   */\n  caption?: string;\n}\n\nexport const catalogImageSchema: Schema<CatalogImage> = object({\n  name: ['name', optional(string())],\n  url: ['url', optional(string())],\n  caption: ['caption', optional(string())],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** Options to control how to override the default behavior of the specified modifier. */\nexport interface CatalogModifierOverride {\n  /** The ID of the `CatalogModifier` whose default behavior is being overridden. */\n  modifierId: string;\n  /** If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`. */\n  onByDefault?: boolean;\n}\n\nexport const catalogModifierOverrideSchema: Schema<CatalogModifierOverride> = object(\n  {\n    modifierId: ['modifier_id', string()],\n    onByDefault: ['on_by_default', optional(boolean())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogModifierOverride,\n  catalogModifierOverrideSchema,\n} from './catalogModifierOverride';\n\n/** Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance. */\nexport interface CatalogItemModifierListInfo {\n  /** The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`. */\n  modifierListId: string;\n  /** A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default. */\n  modifierOverrides?: CatalogModifierOverride[];\n  /** If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`. */\n  minSelectedModifiers?: number;\n  /** If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`. */\n  maxSelectedModifiers?: number;\n  /** If `true`, enable this `CatalogModifierList`. The default value is `true`. */\n  enabled?: boolean;\n}\n\nexport const catalogItemModifierListInfoSchema: Schema<CatalogItemModifierListInfo> = object(\n  {\n    modifierListId: ['modifier_list_id', string()],\n    modifierOverrides: [\n      'modifier_overrides',\n      optional(array(lazy(() => catalogModifierOverrideSchema))),\n    ],\n    minSelectedModifiers: ['min_selected_modifiers', optional(number())],\n    maxSelectedModifiers: ['max_selected_modifiers', optional(number())],\n    enabled: ['enabled', optional(boolean())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * An option that can be assigned to an item.\n * For example, a t-shirt item may offer a color option or a size option.\n */\nexport interface CatalogItemOptionForItem {\n  /** The unique id of the item option, used to form the dimensions of the item option matrix in a specified order. */\n  itemOptionId?: string;\n}\n\nexport const catalogItemOptionForItemSchema: Schema<CatalogItemOptionForItem> = object(\n  { itemOptionId: ['item_option_id', optional(string())] }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogItemModifierListInfo,\n  catalogItemModifierListInfoSchema,\n} from './catalogItemModifierListInfo';\nimport {\n  CatalogItemOptionForItem,\n  catalogItemOptionForItemSchema,\n} from './catalogItemOptionForItem';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/** A [CatalogObject](#type-CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */\nexport interface CatalogItem {\n  /** The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points. */\n  name?: string;\n  /** The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  description?: string;\n  /**\n   * The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.\n   * This attribute is searchable, and its value length is of Unicode code points.\n   */\n  abbreviation?: string;\n  /** The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code. */\n  labelColor?: string;\n  /** If `true`, the item can be added to shipping orders from the merchant's online store. */\n  availableOnline?: boolean;\n  /** If `true`, the item can be added to pickup orders from the merchant's online store. */\n  availableForPickup?: boolean;\n  /** If `true`, the item can be added to electronically fulfilled orders from the merchant's online store. */\n  availableElectronically?: boolean;\n  /** The ID of the item's category, if any. */\n  categoryId?: string;\n  /**\n   * A set of IDs indicating the taxes enabled for\n   * this item. When updating an item, any taxes listed here will be added to the item.\n   * Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.\n   */\n  taxIds?: string[];\n  /**\n   * A set of `CatalogItemModifierListInfo` objects\n   * representing the modifier lists that apply to this item, along with the overrides and min\n   * and max limits that are specific to this item. Modifier lists\n   * may also be added to or deleted from an item using `UpdateItemModifierLists`.\n   */\n  modifierListInfo?: CatalogItemModifierListInfo[];\n  /** A list of CatalogObjects containing the `CatalogItemVariation`s for this item. */\n  variations?: CatalogObject[];\n  /** The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items. */\n  productType?: string;\n  /**\n   * If `false`, the Square Point of Sale app will present the `CatalogItem`'s\n   * details screen immediately, allowing the merchant to choose `CatalogModifier`s\n   * before adding the item to the cart.  This is the default behavior.\n   * If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected\n   * modifiers, and merchants can edit modifiers by drilling down onto the item's details.\n   * Third-party clients are encouraged to implement similar behaviors.\n   */\n  skipModifierScreen?: boolean;\n  /**\n   * List of item options IDs for this item. Used to manage and group item\n   * variations in a specified order.\n   * Maximum: 6 item options.\n   */\n  itemOptions?: CatalogItemOptionForItem[];\n}\n\nexport const catalogItemSchema: Schema<CatalogItem> = object({\n  name: ['name', optional(string())],\n  description: ['description', optional(string())],\n  abbreviation: ['abbreviation', optional(string())],\n  labelColor: ['label_color', optional(string())],\n  availableOnline: ['available_online', optional(boolean())],\n  availableForPickup: ['available_for_pickup', optional(boolean())],\n  availableElectronically: ['available_electronically', optional(boolean())],\n  categoryId: ['category_id', optional(string())],\n  taxIds: ['tax_ids', optional(array(string()))],\n  modifierListInfo: [\n    'modifier_list_info',\n    optional(array(lazy(() => catalogItemModifierListInfoSchema))),\n  ],\n  variations: ['variations', optional(array(lazy(() => catalogObjectSchema)))],\n  productType: ['product_type', optional(string())],\n  skipModifierScreen: ['skip_modifier_screen', optional(boolean())],\n  itemOptions: [\n    'item_options',\n    optional(array(lazy(() => catalogItemOptionForItemSchema))),\n  ],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/** A group of variations for a `CatalogItem`. */\nexport interface CatalogItemOption {\n  /**\n   * The item option's display name for the seller. Must be unique across\n   * all item options. This is a searchable attribute for use in applicable query filters.\n   */\n  name?: string;\n  /** The item option's display name for the customer. This is a searchable attribute for use in applicable query filters. */\n  displayName?: string;\n  /**\n   * The item option's human-readable description. Displayed in the Square\n   * Point of Sale app for the seller and in the Online Store or on receipts for\n   * the buyer. This is a searchable attribute for use in applicable query filters.\n   */\n  description?: string;\n  /** If true, display colors for entries in `values` when present. */\n  showColors?: boolean;\n  /**\n   * A list of CatalogObjects containing the\n   * `CatalogItemOptionValue`s for this item.\n   */\n  values?: CatalogObject[];\n}\n\nexport const catalogItemOptionSchema: Schema<CatalogItemOption> = object({\n  name: ['name', optional(string())],\n  displayName: ['display_name', optional(string())],\n  description: ['description', optional(string())],\n  showColors: ['show_colors', optional(boolean())],\n  values: ['values', optional(array(lazy(() => catalogObjectSchema)))],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * An enumerated value that can link a\n * `CatalogItemVariation` to an item option as one of\n * its item option values.\n */\nexport interface CatalogItemOptionValue {\n  /** Unique ID of the associated item option. */\n  itemOptionId?: string;\n  /** Name of this item option value. This is a searchable attribute for use in applicable query filters. */\n  name?: string;\n  /** A human-readable description for the option value. This is a searchable attribute for use in applicable query filters. */\n  description?: string;\n  /**\n   * The HTML-supported hex color for the item option (e.g., \"#ff8d4e85\").\n   * Only displayed if `show_colors` is enabled on the parent `ItemOption`. When\n   * left unset, `color` defaults to white (\"#ffffff\") when `show_colors` is\n   * enabled on the parent `ItemOption`.\n   */\n  color?: string;\n  /** Determines where this option value appears in a list of option values. */\n  ordinal?: number;\n}\n\nexport const catalogItemOptionValueSchema: Schema<CatalogItemOptionValue> = object(\n  {\n    itemOptionId: ['item_option_id', optional(string())],\n    name: ['name', optional(string())],\n    description: ['description', optional(string())],\n    color: ['color', optional(string())],\n    ordinal: ['ordinal', optional(number())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A `CatalogItemOptionValue` links an item variation to an item option as\n * an item option value. For example, a t-shirt item may offer a color option and\n * a size option. An item option value would represent each variation of t-shirt:\n * For example, \"Color:Red, Size:Small\" or \"Color:Blue, Size:Medium\".\n */\nexport interface CatalogItemOptionValueForItemVariation {\n  /** The unique id of an item option. */\n  itemOptionId?: string;\n  /** The unique id of the selected value for the item option. */\n  itemOptionValueId?: string;\n}\n\nexport const catalogItemOptionValueForItemVariationSchema: Schema<CatalogItemOptionValueForItemVariation> = object(\n  {\n    itemOptionId: ['item_option_id', optional(string())],\n    itemOptionValueId: ['item_option_value_id', optional(string())],\n  }\n);\n","import {\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`. */\nexport interface ItemVariationLocationOverrides {\n  /** The ID of the `Location`. */\n  locationId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceMoney?: Money;\n  /** Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale. */\n  pricingType?: string;\n  /** If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`. */\n  trackInventory?: boolean;\n  /** Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low. */\n  inventoryAlertType?: string;\n  /**\n   * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`\n   * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.\n   * This value is always an integer.\n   */\n  inventoryAlertThreshold?: number;\n}\n\nexport const itemVariationLocationOverridesSchema: Schema<ItemVariationLocationOverrides> = object(\n  {\n    locationId: ['location_id', optional(string())],\n    priceMoney: ['price_money', optional(lazy(() => moneySchema))],\n    pricingType: ['pricing_type', optional(string())],\n    trackInventory: ['track_inventory', optional(boolean())],\n    inventoryAlertType: ['inventory_alert_type', optional(string())],\n    inventoryAlertThreshold: ['inventory_alert_threshold', optional(number())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogItemOptionValueForItemVariation,\n  catalogItemOptionValueForItemVariationSchema,\n} from './catalogItemOptionValueForItemVariation';\nimport {\n  ItemVariationLocationOverrides,\n  itemVariationLocationOverridesSchema,\n} from './itemVariationLocationOverrides';\nimport { Money, moneySchema } from './money';\n\n/**\n * An item variation (i.e., product) in the Catalog object model. Each item\n * may have a maximum of 250 item variations.\n */\nexport interface CatalogItemVariation {\n  /** The ID of the `CatalogItem` associated with this item variation. */\n  itemId?: string;\n  /** The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters. */\n  sku?: string;\n  /**\n   * The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.\n   * The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,\n   * Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned\n   * to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps\n   * unless it is updated to fit the expected format.\n   */\n  upc?: string;\n  /**\n   * The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal\n   * for each item variation within a parent `CatalogItem` is set according to the item variations's\n   * position. On reads, the value is not guaranteed to be sequential or unique.\n   */\n  ordinal?: number;\n  /** Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale. */\n  pricingType?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceMoney?: Money;\n  /** Per-location price and inventory overrides. */\n  locationOverrides?: ItemVariationLocationOverrides[];\n  /** If `true`, inventory tracking is active for the variation. */\n  trackInventory?: boolean;\n  /** Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low. */\n  inventoryAlertType?: string;\n  /**\n   * If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`\n   * is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.\n   * This value is always an integer.\n   */\n  inventoryAlertThreshold?: number;\n  /** Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points. */\n  userData?: string;\n  /**\n   * If the `CatalogItem` that owns this item variation is of type\n   * `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For\n   * example, a 30 minute appointment would have the value `1800000`, which is equal to\n   * 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).\n   */\n  serviceDuration?: number;\n  /**\n   * If the `CatalogItem` that owns this item variation is of type\n   * `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.\n   */\n  availableForBooking?: boolean;\n  /**\n   * List of item option values associated with this item variation. Listed\n   * in the same order as the item options of the parent item.\n   */\n  itemOptionValues?: CatalogItemOptionValueForItemVariation[];\n  /**\n   * ID of the ‘CatalogMeasurementUnit’ that is used to measure the quantity\n   * sold of this item variation. If left unset, the item will be sold in\n   * whole quantities.\n   */\n  measurementUnitId?: string;\n  /**\n   * Tokens of employees that can perform the service represented by this variation. Only valid for\n   * variations of type `APPOINTMENTS_SERVICE`.\n   */\n  teamMemberIds?: string[];\n}\n\nexport const catalogItemVariationSchema: Schema<CatalogItemVariation> = object({\n  itemId: ['item_id', optional(string())],\n  name: ['name', optional(string())],\n  sku: ['sku', optional(string())],\n  upc: ['upc', optional(string())],\n  ordinal: ['ordinal', optional(number())],\n  pricingType: ['pricing_type', optional(string())],\n  priceMoney: ['price_money', optional(lazy(() => moneySchema))],\n  locationOverrides: [\n    'location_overrides',\n    optional(array(lazy(() => itemVariationLocationOverridesSchema))),\n  ],\n  trackInventory: ['track_inventory', optional(boolean())],\n  inventoryAlertType: ['inventory_alert_type', optional(string())],\n  inventoryAlertThreshold: ['inventory_alert_threshold', optional(number())],\n  userData: ['user_data', optional(string())],\n  serviceDuration: ['service_duration', optional(number())],\n  availableForBooking: ['available_for_booking', optional(boolean())],\n  itemOptionValues: [\n    'item_option_values',\n    optional(array(lazy(() => catalogItemOptionValueForItemVariationSchema))),\n  ],\n  measurementUnitId: ['measurement_unit_id', optional(string())],\n  teamMemberIds: ['team_member_ids', optional(array(string()))],\n});\n","import { object, Schema, string } from '../schema';\n\n/** The information needed to define a custom unit, provided by the seller. */\nexport interface MeasurementUnitCustom {\n  /** The name of the custom unit, for example \"bushel\". */\n  name: string;\n  /**\n   * The abbreviation of the custom unit, such as \"bsh\" (bushel). This appears\n   * in the cart for the Point of Sale app, and in reports.\n   */\n  abbreviation: string;\n}\n\nexport const measurementUnitCustomSchema: Schema<MeasurementUnitCustom> = object(\n  { name: ['name', string()], abbreviation: ['abbreviation', string()] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  MeasurementUnitCustom,\n  measurementUnitCustomSchema,\n} from './measurementUnitCustom';\n\n/**\n * Represents a unit of measurement to use with a quantity, such as ounces\n * or inches. Exactly one of the following fields are required: `custom_unit`,\n * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n */\nexport interface MeasurementUnit {\n  /** The information needed to define a custom unit, provided by the seller. */\n  customUnit?: MeasurementUnitCustom;\n  /** Unit of area used to measure a quantity. */\n  areaUnit?: string;\n  /** The unit of length used to measure a quantity. */\n  lengthUnit?: string;\n  /** The unit of volume used to measure a quantity. */\n  volumeUnit?: string;\n  /** Unit of weight used to measure a quantity. */\n  weightUnit?: string;\n  genericUnit?: string;\n  /** Unit of time used to measure a quantity (a duration). */\n  timeUnit?: string;\n  /** Describes the type of this unit and indicates which field contains the unit information. This is an ‘open’ enum. */\n  type?: string;\n}\n\nexport const measurementUnitSchema: Schema<MeasurementUnit> = object({\n  customUnit: [\n    'custom_unit',\n    optional(lazy(() => measurementUnitCustomSchema)),\n  ],\n  areaUnit: ['area_unit', optional(string())],\n  lengthUnit: ['length_unit', optional(string())],\n  volumeUnit: ['volume_unit', optional(string())],\n  weightUnit: ['weight_unit', optional(string())],\n  genericUnit: ['generic_unit', optional(string())],\n  timeUnit: ['time_unit', optional(string())],\n  type: ['type', optional(string())],\n});\n","import { lazy, number, object, optional, Schema } from '../schema';\nimport { MeasurementUnit, measurementUnitSchema } from './measurementUnit';\n\n/**\n * Represents the unit used to measure a `CatalogItemVariation` and\n * specifies the precision for decimal quantities.\n */\nexport interface CatalogMeasurementUnit {\n  /**\n   * Represents a unit of measurement to use with a quantity, such as ounces\n   * or inches. Exactly one of the following fields are required: `custom_unit`,\n   * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n   */\n  measurementUnit?: MeasurementUnit;\n  /**\n   * An integer between 0 and 5 that represents the maximum number of\n   * positions allowed after the decimal in quantities measured with this unit.\n   * For example:\n   * - if the precision is 0, the quantity can be 1, 2, 3, etc.\n   * - if the precision is 1, the quantity can be 0.1, 0.2, etc.\n   * - if the precision is 2, the quantity can be 0.01, 0.12, etc.\n   * Default: 3\n   */\n  precision?: number;\n}\n\nexport const catalogMeasurementUnitSchema: Schema<CatalogMeasurementUnit> = object(\n  {\n    measurementUnit: [\n      'measurement_unit',\n      optional(lazy(() => measurementUnitSchema)),\n    ],\n    precision: ['precision', optional(number())],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A modifier applicable to items at the time of sale. */\nexport interface CatalogModifier {\n  /** The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceMoney?: Money;\n  /** Determines where this `CatalogModifier` appears in the `CatalogModifierList`. */\n  ordinal?: number;\n  /** The ID of the `CatalogModifierList` associated with this modifier. */\n  modifierListId?: string;\n}\n\nexport const catalogModifierSchema: Schema<CatalogModifier> = object({\n  name: ['name', optional(string())],\n  priceMoney: ['price_money', optional(lazy(() => moneySchema))],\n  ordinal: ['ordinal', optional(number())],\n  modifierListId: ['modifier_list_id', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/**\n * A list of modifiers applicable to items at the time of sale.\n * For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item\n * may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers.\n * Use the `selection_type` field to specify whether or not multiple selections from\n * the modifier list are allowed.\n */\nexport interface CatalogModifierList {\n  /** The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** Determines where this modifier list appears in a list of `CatalogModifierList` values. */\n  ordinal?: number;\n  /** Indicates whether a CatalogModifierList supports multiple selections. */\n  selectionType?: string;\n  /**\n   * The options included in the `CatalogModifierList`.\n   * You must include at least one `CatalogModifier`.\n   * Each CatalogObject must have type `MODIFIER` and contain\n   * `CatalogModifier` data.\n   */\n  modifiers?: CatalogObject[];\n}\n\nexport const catalogModifierListSchema: Schema<CatalogModifierList> = object({\n  name: ['name', optional(string())],\n  ordinal: ['ordinal', optional(number())],\n  selectionType: ['selection_type', optional(string())],\n  modifiers: ['modifiers', optional(array(lazy(() => catalogObjectSchema)))],\n});\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines how discounts are automatically applied to a set of items that match the pricing rule\n * during the active time period.\n */\nexport interface CatalogPricingRule {\n  /**\n   * User-defined name for the pricing rule. For example, \"Buy one get one\n   * free\" or \"10% off\".\n   */\n  name?: string;\n  /**\n   * A list of unique IDs for the catalog time periods when\n   * this pricing rule is in effect. If left unset, the pricing rule is always\n   * in effect.\n   */\n  timePeriodIds?: string[];\n  /**\n   * Unique ID for the `CatalogDiscount` to take off\n   * the price of all matched items.\n   */\n  discountId?: string;\n  /**\n   * Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule\n   * matches within the entire cart, and can match multiple times. This field will always be set.\n   */\n  matchProductsId?: string;\n  /**\n   * __Deprecated__: Please use the `exclude_products_id` field to apply\n   * an exclude set instead. Exclude sets allow better control over quantity\n   * ranges and offer more flexibility for which matched items receive a discount.\n   * `CatalogProductSet` to apply the pricing to.\n   * An apply rule matches within the subset of the cart that fits the match rules (the match set).\n   * An apply rule can only match once in the match set.\n   * If not supplied, the pricing will be applied to all products in the match set.\n   * Other products retain their base price, or a price generated by other rules.\n   */\n  applyProductsId?: string;\n  /**\n   * `CatalogProductSet` to exclude from the pricing rule.\n   * An exclude rule matches within the subset of the cart that fits the match rules (the match set).\n   * An exclude rule can only match once in the match set.\n   * If not supplied, the pricing will be applied to all products in the match set.\n   * Other products retain their base price, or a price generated by other rules.\n   */\n  excludeProductsId?: string;\n  /** Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD). */\n  validFromDate?: string;\n  /**\n   * Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format\n   * (HH:MM:SS). Partial seconds will be truncated.\n   */\n  validFromLocalTime?: string;\n  /** Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD). */\n  validUntilDate?: string;\n  /**\n   * Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format\n   * (HH:MM:SS). Partial seconds will be truncated.\n   */\n  validUntilLocalTime?: string;\n  /**\n   * Indicates which products matched by a CatalogPricingRule\n   * will be excluded if the pricing rule uses an exclude set.\n   */\n  excludeStrategy?: string;\n}\n\nexport const catalogPricingRuleSchema: Schema<CatalogPricingRule> = object({\n  name: ['name', optional(string())],\n  timePeriodIds: ['time_period_ids', optional(array(string()))],\n  discountId: ['discount_id', optional(string())],\n  matchProductsId: ['match_products_id', optional(string())],\n  applyProductsId: ['apply_products_id', optional(string())],\n  excludeProductsId: ['exclude_products_id', optional(string())],\n  validFromDate: ['valid_from_date', optional(string())],\n  validFromLocalTime: ['valid_from_local_time', optional(string())],\n  validUntilDate: ['valid_until_date', optional(string())],\n  validUntilLocalTime: ['valid_until_local_time', optional(string())],\n  excludeStrategy: ['exclude_strategy', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\n\n/**\n * Represents a collection of catalog objects for the purpose of applying a\n * `PricingRule`. Including a catalog object will include all of its subtypes.\n * For example, including a category in a product set will include all of its\n * items and associated item variations in the product set. Including an item in\n * a product set will also include its item variations.\n */\nexport interface CatalogProductSet {\n  /**\n   * User-defined name for the product set. For example, \"Clearance Items\"\n   * or \"Winter Sale Items\".\n   */\n  name?: string;\n  /**\n   * Unique IDs for any `CatalogObject` included in this product set. Any\n   * number of these catalog objects can be in an order for a pricing rule to apply.\n   * This can be used with `product_ids_all` in a parent `CatalogProductSet` to\n   * match groups of products for a bulk discount, such as a discount for an\n   * entree and side combo.\n   * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.\n   * Max: 500 catalog object IDs.\n   */\n  productIdsAny?: string[];\n  /**\n   * Unique IDs for any `CatalogObject` included in this product set.\n   * All objects in this set must be included in an order for a pricing rule to apply.\n   * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.\n   * Max: 500 catalog object IDs.\n   */\n  productIdsAll?: string[];\n  /**\n   * If set, there must be exactly this many items from `products_any` or `products_all`\n   * in the cart for the discount to apply.\n   * Cannot be combined with either `quantity_min` or `quantity_max`.\n   */\n  quantityExact?: number;\n  /**\n   * If set, there must be at least this many items from `products_any` or `products_all`\n   * in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if\n   * `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.\n   */\n  quantityMin?: number;\n  /**\n   * If set, the pricing rule will apply to a maximum of this many items from\n   * `products_any` or `products_all`.\n   */\n  quantityMax?: number;\n  /**\n   * If set to `true`, the product set will include every item in the catalog.\n   * Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.\n   */\n  allProducts?: boolean;\n}\n\nexport const catalogProductSetSchema: Schema<CatalogProductSet> = object({\n  name: ['name', optional(string())],\n  productIdsAny: ['product_ids_any', optional(array(string()))],\n  productIdsAll: ['product_ids_all', optional(array(string()))],\n  quantityExact: ['quantity_exact', optional(number())],\n  quantityMin: ['quantity_min', optional(number())],\n  quantityMax: ['quantity_max', optional(number())],\n  allProducts: ['all_products', optional(boolean())],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents a Quick Amount in the Catalog. */\nexport interface CatalogQuickAmount {\n  /** Determines the type of a specific Quick Amount. */\n  type: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amount: Money;\n  /**\n   * Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].\n   * MANUAL type amount will always have score = 100.\n   */\n  score?: number;\n  /** The order in which this Quick Amount should be displayed. */\n  ordinal?: number;\n}\n\nexport const catalogQuickAmountSchema: Schema<CatalogQuickAmount> = object({\n  type: ['type', string()],\n  amount: ['amount', lazy(() => moneySchema)],\n  score: ['score', optional(number())],\n  ordinal: ['ordinal', optional(number())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CatalogQuickAmount,\n  catalogQuickAmountSchema,\n} from './catalogQuickAmount';\n\n/** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */\nexport interface CatalogQuickAmountsSettings {\n  /** Determines a seller's option on Quick Amounts feature. */\n  option: string;\n  /**\n   * Represents location's eligibility for auto amounts\n   * The boolean should be consistent with whether there are AUTO amounts in the `amounts`.\n   */\n  eligibleForAutoAmounts?: boolean;\n  /** Represents a set of Quick Amounts at this location. */\n  amounts?: CatalogQuickAmount[];\n}\n\nexport const catalogQuickAmountsSettingsSchema: Schema<CatalogQuickAmountsSettings> = object(\n  {\n    option: ['option', string()],\n    eligibleForAutoAmounts: ['eligible_for_auto_amounts', optional(boolean())],\n    amounts: ['amounts', optional(array(lazy(() => catalogQuickAmountSchema)))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Describes a phase in a subscription plan. For more information, see\n * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).\n */\nexport interface SubscriptionPhase {\n  /** The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created. */\n  uid?: string;\n  /** Determines the billing cadence of a [Subscription](#type-Subscription) */\n  cadence: string;\n  /** The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created. */\n  periods?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  recurringPriceMoney: Money;\n  /** The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created. */\n  ordinal?: number;\n}\n\nexport const subscriptionPhaseSchema: Schema<SubscriptionPhase> = object({\n  uid: ['uid', optional(string())],\n  cadence: ['cadence', string()],\n  periods: ['periods', optional(number())],\n  recurringPriceMoney: ['recurring_price_money', lazy(() => moneySchema)],\n  ordinal: ['ordinal', optional(number())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SubscriptionPhase,\n  subscriptionPhaseSchema,\n} from './subscriptionPhase';\n\n/**\n * Describes a subscription plan. For more information, see\n * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).\n */\nexport interface CatalogSubscriptionPlan {\n  /** The name of the plan. */\n  name?: string;\n  /** A list of SubscriptionPhase containing the [SubscriptionPhase](#type-SubscriptionPhase) for this plan. */\n  phases?: SubscriptionPhase[];\n}\n\nexport const catalogSubscriptionPlanSchema: Schema<CatalogSubscriptionPlan> = object(\n  {\n    name: ['name', optional(string())],\n    phases: ['phases', optional(array(lazy(() => subscriptionPhaseSchema)))],\n  }\n);\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** A tax applicable to an item. */\nexport interface CatalogTax {\n  /** The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points. */\n  name?: string;\n  /** When to calculate the taxes due on a cart. */\n  calculationPhase?: string;\n  /** Whether to the tax amount should be additional to or included in the CatalogItem price. */\n  inclusionType?: string;\n  /**\n   * The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.\n   * A value of `7.5` corresponds to 7.5%.\n   */\n  percentage?: string;\n  /**\n   * If `true`, the fee applies to custom amounts entered into the Square Point of Sale\n   * app that are not associated with a particular `CatalogItem`.\n   */\n  appliesToCustomAmounts?: boolean;\n  /** A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`). */\n  enabled?: boolean;\n}\n\nexport const catalogTaxSchema: Schema<CatalogTax> = object({\n  name: ['name', optional(string())],\n  calculationPhase: ['calculation_phase', optional(string())],\n  inclusionType: ['inclusion_type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  appliesToCustomAmounts: ['applies_to_custom_amounts', optional(boolean())],\n  enabled: ['enabled', optional(boolean())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a time period - either a single period or a repeating period. */\nexport interface CatalogTimePeriod {\n  /**\n   * An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which\n   * specifies the name, timing, duration and recurrence of this time period.\n   * Example:\n   * ```\n   * DTSTART:20190707T180000\n   * DURATION:P2H\n   * RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR\n   * ```\n   * Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported.\n   * `DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT`\n   * and `END:VEVENT` is not required in the request. The response will always\n   * include them.\n   */\n  event?: string;\n}\n\nexport const catalogTimePeriodSchema: Schema<CatalogTimePeriod> = object({\n  event: ['event', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** A Square API V1 identifier of an item, including the object ID and its associated location ID. */\nexport interface CatalogV1Id {\n  /** The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID. */\n  catalogV1Id?: string;\n  /** The ID of the `Location` this Connect V1 ID is associated with. */\n  locationId?: string;\n}\n\nexport const catalogV1IdSchema: Schema<CatalogV1Id> = object({\n  catalogV1Id: ['catalog_v1_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  dict,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogCategory, catalogCategorySchema } from './catalogCategory';\nimport {\n  CatalogCustomAttributeDefinition,\n  catalogCustomAttributeDefinitionSchema,\n} from './catalogCustomAttributeDefinition';\nimport {\n  CatalogCustomAttributeValue,\n  catalogCustomAttributeValueSchema,\n} from './catalogCustomAttributeValue';\nimport { CatalogDiscount, catalogDiscountSchema } from './catalogDiscount';\nimport { CatalogImage, catalogImageSchema } from './catalogImage';\nimport { CatalogItem, catalogItemSchema } from './catalogItem';\nimport {\n  CatalogItemOption,\n  catalogItemOptionSchema,\n} from './catalogItemOption';\nimport {\n  CatalogItemOptionValue,\n  catalogItemOptionValueSchema,\n} from './catalogItemOptionValue';\nimport {\n  CatalogItemVariation,\n  catalogItemVariationSchema,\n} from './catalogItemVariation';\nimport {\n  CatalogMeasurementUnit,\n  catalogMeasurementUnitSchema,\n} from './catalogMeasurementUnit';\nimport { CatalogModifier, catalogModifierSchema } from './catalogModifier';\nimport {\n  CatalogModifierList,\n  catalogModifierListSchema,\n} from './catalogModifierList';\nimport {\n  CatalogPricingRule,\n  catalogPricingRuleSchema,\n} from './catalogPricingRule';\nimport {\n  CatalogProductSet,\n  catalogProductSetSchema,\n} from './catalogProductSet';\nimport {\n  CatalogQuickAmountsSettings,\n  catalogQuickAmountsSettingsSchema,\n} from './catalogQuickAmountsSettings';\nimport {\n  CatalogSubscriptionPlan,\n  catalogSubscriptionPlanSchema,\n} from './catalogSubscriptionPlan';\nimport { CatalogTax, catalogTaxSchema } from './catalogTax';\nimport {\n  CatalogTimePeriod,\n  catalogTimePeriodSchema,\n} from './catalogTimePeriod';\nimport { CatalogV1Id, catalogV1IdSchema } from './catalogV1Id';\n\n/**\n * The wrapper object for the Catalog entries of a given object type.\n * The type of a particular `CatalogObject` is determined by the value of the\n * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.\n * For example, the following list shows some instances of `CatalogObject` of a given `type` and\n * their corresponding data atrribute that can be set:\n * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.\n * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.\n * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.\n * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.\n * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.\n * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.\n * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.\n * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.\n * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.\n * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.\n * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.\n * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.\n * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.\n * For a more detailed discussion of the Catalog data model, please see the\n * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n */\nexport interface CatalogObject {\n  /**\n   * Possible types of CatalogObjects returned from the Catalog, each\n   * containing type-specific properties in the `*_data` field corresponding to the object type.\n   */\n  type: string;\n  /**\n   * An identifier to reference this object in the catalog. When a new `CatalogObject`\n   * is inserted, the client should set the id to a temporary identifier starting with\n   * a \"`#`\" character. Other objects being inserted or updated within the same request\n   * may use this identifier to refer to the new object.\n   * When the server receives the new object, it will supply a unique identifier that\n   * replaces the temporary identifier for all future references.\n   */\n  id: string;\n  /**\n   * Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"`\n   * would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.\n   */\n  updatedAt?: string;\n  /**\n   * The version of the object. When updating an object, the version supplied\n   * must match the version in the database, otherwise the write will be rejected as conflicting.\n   */\n  version?: number;\n  /**\n   * If `true`, the object has been deleted from the database. Must be `false` for new objects\n   * being inserted. When deleted, the `updated_at` field will equal the deletion time.\n   */\n  isDeleted?: boolean;\n  /**\n   * A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair\n   * is a [CatalogCustomAttributeValue](#type-CatalogCustomAttributeValue) object. The key is the `key` attribute\n   * value defined in the associated [CatalogCustomAttributeDefinition](#type-CatalogCustomAttributeDefinition)\n   * object defined by the application making the request.\n   * If the `CatalogCustomAttributeDefinition` object is\n   * defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by\n   * the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of\n   * `\"cocoa_brand\"` and the defining application ID is `\"abcd1234\"`, the key in the map is `\"abcd1234:cocoa_brand\"`\n   * if the application making the request is different from the application defining the custom attribute definition.\n   * Otherwise, the key used in the map is simply `\"cocoa_brand\"`.\n   * Application-defined custom attributes that are set at a global (location-independent) level.\n   * Custom attribute values are intended to store additional information about a catalog object\n   * or associations with an entity in another system. Do not use custom attributes\n   * to store any sensitive information (personally identifiable information, card details, etc.).\n   */\n  customAttributeValues?: Record<string, CatalogCustomAttributeValue>;\n  /**\n   * The Connect v1 IDs for this object at each location where it is present, where they\n   * differ from the object's Connect V2 ID. The field will only be present for objects that\n   * have been created or modified by legacy APIs.\n   */\n  catalogV1Ids?: CatalogV1Id[];\n  /**\n   * If `true`, this object is present at all locations (including future locations), except where specified in\n   * the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),\n   * except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.\n   */\n  presentAtAllLocations?: boolean;\n  /** A list of locations where the object is present, even if `present_at_all_locations` is `false`. */\n  presentAtLocationIds?: string[];\n  /** A list of locations where the object is not present, even if `present_at_all_locations` is `true`. */\n  absentAtLocationIds?: string[];\n  /** Identifies the `CatalogImage` attached to this `CatalogObject`. */\n  imageId?: string;\n  /** A [CatalogObject](#type-CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog. */\n  itemData?: CatalogItem;\n  /** A category to which a `CatalogItem` instance belongs. */\n  categoryData?: CatalogCategory;\n  /**\n   * An item variation (i.e., product) in the Catalog object model. Each item\n   * may have a maximum of 250 item variations.\n   */\n  itemVariationData?: CatalogItemVariation;\n  /** A tax applicable to an item. */\n  taxData?: CatalogTax;\n  /** A discount applicable to items. */\n  discountData?: CatalogDiscount;\n  /**\n   * A list of modifiers applicable to items at the time of sale.\n   * For example, a \"Condiments\" modifier list applicable to a \"Hot Dog\" item\n   * may contain \"Ketchup\", \"Mustard\", and \"Relish\" modifiers.\n   * Use the `selection_type` field to specify whether or not multiple selections from\n   * the modifier list are allowed.\n   */\n  modifierListData?: CatalogModifierList;\n  /** A modifier applicable to items at the time of sale. */\n  modifierData?: CatalogModifier;\n  /** Represents a time period - either a single period or a repeating period. */\n  timePeriodData?: CatalogTimePeriod;\n  /**\n   * Represents a collection of catalog objects for the purpose of applying a\n   * `PricingRule`. Including a catalog object will include all of its subtypes.\n   * For example, including a category in a product set will include all of its\n   * items and associated item variations in the product set. Including an item in\n   * a product set will also include its item variations.\n   */\n  productSetData?: CatalogProductSet;\n  /**\n   * Defines how discounts are automatically applied to a set of items that match the pricing rule\n   * during the active time period.\n   */\n  pricingRuleData?: CatalogPricingRule;\n  /**\n   * An image file to use in Square catalogs. It can be associated with catalog\n   * items, item variations, and categories.\n   */\n  imageData?: CatalogImage;\n  /**\n   * Represents the unit used to measure a `CatalogItemVariation` and\n   * specifies the precision for decimal quantities.\n   */\n  measurementUnitData?: CatalogMeasurementUnit;\n  /**\n   * Describes a subscription plan. For more information, see\n   * [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).\n   */\n  subscriptionPlanData?: CatalogSubscriptionPlan;\n  /** A group of variations for a `CatalogItem`. */\n  itemOptionData?: CatalogItemOption;\n  /**\n   * An enumerated value that can link a\n   * `CatalogItemVariation` to an item option as one of\n   * its item option values.\n   */\n  itemOptionValueData?: CatalogItemOptionValue;\n  /**\n   * Contains information defining a custom attribute. Custom attributes are\n   * intended to store additional information about a catalog object or to associate a\n   * catalog object with an entity in another system. Do not use custom attributes\n   * to store any sensitive information (personally identifiable information, card details, etc.).\n   * [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)\n   */\n  customAttributeDefinitionData?: CatalogCustomAttributeDefinition;\n  /** A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts. */\n  quickAmountsSettingsData?: CatalogQuickAmountsSettings;\n}\n\nexport const catalogObjectSchema: Schema<CatalogObject> = object({\n  type: ['type', string()],\n  id: ['id', string()],\n  updatedAt: ['updated_at', optional(string())],\n  version: ['version', optional(number())],\n  isDeleted: ['is_deleted', optional(boolean())],\n  customAttributeValues: [\n    'custom_attribute_values',\n    optional(dict(lazy(() => catalogCustomAttributeValueSchema))),\n  ],\n  catalogV1Ids: [\n    'catalog_v1_ids',\n    optional(array(lazy(() => catalogV1IdSchema))),\n  ],\n  presentAtAllLocations: ['present_at_all_locations', optional(boolean())],\n  presentAtLocationIds: ['present_at_location_ids', optional(array(string()))],\n  absentAtLocationIds: ['absent_at_location_ids', optional(array(string()))],\n  imageId: ['image_id', optional(string())],\n  itemData: ['item_data', optional(lazy(() => catalogItemSchema))],\n  categoryData: ['category_data', optional(lazy(() => catalogCategorySchema))],\n  itemVariationData: [\n    'item_variation_data',\n    optional(lazy(() => catalogItemVariationSchema)),\n  ],\n  taxData: ['tax_data', optional(lazy(() => catalogTaxSchema))],\n  discountData: ['discount_data', optional(lazy(() => catalogDiscountSchema))],\n  modifierListData: [\n    'modifier_list_data',\n    optional(lazy(() => catalogModifierListSchema)),\n  ],\n  modifierData: ['modifier_data', optional(lazy(() => catalogModifierSchema))],\n  timePeriodData: [\n    'time_period_data',\n    optional(lazy(() => catalogTimePeriodSchema)),\n  ],\n  productSetData: [\n    'product_set_data',\n    optional(lazy(() => catalogProductSetSchema)),\n  ],\n  pricingRuleData: [\n    'pricing_rule_data',\n    optional(lazy(() => catalogPricingRuleSchema)),\n  ],\n  imageData: ['image_data', optional(lazy(() => catalogImageSchema))],\n  measurementUnitData: [\n    'measurement_unit_data',\n    optional(lazy(() => catalogMeasurementUnitSchema)),\n  ],\n  subscriptionPlanData: [\n    'subscription_plan_data',\n    optional(lazy(() => catalogSubscriptionPlanSchema)),\n  ],\n  itemOptionData: [\n    'item_option_data',\n    optional(lazy(() => catalogItemOptionSchema)),\n  ],\n  itemOptionValueData: [\n    'item_option_value_data',\n    optional(lazy(() => catalogItemOptionValueSchema)),\n  ],\n  customAttributeDefinitionData: [\n    'custom_attribute_definition_data',\n    optional(lazy(() => catalogCustomAttributeDefinitionSchema)),\n  ],\n  quickAmountsSettingsData: [\n    'quick_amounts_settings_data',\n    optional(lazy(() => catalogQuickAmountsSettingsSchema)),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface BatchRetrieveCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** A list of [CatalogObject](#type-catalogobject)s returned. */\n  objects?: CatalogObject[];\n  /** A list of [CatalogObject](#type-catalogobject)s referenced by the object in the `objects` field. */\n  relatedObjects?: CatalogObject[];\n}\n\nexport const batchRetrieveCatalogObjectsResponseSchema: Schema<BatchRetrieveCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n    relatedObjects: [\n      'related_objects',\n      optional(array(lazy(() => catalogObjectSchema))),\n    ],\n  }\n);\n","import { array, lazy, object, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\n/** A batch of catalog objects. */\nexport interface CatalogObjectBatch {\n  /** A list of CatalogObjects belonging to this batch. */\n  objects: CatalogObject[];\n}\n\nexport const catalogObjectBatchSchema: Schema<CatalogObjectBatch> = object({\n  objects: ['objects', array(lazy(() => catalogObjectSchema))],\n});\n","import { array, lazy, object, Schema, string } from '../schema';\nimport {\n  CatalogObjectBatch,\n  catalogObjectBatchSchema,\n} from './catalogObjectBatch';\n\nexport interface BatchUpsertCatalogObjectsRequest {\n  /**\n   * A value you specify that uniquely identifies this\n   * request among all your requests. A common way to create\n   * a valid idempotency key is to use a Universally unique\n   * identifier (UUID).\n   * If you're unsure whether a particular request was successful,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate objects.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * A batch of CatalogObjects to be inserted/updated atomically.\n   * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs\n   * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error\n   * in one batch will not affect other batches within the same request.\n   * For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its\n   * `is_deleted` field must not be set to `true`.\n   * To modify an existing object, supply its ID. To create a new object, use an ID starting\n   * with `#`. These IDs may be used to create relationships between an object and attributes of\n   * other objects that reference it. For example, you can create a CatalogItem with\n   * ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to\n   * `#ABC` in order to associate the CatalogItemVariation with its parent\n   * CatalogItem.\n   * Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.\n   * Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request\n   * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will\n   * be inserted or updated.\n   */\n  batches: CatalogObjectBatch[];\n}\n\nexport const batchUpsertCatalogObjectsRequestSchema: Schema<BatchUpsertCatalogObjectsRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    batches: ['batches', array(lazy(() => catalogObjectBatchSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A mapping between a temporary client-supplied ID and a permanent server-generated ID.\n * When calling [UpsertCatalogObject](#endpoint-Catalog-UpsertCatalogObject) or\n * [BatchUpsertCatalogObjects](#endpoint-Catalog-BatchUpsertCatalogObjects) to\n * create a [CatalogObject](#type-CatalogObject) instance, you can supply\n * a temporary ID for the to-be-created object, especially when the object is to be referenced\n * elsewhere in the same request body. This temporary ID can be any string unique within\n * the call, but must be prefixed by \"#\".\n * After the request is submitted and the object created, a permanent server-generated ID is assigned\n * to the new object. The permanent ID is unique across the Square catalog.\n */\nexport interface CatalogIdMapping {\n  /** The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`. */\n  clientObjectId?: string;\n  /** The permanent ID for the CatalogObject created by the server. */\n  objectId?: string;\n}\n\nexport const catalogIdMappingSchema: Schema<CatalogIdMapping> = object({\n  clientObjectId: ['client_object_id', optional(string())],\n  objectId: ['object_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogIdMapping, catalogIdMappingSchema } from './catalogIdMapping';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface BatchUpsertCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The created successfully created CatalogObjects. */\n  objects?: CatalogObject[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  updatedAt?: string;\n  /** The mapping between client and server IDs for this upsert. */\n  idMappings?: CatalogIdMapping[];\n}\n\nexport const batchUpsertCatalogObjectsResponseSchema: Schema<BatchUpsertCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n    updatedAt: ['updated_at', optional(string())],\n    idMappings: [\n      'id_mappings',\n      optional(array(lazy(() => catalogIdMappingSchema))),\n    ],\n  }\n);\n","import { number, object, optional, Schema } from '../schema';\n\nexport interface CatalogInfoResponseLimits {\n  /**\n   * The maximum number of objects that may appear within a single batch in a\n   * `/v2/catalog/batch-upsert` request.\n   */\n  batchUpsertMaxObjectsPerBatch?: number;\n  /**\n   * The maximum number of objects that may appear across all batches in a\n   * `/v2/catalog/batch-upsert` request.\n   */\n  batchUpsertMaxTotalObjects?: number;\n  /**\n   * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`\n   * request.\n   */\n  batchRetrieveMaxObjectIds?: number;\n  /**\n   * The maximum number of results that may be returned in a page of a\n   * `/v2/catalog/search` response.\n   */\n  searchMaxPageLimit?: number;\n  /**\n   * The maximum number of object IDs that may be included in a single\n   * `/v2/catalog/batch-delete` request.\n   */\n  batchDeleteMaxObjectIds?: number;\n  /**\n   * The maximum number of item IDs that may be included in a single\n   * `/v2/catalog/update-item-taxes` request.\n   */\n  updateItemTaxesMaxItemIds?: number;\n  /**\n   * The maximum number of tax IDs to be enabled that may be included in a single\n   * `/v2/catalog/update-item-taxes` request.\n   */\n  updateItemTaxesMaxTaxesToEnable?: number;\n  /**\n   * The maximum number of tax IDs to be disabled that may be included in a single\n   * `/v2/catalog/update-item-taxes` request.\n   */\n  updateItemTaxesMaxTaxesToDisable?: number;\n  /**\n   * The maximum number of item IDs that may be included in a single\n   * `/v2/catalog/update-item-modifier-lists` request.\n   */\n  updateItemModifierListsMaxItemIds?: number;\n  /**\n   * The maximum number of modifier list IDs to be enabled that may be included in\n   * a single `/v2/catalog/update-item-modifier-lists` request.\n   */\n  updateItemModifierListsMaxModifierListsToEnable?: number;\n  /**\n   * The maximum number of modifier list IDs to be disabled that may be included in\n   * a single `/v2/catalog/update-item-modifier-lists` request.\n   */\n  updateItemModifierListsMaxModifierListsToDisable?: number;\n}\n\nexport const catalogInfoResponseLimitsSchema: Schema<CatalogInfoResponseLimits> = object(\n  {\n    batchUpsertMaxObjectsPerBatch: [\n      'batch_upsert_max_objects_per_batch',\n      optional(number()),\n    ],\n    batchUpsertMaxTotalObjects: [\n      'batch_upsert_max_total_objects',\n      optional(number()),\n    ],\n    batchRetrieveMaxObjectIds: [\n      'batch_retrieve_max_object_ids',\n      optional(number()),\n    ],\n    searchMaxPageLimit: ['search_max_page_limit', optional(number())],\n    batchDeleteMaxObjectIds: [\n      'batch_delete_max_object_ids',\n      optional(number()),\n    ],\n    updateItemTaxesMaxItemIds: [\n      'update_item_taxes_max_item_ids',\n      optional(number()),\n    ],\n    updateItemTaxesMaxTaxesToEnable: [\n      'update_item_taxes_max_taxes_to_enable',\n      optional(number()),\n    ],\n    updateItemTaxesMaxTaxesToDisable: [\n      'update_item_taxes_max_taxes_to_disable',\n      optional(number()),\n    ],\n    updateItemModifierListsMaxItemIds: [\n      'update_item_modifier_lists_max_item_ids',\n      optional(number()),\n    ],\n    updateItemModifierListsMaxModifierListsToEnable: [\n      'update_item_modifier_lists_max_modifier_lists_to_enable',\n      optional(number()),\n    ],\n    updateItemModifierListsMaxModifierListsToDisable: [\n      'update_item_modifier_lists_max_modifier_lists_to_disable',\n      optional(number()),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { MeasurementUnit, measurementUnitSchema } from './measurementUnit';\n\n/** Contains the name and abbreviation for standard measurement unit. */\nexport interface StandardUnitDescription {\n  /**\n   * Represents a unit of measurement to use with a quantity, such as ounces\n   * or inches. Exactly one of the following fields are required: `custom_unit`,\n   * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n   */\n  unit?: MeasurementUnit;\n  /** UI display name of the measurement unit. For example, 'Pound'. */\n  name?: string;\n  /** UI display abbreviation for the measurement unit. For example, 'lb'. */\n  abbreviation?: string;\n}\n\nexport const standardUnitDescriptionSchema: Schema<StandardUnitDescription> = object(\n  {\n    unit: ['unit', optional(lazy(() => measurementUnitSchema))],\n    name: ['name', optional(string())],\n    abbreviation: ['abbreviation', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  StandardUnitDescription,\n  standardUnitDescriptionSchema,\n} from './standardUnitDescription';\n\n/** Group of standard measurement units. */\nexport interface StandardUnitDescriptionGroup {\n  /** List of standard (non-custom) measurement units in this description group. */\n  standardUnitDescriptions?: StandardUnitDescription[];\n  /** IETF language tag. */\n  languageCode?: string;\n}\n\nexport const standardUnitDescriptionGroupSchema: Schema<StandardUnitDescriptionGroup> = object(\n  {\n    standardUnitDescriptions: [\n      'standard_unit_descriptions',\n      optional(array(lazy(() => standardUnitDescriptionSchema))),\n    ],\n    languageCode: ['language_code', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  CatalogInfoResponseLimits,\n  catalogInfoResponseLimitsSchema,\n} from './catalogInfoResponseLimits';\nimport { Error, errorSchema } from './error';\nimport {\n  StandardUnitDescriptionGroup,\n  standardUnitDescriptionGroupSchema,\n} from './standardUnitDescriptionGroup';\n\nexport interface CatalogInfoResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  limits?: CatalogInfoResponseLimits;\n  /** Group of standard measurement units. */\n  standardUnitDescriptionGroup?: StandardUnitDescriptionGroup;\n}\n\nexport const catalogInfoResponseSchema: Schema<CatalogInfoResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  limits: ['limits', optional(lazy(() => catalogInfoResponseLimitsSchema))],\n  standardUnitDescriptionGroup: [\n    'standard_unit_description_group',\n    optional(lazy(() => standardUnitDescriptionGroupSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\nexport interface CreateCatalogImageRequest {\n  /**\n   * A unique string that identifies this CreateCatalogImage request.\n   * Keys can be any valid string but must be unique for every CreateCatalogImage request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * Unique ID of the `CatalogObject` to attach to this `CatalogImage`. Leave this\n   * field empty to create unattached images, for example if you are building an integration\n   * where these images can be attached to catalog items at a later time.\n   */\n  objectId?: string;\n  /**\n   * The wrapper object for the Catalog entries of a given object type.\n   * The type of a particular `CatalogObject` is determined by the value of the\n   * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.\n   * For example, the following list shows some instances of `CatalogObject` of a given `type` and\n   * their corresponding data atrribute that can be set:\n   * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.\n   * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.\n   * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.\n   * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.\n   * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.\n   * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.\n   * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.\n   * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.\n   * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.\n   * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.\n   * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.\n   * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.\n   * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  image?: CatalogObject;\n}\n\nexport const createCatalogImageRequestSchema: Schema<CreateCatalogImageRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    objectId: ['object_id', optional(string())],\n    image: ['image', optional(lazy(() => catalogObjectSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface CreateCatalogImageResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the Catalog entries of a given object type.\n   * The type of a particular `CatalogObject` is determined by the value of the\n   * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.\n   * For example, the following list shows some instances of `CatalogObject` of a given `type` and\n   * their corresponding data atrribute that can be set:\n   * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.\n   * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.\n   * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.\n   * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.\n   * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.\n   * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.\n   * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.\n   * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.\n   * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.\n   * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.\n   * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.\n   * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.\n   * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  image?: CatalogObject;\n}\n\nexport const createCatalogImageResponseSchema: Schema<CreateCatalogImageResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    image: ['image', optional(lazy(() => catalogObjectSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface DeleteCatalogObjectResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The IDs of all catalog objects deleted by this request.\n   * Multiple IDs may be returned when associated objects are also deleted, for example\n   * a catalog item variation will be deleted (and its ID included in this field)\n   * when its parent catalog item is deleted.\n   */\n  deletedObjectIds?: string[];\n  /**\n   * The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)\n   * of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.\n   */\n  deletedAt?: string;\n}\n\nexport const deleteCatalogObjectResponseSchema: Schema<DeleteCatalogObjectResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deletedObjectIds: ['deleted_object_ids', optional(array(string()))],\n    deletedAt: ['deleted_at', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface ListCatalogResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset, this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** The CatalogObjects returned. */\n  objects?: CatalogObject[];\n}\n\nexport const listCatalogResponseSchema: Schema<ListCatalogResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  cursor: ['cursor', optional(string())],\n  objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveCatalogObjectResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the Catalog entries of a given object type.\n   * The type of a particular `CatalogObject` is determined by the value of the\n   * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.\n   * For example, the following list shows some instances of `CatalogObject` of a given `type` and\n   * their corresponding data atrribute that can be set:\n   * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.\n   * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.\n   * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.\n   * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.\n   * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.\n   * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.\n   * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.\n   * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.\n   * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.\n   * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.\n   * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.\n   * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.\n   * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  object?: CatalogObject;\n  /** A list of `CatalogObject`s referenced by the object in the `object` field. */\n  relatedObjects?: CatalogObject[];\n}\n\nexport const retrieveCatalogObjectResponseSchema: Schema<RetrieveCatalogObjectResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    object: ['object', optional(lazy(() => catalogObjectSchema))],\n    relatedObjects: [\n      'related_objects',\n      optional(array(lazy(() => catalogObjectSchema))),\n    ],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** The range of a number value between the specified lower and upper bounds. */\nexport interface Range {\n  /** The lower bound of the number range. */\n  min?: string;\n  /** The upper bound of the number range. */\n  max?: string;\n}\n\nexport const rangeSchema: Schema<Range> = object({\n  min: ['min', optional(string())],\n  max: ['max', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Range, rangeSchema } from './range';\n\n/**\n * Supported custom attribute query expressions for calling the\n * [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems)\n * endpoint to search for items or item variations.\n */\nexport interface CustomAttributeFilter {\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `custom_attribute_definition_id`\n   * property value against the the specified id.\n   */\n  customAttributeDefinitionId?: string;\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `key` property value against\n   * the specified key.\n   */\n  key?: string;\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `string_value`  property value\n   * against the specified text.\n   */\n  stringFilter?: string;\n  /** The range of a number value between the specified lower and upper bounds. */\n  numberFilter?: Range;\n  /**\n   * A query expression to filter items or item variations by matching  their custom attributes'\n   * `selection_uid_values`\n   * values against the specified selection uids.\n   */\n  selectionUidsFilter?: string[];\n  /**\n   * A query expression to filter items or item variations by matching their custom attributes'\n   * `boolean_value` property values\n   * against the specified Boolean expression.\n   */\n  boolFilter?: boolean;\n}\n\nexport const customAttributeFilterSchema: Schema<CustomAttributeFilter> = object(\n  {\n    customAttributeDefinitionId: [\n      'custom_attribute_definition_id',\n      optional(string()),\n    ],\n    key: ['key', optional(string())],\n    stringFilter: ['string_filter', optional(string())],\n    numberFilter: ['number_filter', optional(lazy(() => rangeSchema))],\n    selectionUidsFilter: ['selection_uids_filter', optional(array(string()))],\n    boolFilter: ['bool_filter', optional(boolean())],\n  }\n);\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  CustomAttributeFilter,\n  customAttributeFilterSchema,\n} from './customAttributeFilter';\n\n/** Defines the request body for the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint. */\nexport interface SearchCatalogItemsRequest {\n  /**\n   * The text filter expression to return items or item variations containing specified text in\n   * the `name`, `description`, or `abbreviation` attribute value of an item, or in\n   * the `name`, `sku`, or `upc` attribute value of an item variation.\n   */\n  textFilter?: string;\n  /** The category id query expression to return items containing the specified category IDs. */\n  categoryIds?: string[];\n  /**\n   * The stock-level query expression to return item variations with the specified stock levels.\n   * See [SearchCatalogItemsRequestStockLevel](#type-searchcatalogitemsrequeststocklevel) for possible values\n   */\n  stockLevels?: string[];\n  /** The enabled-location query expression to return items and item variations having specified enabled locations. */\n  enabledLocationIds?: string[];\n  /** The pagination token, returned in the previous response, used to fetch the next batch of pending results. */\n  cursor?: string;\n  /** The maximum number of results to return per page. The default value is 100. */\n  limit?: number;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n  /** The product types query expression to return items or item variations having the specified product types. */\n  productTypes?: string[];\n  /**\n   * The customer-attribute filter to return items or item variations matching the specified\n   * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in\n   * a single call to the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint.\n   */\n  customAttributeFilters?: CustomAttributeFilter[];\n}\n\nexport const searchCatalogItemsRequestSchema: Schema<SearchCatalogItemsRequest> = object(\n  {\n    textFilter: ['text_filter', optional(string())],\n    categoryIds: ['category_ids', optional(array(string()))],\n    stockLevels: ['stock_levels', optional(array(string()))],\n    enabledLocationIds: ['enabled_location_ids', optional(array(string()))],\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n    sortOrder: ['sort_order', optional(string())],\n    productTypes: ['product_types', optional(array(string()))],\n    customAttributeFilters: [\n      'custom_attribute_filters',\n      optional(array(lazy(() => customAttributeFilterSchema))),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\n/** Defines the response body returned from the [SearchCatalogItems](#endpoint-Catalog-SearchCatalogItems) endpoint. */\nexport interface SearchCatalogItemsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Returned items matching the specified query expressions. */\n  items?: CatalogObject[];\n  /** Pagination token used in the next request to return more of the search result. */\n  cursor?: string;\n  /** Ids of returned item variations matching the specified query expression. */\n  matchedVariationIds?: string[];\n}\n\nexport const searchCatalogItemsResponseSchema: Schema<SearchCatalogItemsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    items: ['items', optional(array(lazy(() => catalogObjectSchema)))],\n    cursor: ['cursor', optional(string())],\n    matchedVariationIds: ['matched_variation_ids', optional(array(string()))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** The query filter to return the search result by exact match of the specified attribute name and value. */\nexport interface CatalogQueryExact {\n  /** The name of the attribute to be searched. Matching of the attribute name is exact. */\n  attributeName: string;\n  /**\n   * The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.\n   * For example, if a specified value of \"sma\", objects with the named attribute value of \"Small\", \"small\" are both matched.\n   */\n  attributeValue: string;\n}\n\nexport const catalogQueryExactSchema: Schema<CatalogQueryExact> = object({\n  attributeName: ['attribute_name', string()],\n  attributeValue: ['attribute_value', string()],\n});\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** The query filter to return the items containing the specified item option IDs. */\nexport interface CatalogQueryItemsForItemOptions {\n  /**\n   * A set of `CatalogItemOption` IDs to be used to find associated\n   * `CatalogItem`s. All Items that contain all of the given Item Options (in any order)\n   * will be returned.\n   */\n  itemOptionIds?: string[];\n}\n\nexport const catalogQueryItemsForItemOptionsSchema: Schema<CatalogQueryItemsForItemOptions> = object(\n  { itemOptionIds: ['item_option_ids', optional(array(string()))] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** The query filter to return the items containing the specified modifier list IDs. */\nexport interface CatalogQueryItemsForModifierList {\n  /** A set of `CatalogModifierList` IDs to be used to find associated `CatalogItem`s. */\n  modifierListIds: string[];\n}\n\nexport const catalogQueryItemsForModifierListSchema: Schema<CatalogQueryItemsForModifierList> = object(\n  { modifierListIds: ['modifier_list_ids', array(string())] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** The query filter to return the items containing the specified tax IDs. */\nexport interface CatalogQueryItemsForTax {\n  /** A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s. */\n  taxIds: string[];\n}\n\nexport const catalogQueryItemsForTaxSchema: Schema<CatalogQueryItemsForTax> = object(\n  { taxIds: ['tax_ids', array(string())] }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** The query filter to return the item variations containing the specified item option value IDs. */\nexport interface CatalogQueryItemVariationsForItemOptionValues {\n  /**\n   * A set of `CatalogItemOptionValue` IDs to be used to find associated\n   * `CatalogItemVariation`s. All ItemVariations that contain all of the given\n   * Item Option Values (in any order) will be returned.\n   */\n  itemOptionValueIds?: string[];\n}\n\nexport const catalogQueryItemVariationsForItemOptionValuesSchema: Schema<CatalogQueryItemVariationsForItemOptionValues> = object(\n  { itemOptionValueIds: ['item_option_value_ids', optional(array(string()))] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */\nexport interface CatalogQueryPrefix {\n  /** The name of the attribute to be searched. */\n  attributeName: string;\n  /** The desired prefix of the search attribute value. */\n  attributePrefix: string;\n}\n\nexport const catalogQueryPrefixSchema: Schema<CatalogQueryPrefix> = object({\n  attributeName: ['attribute_name', string()],\n  attributePrefix: ['attribute_prefix', string()],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** The query filter to return the search result whose named attribute values fall between the specified range. */\nexport interface CatalogQueryRange {\n  /** The name of the attribute to be searched. */\n  attributeName: string;\n  /** The desired minimum value for the search attribute (inclusive). */\n  attributeMinValue?: number;\n  /** The desired maximum value for the search attribute (inclusive). */\n  attributeMaxValue?: number;\n}\n\nexport const catalogQueryRangeSchema: Schema<CatalogQueryRange> = object({\n  attributeName: ['attribute_name', string()],\n  attributeMinValue: ['attribute_min_value', optional(number())],\n  attributeMaxValue: ['attribute_max_value', optional(number())],\n});\n","import { array, object, Schema, string } from '../schema';\n\n/**\n * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of\n * the `attribute_values`.\n */\nexport interface CatalogQuerySet {\n  /** The name of the attribute to be searched. Matching of the attribute name is exact. */\n  attributeName: string;\n  /**\n   * The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.\n   * A maximum of 250 values may be searched in a request.\n   */\n  attributeValues: string[];\n}\n\nexport const catalogQuerySetSchema: Schema<CatalogQuerySet> = object({\n  attributeName: ['attribute_name', string()],\n  attributeValues: ['attribute_values', array(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** The query expression to specify the key to sort search results. */\nexport interface CatalogQuerySortedAttribute {\n  /** The attribute whose value is used as the sort key. */\n  attributeName: string;\n  /**\n   * The first attribute value to be returned by the query. Ascending sorts will return only\n   * objects with this value or greater, while descending sorts will return only objects with this value\n   * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).\n   */\n  initialAttributeValue?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n}\n\nexport const catalogQuerySortedAttributeSchema: Schema<CatalogQuerySortedAttribute> = object(\n  {\n    attributeName: ['attribute_name', string()],\n    initialAttributeValue: ['initial_attribute_value', optional(string())],\n    sortOrder: ['sort_order', optional(string())],\n  }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */\nexport interface CatalogQueryText {\n  /** A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored. */\n  keywords: string[];\n}\n\nexport const catalogQueryTextSchema: Schema<CatalogQueryText> = object({\n  keywords: ['keywords', array(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  CatalogQueryExact,\n  catalogQueryExactSchema,\n} from './catalogQueryExact';\nimport {\n  CatalogQueryItemsForItemOptions,\n  catalogQueryItemsForItemOptionsSchema,\n} from './catalogQueryItemsForItemOptions';\nimport {\n  CatalogQueryItemsForModifierList,\n  catalogQueryItemsForModifierListSchema,\n} from './catalogQueryItemsForModifierList';\nimport {\n  CatalogQueryItemsForTax,\n  catalogQueryItemsForTaxSchema,\n} from './catalogQueryItemsForTax';\nimport {\n  CatalogQueryItemVariationsForItemOptionValues,\n  catalogQueryItemVariationsForItemOptionValuesSchema,\n} from './catalogQueryItemVariationsForItemOptionValues';\nimport {\n  CatalogQueryPrefix,\n  catalogQueryPrefixSchema,\n} from './catalogQueryPrefix';\nimport {\n  CatalogQueryRange,\n  catalogQueryRangeSchema,\n} from './catalogQueryRange';\nimport { CatalogQuerySet, catalogQuerySetSchema } from './catalogQuerySet';\nimport {\n  CatalogQuerySortedAttribute,\n  catalogQuerySortedAttributeSchema,\n} from './catalogQuerySortedAttribute';\nimport { CatalogQueryText, catalogQueryTextSchema } from './catalogQueryText';\n\n/**\n * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.\n * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects).\n * Any combination of the following types may be used together:\n * - [exact_query](#type-CatalogExactQuery)\n * - [prefix_query](#type-CatalogPrefixQuery)\n * - [range_query](#type-CatalogRangeQuery)\n * - [sorted_attribute_query](#type-CatalogSortedAttribute)\n * - [text_query](#type-CatalogTextQuery)\n * All other query types cannot be combined with any others.\n * When a query filter is based on an attribute, the attribute must be searchable.\n * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.\n * * Searchable attribute and objects queryable by searchable attributes **\n * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatelogCatogry`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`\n * - `description`: `CatalogItem`, `CatalogItemOptionValue`\n * - `abbreviation`: `CatalogItem`\n * - `upc`: `CatalogItemVariation`\n * - `sku`: `CatalogItemVariation`\n * - `caption`: `CatalogImage`\n * - `display_name`: `CatalogItemOption`\n * For example, to search for [CatalogItem](#type-CatalogItem) objects by searchable attributes, you can use\n * the `\"name\"`, `\"description\"`, or `\"abbreviation\"` attribute in an applicable query filter.\n */\nexport interface CatalogQuery {\n  /** The query expression to specify the key to sort search results. */\n  sortedAttributeQuery?: CatalogQuerySortedAttribute;\n  /** The query filter to return the search result by exact match of the specified attribute name and value. */\n  exactQuery?: CatalogQueryExact;\n  /**\n   * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of\n   * the `attribute_values`.\n   */\n  setQuery?: CatalogQuerySet;\n  /** The query filter to return the search result whose named attribute values are prefixed by the specified attribute value. */\n  prefixQuery?: CatalogQueryPrefix;\n  /** The query filter to return the search result whose named attribute values fall between the specified range. */\n  rangeQuery?: CatalogQueryRange;\n  /** The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case. */\n  textQuery?: CatalogQueryText;\n  /** The query filter to return the items containing the specified tax IDs. */\n  itemsForTaxQuery?: CatalogQueryItemsForTax;\n  /** The query filter to return the items containing the specified modifier list IDs. */\n  itemsForModifierListQuery?: CatalogQueryItemsForModifierList;\n  /** The query filter to return the items containing the specified item option IDs. */\n  itemsForItemOptionsQuery?: CatalogQueryItemsForItemOptions;\n  /** The query filter to return the item variations containing the specified item option value IDs. */\n  itemVariationsForItemOptionValuesQuery?: CatalogQueryItemVariationsForItemOptionValues;\n}\n\nexport const catalogQuerySchema: Schema<CatalogQuery> = object({\n  sortedAttributeQuery: [\n    'sorted_attribute_query',\n    optional(lazy(() => catalogQuerySortedAttributeSchema)),\n  ],\n  exactQuery: ['exact_query', optional(lazy(() => catalogQueryExactSchema))],\n  setQuery: ['set_query', optional(lazy(() => catalogQuerySetSchema))],\n  prefixQuery: ['prefix_query', optional(lazy(() => catalogQueryPrefixSchema))],\n  rangeQuery: ['range_query', optional(lazy(() => catalogQueryRangeSchema))],\n  textQuery: ['text_query', optional(lazy(() => catalogQueryTextSchema))],\n  itemsForTaxQuery: [\n    'items_for_tax_query',\n    optional(lazy(() => catalogQueryItemsForTaxSchema)),\n  ],\n  itemsForModifierListQuery: [\n    'items_for_modifier_list_query',\n    optional(lazy(() => catalogQueryItemsForModifierListSchema)),\n  ],\n  itemsForItemOptionsQuery: [\n    'items_for_item_options_query',\n    optional(lazy(() => catalogQueryItemsForItemOptionsSchema)),\n  ],\n  itemVariationsForItemOptionValuesQuery: [\n    'item_variations_for_item_option_values_query',\n    optional(lazy(() => catalogQueryItemVariationsForItemOptionValuesSchema)),\n  ],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { CatalogQuery, catalogQuerySchema } from './catalogQuery';\n\nexport interface SearchCatalogObjectsRequest {\n  /**\n   * The pagination cursor returned in the previous response. Leave unset for an initial request.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** The desired set of object types to appear in the search results. */\n  objectTypes?: string[];\n  /**\n   * If `true`, deleted objects will be included in the results. Deleted objects will have their\n   * `is_deleted` field set to `true`.\n   */\n  includeDeletedObjects?: boolean;\n  /**\n   * If `true`, the response will include additional objects that are related to the\n   * requested object, as follows:\n   * If a CatalogItem is returned in the object field of the response,\n   * its associated CatalogCategory, CatalogTax objects,\n   * CatalogImage objects and CatalogModifierList objects\n   * will be included in the `related_objects` field of the response.\n   * If a CatalogItemVariation is returned in the object field of the\n   * response, its parent CatalogItem will be included in the `related_objects` field of\n   * the response.\n   */\n  includeRelatedObjects?: boolean;\n  /**\n   * Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339\n   * format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a\n   * timestamp equal to `begin_time` will not be included in the response.\n   */\n  beginTime?: string;\n  /**\n   * A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.\n   * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects).\n   * Any combination of the following types may be used together:\n   * - [exact_query](#type-CatalogExactQuery)\n   * - [prefix_query](#type-CatalogPrefixQuery)\n   * - [range_query](#type-CatalogRangeQuery)\n   * - [sorted_attribute_query](#type-CatalogSortedAttribute)\n   * - [text_query](#type-CatalogTextQuery)\n   * All other query types cannot be combined with any others.\n   * When a query filter is based on an attribute, the attribute must be searchable.\n   * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.\n   * * Searchable attribute and objects queryable by searchable attributes **\n   * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatelogCatogry`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`\n   * - `description`: `CatalogItem`, `CatalogItemOptionValue`\n   * - `abbreviation`: `CatalogItem`\n   * - `upc`: `CatalogItemVariation`\n   * - `sku`: `CatalogItemVariation`\n   * - `caption`: `CatalogImage`\n   * - `display_name`: `CatalogItemOption`\n   * For example, to search for [CatalogItem](#type-CatalogItem) objects by searchable attributes, you can use\n   * the `\"name\"`, `\"description\"`, or `\"abbreviation\"` attribute in an applicable query filter.\n   */\n  query?: CatalogQuery;\n  /**\n   * A limit on the number of results to be returned in a single page. The limit is advisory -\n   * the implementation may return more or fewer results. If the supplied limit is negative, zero, or\n   * is higher than the maximum limit of 1,000, it will be ignored.\n   */\n  limit?: number;\n}\n\nexport const searchCatalogObjectsRequestSchema: Schema<SearchCatalogObjectsRequest> = object(\n  {\n    cursor: ['cursor', optional(string())],\n    objectTypes: ['object_types', optional(array(string()))],\n    includeDeletedObjects: ['include_deleted_objects', optional(boolean())],\n    includeRelatedObjects: ['include_related_objects', optional(boolean())],\n    beginTime: ['begin_time', optional(string())],\n    query: ['query', optional(lazy(() => catalogQuerySchema))],\n    limit: ['limit', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface SearchCatalogObjectsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset, this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** The CatalogObjects returned. */\n  objects?: CatalogObject[];\n  /** A list of CatalogObjects referenced by the objects in the `objects` field. */\n  relatedObjects?: CatalogObject[];\n  /**\n   * When the associated product catalog was last updated. Will\n   * match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.\n   */\n  latestTime?: string;\n}\n\nexport const searchCatalogObjectsResponseSchema: Schema<SearchCatalogObjectsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    cursor: ['cursor', optional(string())],\n    objects: ['objects', optional(array(lazy(() => catalogObjectSchema)))],\n    relatedObjects: [\n      'related_objects',\n      optional(array(lazy(() => catalogObjectSchema))),\n    ],\n    latestTime: ['latest_time', optional(string())],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface UpdateItemModifierListsRequest {\n  /** The IDs of the catalog items associated with the CatalogModifierList objects being updated. */\n  itemIds: string[];\n  /** The IDs of the CatalogModifierList objects to enable for the CatalogItem. */\n  modifierListsToEnable?: string[];\n  /** The IDs of the CatalogModifierList objects to disable for the CatalogItem. */\n  modifierListsToDisable?: string[];\n}\n\nexport const updateItemModifierListsRequestSchema: Schema<UpdateItemModifierListsRequest> = object(\n  {\n    itemIds: ['item_ids', array(string())],\n    modifierListsToEnable: [\n      'modifier_lists_to_enable',\n      optional(array(string())),\n    ],\n    modifierListsToDisable: [\n      'modifier_lists_to_disable',\n      optional(array(string())),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateItemModifierListsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */\n  updatedAt?: string;\n}\n\nexport const updateItemModifierListsResponseSchema: Schema<UpdateItemModifierListsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    updatedAt: ['updated_at', optional(string())],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface UpdateItemTaxesRequest {\n  /** IDs for the CatalogItems associated with the CatalogTax objects being updated. */\n  itemIds: string[];\n  /** IDs of the CatalogTax objects to enable. */\n  taxesToEnable?: string[];\n  /** IDs of the CatalogTax objects to disable. */\n  taxesToDisable?: string[];\n}\n\nexport const updateItemTaxesRequestSchema: Schema<UpdateItemTaxesRequest> = object(\n  {\n    itemIds: ['item_ids', array(string())],\n    taxesToEnable: ['taxes_to_enable', optional(array(string()))],\n    taxesToDisable: ['taxes_to_disable', optional(array(string()))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\nexport interface UpdateItemTaxesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`. */\n  updatedAt?: string;\n}\n\nexport const updateItemTaxesResponseSchema: Schema<UpdateItemTaxesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    updatedAt: ['updated_at', optional(string())],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\n\nexport interface UpsertCatalogObjectRequest {\n  /**\n   * A value you specify that uniquely identifies this\n   * request among all your requests. A common way to create\n   * a valid idempotency key is to use a Universally unique\n   * identifier (UUID).\n   * If you're unsure whether a particular request was successful,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate objects.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * The wrapper object for the Catalog entries of a given object type.\n   * The type of a particular `CatalogObject` is determined by the value of the\n   * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.\n   * For example, the following list shows some instances of `CatalogObject` of a given `type` and\n   * their corresponding data atrribute that can be set:\n   * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.\n   * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.\n   * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.\n   * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.\n   * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.\n   * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.\n   * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.\n   * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.\n   * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.\n   * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.\n   * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.\n   * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.\n   * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  object: CatalogObject;\n}\n\nexport const upsertCatalogObjectRequestSchema: Schema<UpsertCatalogObjectRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    object: ['object', lazy(() => catalogObjectSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CatalogIdMapping, catalogIdMappingSchema } from './catalogIdMapping';\nimport { CatalogObject, catalogObjectSchema } from './catalogObject';\nimport { Error, errorSchema } from './error';\n\nexport interface UpsertCatalogObjectResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The wrapper object for the Catalog entries of a given object type.\n   * The type of a particular `CatalogObject` is determined by the value of the\n   * `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.\n   * For example, the following list shows some instances of `CatalogObject` of a given `type` and\n   * their corresponding data atrribute that can be set:\n   * - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.\n   * - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.\n   * - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.\n   * - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.\n   * - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.\n   * - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.\n   * - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.\n   * - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.\n   * - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.\n   * - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.\n   * - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.\n   * - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.\n   * - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.\n   * For a more detailed discussion of the Catalog data model, please see the\n   * [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.\n   */\n  catalogObject?: CatalogObject;\n  /** The mapping between client and server IDs for this upsert. */\n  idMappings?: CatalogIdMapping[];\n}\n\nexport const upsertCatalogObjectResponseSchema: Schema<UpsertCatalogObjectResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    catalogObject: [\n      'catalog_object',\n      optional(lazy(() => catalogObjectSchema)),\n    ],\n    idMappings: [\n      'id_mappings',\n      optional(array(lazy(() => catalogIdMappingSchema))),\n    ],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { FileWrapper } from '../fileWrapper';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  BatchDeleteCatalogObjectsRequest,\n  batchDeleteCatalogObjectsRequestSchema,\n} from '../models/batchDeleteCatalogObjectsRequest';\nimport {\n  BatchDeleteCatalogObjectsResponse,\n  batchDeleteCatalogObjectsResponseSchema,\n} from '../models/batchDeleteCatalogObjectsResponse';\nimport {\n  BatchRetrieveCatalogObjectsRequest,\n  batchRetrieveCatalogObjectsRequestSchema,\n} from '../models/batchRetrieveCatalogObjectsRequest';\nimport {\n  BatchRetrieveCatalogObjectsResponse,\n  batchRetrieveCatalogObjectsResponseSchema,\n} from '../models/batchRetrieveCatalogObjectsResponse';\nimport {\n  BatchUpsertCatalogObjectsRequest,\n  batchUpsertCatalogObjectsRequestSchema,\n} from '../models/batchUpsertCatalogObjectsRequest';\nimport {\n  BatchUpsertCatalogObjectsResponse,\n  batchUpsertCatalogObjectsResponseSchema,\n} from '../models/batchUpsertCatalogObjectsResponse';\nimport {\n  CatalogInfoResponse,\n  catalogInfoResponseSchema,\n} from '../models/catalogInfoResponse';\nimport {\n  CreateCatalogImageRequest,\n  createCatalogImageRequestSchema,\n} from '../models/createCatalogImageRequest';\nimport {\n  CreateCatalogImageResponse,\n  createCatalogImageResponseSchema,\n} from '../models/createCatalogImageResponse';\nimport {\n  DeleteCatalogObjectResponse,\n  deleteCatalogObjectResponseSchema,\n} from '../models/deleteCatalogObjectResponse';\nimport {\n  ListCatalogResponse,\n  listCatalogResponseSchema,\n} from '../models/listCatalogResponse';\nimport {\n  RetrieveCatalogObjectResponse,\n  retrieveCatalogObjectResponseSchema,\n} from '../models/retrieveCatalogObjectResponse';\nimport {\n  SearchCatalogItemsRequest,\n  searchCatalogItemsRequestSchema,\n} from '../models/searchCatalogItemsRequest';\nimport {\n  SearchCatalogItemsResponse,\n  searchCatalogItemsResponseSchema,\n} from '../models/searchCatalogItemsResponse';\nimport {\n  SearchCatalogObjectsRequest,\n  searchCatalogObjectsRequestSchema,\n} from '../models/searchCatalogObjectsRequest';\nimport {\n  SearchCatalogObjectsResponse,\n  searchCatalogObjectsResponseSchema,\n} from '../models/searchCatalogObjectsResponse';\nimport {\n  UpdateItemModifierListsRequest,\n  updateItemModifierListsRequestSchema,\n} from '../models/updateItemModifierListsRequest';\nimport {\n  UpdateItemModifierListsResponse,\n  updateItemModifierListsResponseSchema,\n} from '../models/updateItemModifierListsResponse';\nimport {\n  UpdateItemTaxesRequest,\n  updateItemTaxesRequestSchema,\n} from '../models/updateItemTaxesRequest';\nimport {\n  UpdateItemTaxesResponse,\n  updateItemTaxesResponseSchema,\n} from '../models/updateItemTaxesResponse';\nimport {\n  UpsertCatalogObjectRequest,\n  upsertCatalogObjectRequestSchema,\n} from '../models/upsertCatalogObjectRequest';\nimport {\n  UpsertCatalogObjectResponse,\n  upsertCatalogObjectResponseSchema,\n} from '../models/upsertCatalogObjectResponse';\nimport { boolean, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CatalogApi extends BaseApi {\n  /**\n   * Deletes a set of [CatalogItem](#type-catalogitem)s based on the\n   * provided list of target IDs and returns a set of successfully deleted IDs in\n   * the response. Deletion is a cascading event such that all children of the\n   * targeted object are also deleted. For example, deleting a CatalogItem will\n   * also delete all of its [CatalogItemVariation](#type-catalogitemvariation)\n   * children.\n   *\n   * `BatchDeleteCatalogObjects` succeeds even if only a portion of the targeted\n   * IDs can be deleted. The response will only include IDs that were\n   * actually deleted.\n   *\n   * @param body An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async batchDeleteCatalogObjects(\n    body: BatchDeleteCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchDeleteCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/batch-delete');\n    const mapped = req.prepareArgs({\n      body: [body, batchDeleteCatalogObjectsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchDeleteCatalogObjectsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns a set of objects based on the provided ID.\n   * Each [CatalogItem](#type-catalogitem) returned in the set includes all of its\n   * child information including: all of its\n   * [CatalogItemVariation](#type-catalogitemvariation) objects, references to\n   * its [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of\n   * any [CatalogTax](#type-catalogtax) objects that apply to it.\n   *\n   * @param body An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async batchRetrieveCatalogObjects(\n    body: BatchRetrieveCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/batch-retrieve');\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveCatalogObjectsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchRetrieveCatalogObjectsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Creates or updates up to 10,000 target objects based on the provided\n   * list of objects. The target objects are grouped into batches and each batch is\n   * inserted/updated in an all-or-nothing manner. If an object within a batch is\n   * malformed in some way, or violates a database constraint, the entire batch\n   * containing that item will be disregarded. However, other batches in the same\n   * request may still succeed. Each batch may contain up to 1,000 objects, and\n   * batches will be processed in order as long as the total object count for the\n   * request (items, variations, modifier lists, discounts, and taxes) is no more\n   * than 10,000.\n   *\n   * @param body An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async batchUpsertCatalogObjects(\n    body: BatchUpsertCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchUpsertCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/batch-upsert');\n    const mapped = req.prepareArgs({\n      body: [body, batchUpsertCatalogObjectsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchUpsertCatalogObjectsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Uploads an image file to be represented by a [CatalogImage](#type-catalogimage) object linked to an\n   * existing\n   * [CatalogObject](#type-catalogobject) instance. A call to this endpoint can upload an image, link an\n   * image to\n   * a catalog object, or do both.\n   *\n   * This `CreateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an\n   * image file part in\n   * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.\n   *\n   * @param request\n   * @param imageFile\n   * @return Response from the API call\n   */\n  async createCatalogImage(\n    request?: CreateCatalogImageRequest,\n    imageFile?: FileWrapper,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCatalogImageResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/images');\n    const mapped = req.prepareArgs({\n      request: [request, optional(createCatalogImageRequestSchema)],\n    });\n    req.formData({\n      request: JSON.stringify(mapped.request),\n      image_file: imageFile,\n    });\n    return req.callAsJson(createCatalogImageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves information about the Square Catalog API, such as batch size\n   * limits that can be used by the `BatchUpsertCatalogObjects` endpoint.\n   *\n   * @return Response from the API call\n   */\n  async catalogInfo(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CatalogInfoResponse>> {\n    const req = this.createRequest('GET', '/v2/catalog/info');\n    return req.callAsJson(catalogInfoResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of [CatalogObject](#type-catalogobject)s that includes\n   * all objects of a set of desired types (for example, all [CatalogItem](#type-catalogitem)\n   * and [CatalogTax](#type-catalogtax) objects) in the catalog. The `types` parameter\n   * is specified as a comma-separated list of valid [CatalogObject](#type-catalogobject) types:\n   * `ITEM`, `ITEM_VARIATION`, `MODIFIER`, `MODIFIER_LIST`, `CATEGORY`, `DISCOUNT`, `TAX`, `IMAGE`.\n   *\n   * __Important:__ ListCatalog does not return deleted catalog items. To retrieve\n   * deleted catalog items, use [SearchCatalogObjects](#endpoint-Catalog-SearchCatalogObjects)\n   * and set the `include_deleted_objects` attribute value to `true`.\n   *\n   * @param cursor The pagination cursor returned in the previous response. Leave unset for an initial\n   *                         request. See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination)\n   *                         for more information.\n   * @param types  An optional case-insensitive, comma-separated list of object types to retrieve, for\n   *                         example `ITEM,ITEM_VARIATION,CATEGORY,IMAGE`.  The legal values are taken from the\n   *                         CatalogObjectType enum: `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,\n   *                         `MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.\n   * @return Response from the API call\n   */\n  async listCatalog(\n    cursor?: string,\n    types?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCatalogResponse>> {\n    const req = this.createRequest('GET', '/v2/catalog/list');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      types: [types, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('types', mapped.types);\n    return req.callAsJson(listCatalogResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates or updates the target [CatalogObject](#type-catalogobject).\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async upsertCatalogObject(\n    body: UpsertCatalogObjectRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpsertCatalogObjectResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/object');\n    const mapped = req.prepareArgs({\n      body: [body, upsertCatalogObjectRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(upsertCatalogObjectResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a single [CatalogObject](#type-catalogobject) based on the\n   * provided ID and returns the set of successfully deleted IDs in the response.\n   * Deletion is a cascading event such that all children of the targeted object\n   * are also deleted. For example, deleting a [CatalogItem](#type-catalogitem)\n   * will also delete all of its\n   * [CatalogItemVariation](#type-catalogitemvariation) children.\n   *\n   * @param objectId  The ID of the catalog object to be deleted. When an object is deleted, other objects\n   *                            in the graph that depend on that object will be deleted as well (for example, deleting\n   *                            a catalog item will delete its catalog item variations).\n   * @return Response from the API call\n   */\n  async deleteCatalogObject(\n    objectId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCatalogObjectResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ objectId: [objectId, string()] });\n    req.appendTemplatePath`/v2/catalog/object/${mapped.objectId}`;\n    return req.callAsJson(deleteCatalogObjectResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single [CatalogItem](#type-catalogitem) as a\n   * [CatalogObject](#type-catalogobject) based on the provided ID. The returned\n   * object includes all of the relevant [CatalogItem](#type-catalogitem)\n   * information including: [CatalogItemVariation](#type-catalogitemvariation)\n   * children, references to its\n   * [CatalogModifierList](#type-catalogmodifierlist) objects, and the ids of\n   * any [CatalogTax](#type-catalogtax) objects that apply to it.\n   *\n   * @param objectId                The object ID of any type of catalog objects to be retrieved.\n   * @param includeRelatedObjects   If `true`, the response will include additional objects that are\n   *                                           related to the requested object, as follows:  If the `object` field of\n   *                                           the response contains a `CatalogItem`, its associated `CatalogCategory`,\n   *                                           `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will be\n   *                                           returned in the `related_objects` field of the response. If the `object`\n   *                                           field of the response contains a `CatalogItemVariation`, its parent\n   *                                           `CatalogItem` will be returned in the `related_objects` field of the\n   *                                           response.  Default value: `false`\n   * @return Response from the API call\n   */\n  async retrieveCatalogObject(\n    objectId: string,\n    includeRelatedObjects?: boolean,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCatalogObjectResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      objectId: [objectId, string()],\n      includeRelatedObjects: [includeRelatedObjects, optional(boolean())],\n    });\n    req.query('include_related_objects', mapped.includeRelatedObjects);\n    req.appendTemplatePath`/v2/catalog/object/${mapped.objectId}`;\n    return req.callAsJson(retrieveCatalogObjectResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for [CatalogObject](#type-CatalogObject) of any types against supported search attribute\n   * values,\n   * excluding custom attribute values on items or item variations, against one or more of the specified\n   * query expressions,\n   *\n   * This (`SearchCatalogObjects`) endpoint differs from the [SearchCatalogItems](#endpoint-Catalog-\n   * SearchCatalogItems)\n   * endpoint in the following aspects:\n   *\n   * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects`\n   * can search for any type of catalog objects.\n   * - `SearchCatalogItems` supports the custom attribute query filters to return items or item\n   * variations that contain custom attribute values, where `SearchCatalogObjects` does not.\n   * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted\n   * items or item variations, whereas `SearchCatalogObjects` does.\n   * - The both endpoints have different call conventions, including the query filter formats.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchCatalogObjects(\n    body: SearchCatalogObjectsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchCatalogObjectsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchCatalogObjectsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchCatalogObjectsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for catalog items or item variations by matching supported search attribute values,\n   * including\n   * custom attribute values, against one or more of the specified query expressions,\n   *\n   * This (`SearchCatalogItems`) endpoint differs from the [SearchCatalogObjects](#endpoint-Catalog-\n   * SearchCatalogObjects)\n   * endpoint in the following aspects:\n   *\n   * - `SearchCatalogItems` can only search for items or item variations, whereas `SearchCatalogObjects`\n   * can search for any type of catalog objects.\n   * - `SearchCatalogItems` supports the custom attribute query filters to return items or item\n   * variations that contain custom attribute values, where `SearchCatalogObjects` does not.\n   * - `SearchCatalogItems` does not support the `include_deleted_objects` filter to search for deleted\n   * items or item variations, whereas `SearchCatalogObjects` does.\n   * - The both endpoints use different call conventions, including the query filter formats.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                                 corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchCatalogItems(\n    body: SearchCatalogItemsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchCatalogItemsResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/search-catalog-items');\n    const mapped = req.prepareArgs({\n      body: [body, searchCatalogItemsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchCatalogItemsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates the [CatalogModifierList](#type-catalogmodifierlist) objects\n   * that apply to the targeted [CatalogItem](#type-catalogitem) without having\n   * to perform an upsert on the entire item.\n   *\n   * @param body An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateItemModifierLists(\n    body: UpdateItemModifierListsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateItemModifierListsResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/catalog/update-item-modifier-lists'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, updateItemModifierListsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      updateItemModifierListsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Updates the [CatalogTax](#type-catalogtax) objects that apply to the\n   * targeted [CatalogItem](#type-catalogitem) without having to perform an\n   * upsert on the entire item.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                              corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateItemTaxes(\n    body: UpdateItemTaxesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateItemTaxesResponse>> {\n    const req = this.createRequest('POST', '/v2/catalog/update-item-taxes');\n    const mapped = req.prepareArgs({\n      body: [body, updateItemTaxesRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(updateItemTaxesResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a physical address. */\nexport interface Address {\n  /**\n   * The first line of the address.\n   * Fields that start with `address_line` provide the address's most specific\n   * details, like street number, street name, and building name. They do *not*\n   * provide less specific details like city, state/province, or country (these\n   * details are provided in other fields).\n   */\n  addressLine1?: string;\n  /** The second line of the address, if any. */\n  addressLine2?: string;\n  /** The third line of the address, if any. */\n  addressLine3?: string;\n  /** The city or town of the address. */\n  locality?: string;\n  /** A civil region within the address's `locality`, if any. */\n  sublocality?: string;\n  /** A civil region within the address's `sublocality`, if any. */\n  sublocality2?: string;\n  /** A civil region within the address's `sublocality_2`, if any. */\n  sublocality3?: string;\n  /**\n   * A civil entity within the address's country. In the US, this\n   * is the state.\n   */\n  administrativeDistrictLevel1?: string;\n  /**\n   * A civil entity within the address's `administrative_district_level_1`.\n   * In the US, this is the county.\n   */\n  administrativeDistrictLevel2?: string;\n  /**\n   * A civil entity within the address's `administrative_district_level_2`,\n   * if any.\n   */\n  administrativeDistrictLevel3?: string;\n  /** The address's postal code. */\n  postalCode?: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country?: string;\n  /** Optional first name when it's representing recipient. */\n  firstName?: string;\n  /** Optional last name when it's representing recipient. */\n  lastName?: string;\n  /** Optional organization name when it's representing recipient. */\n  organization?: string;\n}\n\nexport const addressSchema: Schema<Address> = object({\n  addressLine1: ['address_line_1', optional(string())],\n  addressLine2: ['address_line_2', optional(string())],\n  addressLine3: ['address_line_3', optional(string())],\n  locality: ['locality', optional(string())],\n  sublocality: ['sublocality', optional(string())],\n  sublocality2: ['sublocality_2', optional(string())],\n  sublocality3: ['sublocality_3', optional(string())],\n  administrativeDistrictLevel1: [\n    'administrative_district_level_1',\n    optional(string()),\n  ],\n  administrativeDistrictLevel2: [\n    'administrative_district_level_2',\n    optional(string()),\n  ],\n  administrativeDistrictLevel3: [\n    'administrative_district_level_3',\n    optional(string()),\n  ],\n  postalCode: ['postal_code', optional(string())],\n  country: ['country', optional(string())],\n  firstName: ['first_name', optional(string())],\n  lastName: ['last_name', optional(string())],\n  organization: ['organization', optional(string())],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents an additional recipient (other than the merchant) entitled to a portion of the tender.\n * Support is currently limited to USD, CAD and GBP currencies\n */\nexport interface ChargeRequestAdditionalRecipient {\n  /** The location ID for a recipient (other than the merchant) receiving a portion of the tender. */\n  locationId: string;\n  /** The description of the additional recipient. */\n  description: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n}\n\nexport const chargeRequestAdditionalRecipientSchema: Schema<ChargeRequestAdditionalRecipient> = object(\n  {\n    locationId: ['location_id', string()],\n    description: ['description', string()],\n    amountMoney: ['amount_money', lazy(() => moneySchema)],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Specific details for curbside pickup. */\nexport interface OrderFulfillmentPickupDetailsCurbsidePickupDetails {\n  /** Specific details for curbside pickup, such as parking number, vehicle model, etc. */\n  curbsideDetails?: string;\n  /**\n   * The [timestamp](#workingwithdates) in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\",\n   * indicating when the buyer arrived and is waiting for pickup.\n   */\n  buyerArrivedAt?: string;\n}\n\nexport const orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema: Schema<OrderFulfillmentPickupDetailsCurbsidePickupDetails> = object(\n  {\n    curbsideDetails: ['curbside_details', optional(string())],\n    buyerArrivedAt: ['buyer_arrived_at', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/** Contains information on the recipient of a fulfillment. */\nexport interface OrderFulfillmentRecipient {\n  /**\n   * The Customer ID of the customer associated with the fulfillment.\n   * If `customer_id` is provided, the fulfillment recipient's `display_name`,\n   * `email_address`, and `phone_number` are automatically populated from the\n   * targeted customer profile. If these fields are set in the request, the request\n   * values will override the information from the customer profile. If the\n   * targeted customer profile does not contain the necessary information and\n   * these fields are left unset, the request will result in an error.\n   */\n  customerId?: string;\n  /**\n   * The display name of the fulfillment recipient.\n   * If provided, overrides the value pulled from the customer profile indicated by `customer_id`.\n   */\n  displayName?: string;\n  /**\n   * The email address of the fulfillment recipient.\n   * If provided, overrides the value pulled from the customer profile indicated by `customer_id`.\n   */\n  emailAddress?: string;\n  /**\n   * The phone number of the fulfillment recipient.\n   * If provided, overrides the value pulled from the customer profile indicated by `customer_id`.\n   */\n  phoneNumber?: string;\n  /** Represents a physical address. */\n  address?: Address;\n}\n\nexport const orderFulfillmentRecipientSchema: Schema<OrderFulfillmentRecipient> = object(\n  {\n    customerId: ['customer_id', optional(string())],\n    displayName: ['display_name', optional(string())],\n    emailAddress: ['email_address', optional(string())],\n    phoneNumber: ['phone_number', optional(string())],\n    address: ['address', optional(lazy(() => addressSchema))],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderFulfillmentPickupDetailsCurbsidePickupDetails,\n  orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema,\n} from './orderFulfillmentPickupDetailsCurbsidePickupDetails';\nimport {\n  OrderFulfillmentRecipient,\n  orderFulfillmentRecipientSchema,\n} from './orderFulfillmentRecipient';\n\n/** Contains details necessary to fulfill a pickup order. */\nexport interface OrderFulfillmentPickupDetails {\n  /** Contains information on the recipient of a fulfillment. */\n  recipient?: OrderFulfillmentRecipient;\n  /**\n   * The [timestamp](#workingwithdates) indicating when this fulfillment\n   * will expire if it is not accepted. Must be in RFC 3339 format\n   * e.g., \"2016-09-04T23:59:33.123Z\". Expiration time can only be set up to 7\n   * days in the future. If `expires_at` is not set, this pickup fulfillment\n   * will be automatically accepted when placed.\n   */\n  expiresAt?: string;\n  /**\n   * The duration of time after which an open and accepted pickup fulfillment\n   * will automatically move to the `COMPLETED` state. Must be in RFC3339\n   * duration format e.g., \"P1W3D\".\n   * If not set, this pickup fulfillment will remain accepted until it is canceled or completed.\n   */\n  autoCompleteDuration?: string;\n  /** The schedule type of the pickup fulfillment. */\n  scheduleType?: string;\n  /**\n   * The [timestamp](#workingwithdates) that represents the start of the pickup window.\n   * Must be in RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   * For fulfillments with the schedule type `ASAP`, this is automatically set\n   * to the current time plus the expected duration to prepare the fulfillment.\n   */\n  pickupAt?: string;\n  /**\n   * The window of time in which the order should be picked up after the `pickup_at` timestamp.\n   * Must be in RFC3339 duration format, e.g., \"P1W3D\". Can be used as an\n   * informational guideline for merchants.\n   */\n  pickupWindowDuration?: string;\n  /**\n   * The duration of time it takes to prepare this fulfillment.\n   * Must be in RFC3339 duration format, e.g., \"P1W3D\".\n   */\n  prepTimeDuration?: string;\n  /**\n   * A note meant to provide additional instructions about the pickup\n   * fulfillment displayed in the Square Point of Sale and set by the API.\n   */\n  note?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the fulfillment\n   * was placed. Must be in RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  placedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the fulfillment\n   * was accepted. In RFC3339 timestamp format,\n   * e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  acceptedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the fulfillment\n   * was rejected. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  rejectedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the fulfillment is\n   * marked as ready for pickup. In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  readyAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the fulfillment expired.\n   * In RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  expiredAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the fulfillment\n   * was picked up by the recipient. In RFC3339 timestamp format,\n   * e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  pickedUpAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\",\n   * indicating when the fulfillment was canceled.\n   */\n  canceledAt?: string;\n  /** A description of why the pickup was canceled. Max length: 100 characters. */\n  cancelReason?: string;\n  /** If true, indicates this pickup order is for curbside pickup, not in-store pickup. */\n  isCurbsidePickup?: boolean;\n  /** Specific details for curbside pickup. */\n  curbsidePickupDetails?: OrderFulfillmentPickupDetailsCurbsidePickupDetails;\n}\n\nexport const orderFulfillmentPickupDetailsSchema: Schema<OrderFulfillmentPickupDetails> = object(\n  {\n    recipient: [\n      'recipient',\n      optional(lazy(() => orderFulfillmentRecipientSchema)),\n    ],\n    expiresAt: ['expires_at', optional(string())],\n    autoCompleteDuration: ['auto_complete_duration', optional(string())],\n    scheduleType: ['schedule_type', optional(string())],\n    pickupAt: ['pickup_at', optional(string())],\n    pickupWindowDuration: ['pickup_window_duration', optional(string())],\n    prepTimeDuration: ['prep_time_duration', optional(string())],\n    note: ['note', optional(string())],\n    placedAt: ['placed_at', optional(string())],\n    acceptedAt: ['accepted_at', optional(string())],\n    rejectedAt: ['rejected_at', optional(string())],\n    readyAt: ['ready_at', optional(string())],\n    expiredAt: ['expired_at', optional(string())],\n    pickedUpAt: ['picked_up_at', optional(string())],\n    canceledAt: ['canceled_at', optional(string())],\n    cancelReason: ['cancel_reason', optional(string())],\n    isCurbsidePickup: ['is_curbside_pickup', optional(boolean())],\n    curbsidePickupDetails: [\n      'curbside_pickup_details',\n      optional(\n        lazy(() => orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema)\n      ),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderFulfillmentRecipient,\n  orderFulfillmentRecipientSchema,\n} from './orderFulfillmentRecipient';\n\n/** Contains details necessary to fulfill a shipment order. */\nexport interface OrderFulfillmentShipmentDetails {\n  /** Contains information on the recipient of a fulfillment. */\n  recipient?: OrderFulfillmentRecipient;\n  /**\n   * The shipping carrier being used to ship this fulfillment\n   * e.g. UPS, FedEx, USPS, etc.\n   */\n  carrier?: string;\n  /** A note with additional information for the shipping carrier. */\n  shippingNote?: string;\n  /**\n   * A description of the type of shipping product purchased from the carrier.\n   * e.g. First Class, Priority, Express\n   */\n  shippingType?: string;\n  /** The reference number provided by the carrier to track the shipment's progress. */\n  trackingNumber?: string;\n  /** A link to the tracking webpage on the carrier's website. */\n  trackingUrl?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the shipment was\n   * requested. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  placedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when this fulfillment was\n   * moved to the `RESERVED` state. Indicates that preparation of this shipment has begun.\n   * Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  inProgressAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when this fulfillment\n   * was moved to the `PREPARED` state. Indicates that the fulfillment is packaged.\n   * Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  packagedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the shipment is\n   * expected to be delivered to the shipping carrier. Must be in RFC 3339 timestamp\n   * format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  expectedShippedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when this fulfillment\n   * was moved to the `COMPLETED`state. Indicates that the fulfillment has been given\n   * to the shipping carrier. Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  shippedAt?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating the shipment was canceled.\n   * Must be in RFC 3339 timestamp format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  canceledAt?: string;\n  /** A description of why the shipment was canceled. */\n  cancelReason?: string;\n  /**\n   * The [timestamp](#workingwithdates) indicating when the shipment\n   * failed to be completed. Must be in RFC 3339 timestamp format, e.g.,\n   * \"2016-09-04T23:59:33.123Z\".\n   */\n  failedAt?: string;\n  /** A description of why the shipment failed to be completed. */\n  failureReason?: string;\n}\n\nexport const orderFulfillmentShipmentDetailsSchema: Schema<OrderFulfillmentShipmentDetails> = object(\n  {\n    recipient: [\n      'recipient',\n      optional(lazy(() => orderFulfillmentRecipientSchema)),\n    ],\n    carrier: ['carrier', optional(string())],\n    shippingNote: ['shipping_note', optional(string())],\n    shippingType: ['shipping_type', optional(string())],\n    trackingNumber: ['tracking_number', optional(string())],\n    trackingUrl: ['tracking_url', optional(string())],\n    placedAt: ['placed_at', optional(string())],\n    inProgressAt: ['in_progress_at', optional(string())],\n    packagedAt: ['packaged_at', optional(string())],\n    expectedShippedAt: ['expected_shipped_at', optional(string())],\n    shippedAt: ['shipped_at', optional(string())],\n    canceledAt: ['canceled_at', optional(string())],\n    cancelReason: ['cancel_reason', optional(string())],\n    failedAt: ['failed_at', optional(string())],\n    failureReason: ['failure_reason', optional(string())],\n  }\n);\n","import { dict, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderFulfillmentPickupDetails,\n  orderFulfillmentPickupDetailsSchema,\n} from './orderFulfillmentPickupDetails';\nimport {\n  OrderFulfillmentShipmentDetails,\n  orderFulfillmentShipmentDetailsSchema,\n} from './orderFulfillmentShipmentDetails';\n\n/** Contains details on how to fulfill this order. */\nexport interface OrderFulfillment {\n  /** Unique ID that identifies the fulfillment only within this order. */\n  uid?: string;\n  /** The type of fulfillment. */\n  type?: string;\n  /** The current state of this fulfillment. */\n  state?: string;\n  /**\n   * Application-defined data attached to this fulfillment. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (personally\n   * identifiable information, card details, etc.).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a max length of 255 characters.\n   * An application may have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.\n   */\n  metadata?: Record<string, string>;\n  /** Contains details necessary to fulfill a pickup order. */\n  pickupDetails?: OrderFulfillmentPickupDetails;\n  /** Contains details necessary to fulfill a shipment order. */\n  shipmentDetails?: OrderFulfillmentShipmentDetails;\n}\n\nexport const orderFulfillmentSchema: Schema<OrderFulfillment> = object({\n  uid: ['uid', optional(string())],\n  type: ['type', optional(string())],\n  state: ['state', optional(string())],\n  metadata: ['metadata', optional(dict(string()))],\n  pickupDetails: [\n    'pickup_details',\n    optional(lazy(() => orderFulfillmentPickupDetailsSchema)),\n  ],\n  shipmentDetails: [\n    'shipment_details',\n    optional(lazy(() => orderFulfillmentShipmentDetailsSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents an applied portion of a discount to a line item in an order.\n * Order scoped discounts will automatically have applied discounts present for each line item.\n * Line item scoped discounts must have applied discounts added manually for any applicable line\n * items. The corresponding applied money will automatically be computed based on participating\n * line items.\n */\nexport interface OrderLineItemAppliedDiscount {\n  /** Unique ID that identifies the applied discount only within this order. */\n  uid?: string;\n  /**\n   * The `uid` of the discount the applied discount represents. Must\n   * reference a discount present in the `order.discounts` field.\n   * This field is immutable. To change which discounts apply to a line item,\n   * you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.\n   */\n  discountUid: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n}\n\nexport const orderLineItemAppliedDiscountSchema: Schema<OrderLineItemAppliedDiscount> = object(\n  {\n    uid: ['uid', optional(string())],\n    discountUid: ['discount_uid', string()],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents an applied portion of a tax to a line item in an order.\n * Order-scoped taxes automatically include the applied taxes in each line item.\n * Line item taxes must be referenced from any applicable line items.\n * The corresponding applied money is automatically computed, based on the\n * set of participating line items.\n */\nexport interface OrderLineItemAppliedTax {\n  /** Unique ID that identifies the applied tax only within this order. */\n  uid?: string;\n  /**\n   * The `uid` of the tax for which this applied tax represents.  Must reference\n   * a tax present in the `order.taxes` field.\n   * This field is immutable. To change which taxes apply to a line item, delete and add new\n   * `OrderLineItemAppliedTax`s.\n   */\n  taxUid: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n}\n\nexport const orderLineItemAppliedTaxSchema: Schema<OrderLineItemAppliedTax> = object(\n  {\n    uid: ['uid', optional(string())],\n    taxUid: ['tax_uid', string()],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A [CatalogModifier](#type-catalogmodifier). */\nexport interface OrderLineItemModifier {\n  /** Unique ID that identifies the modifier only within this order. */\n  uid?: string;\n  /** The catalog object id referencing [CatalogModifier](#type-catalogmodifier). */\n  catalogObjectId?: string;\n  /** The name of the item modifier. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalPriceMoney?: Money;\n}\n\nexport const orderLineItemModifierSchema: Schema<OrderLineItemModifier> = object(\n  {\n    uid: ['uid', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    name: ['name', optional(string())],\n    basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n    totalPriceMoney: ['total_price_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, number, object, optional, Schema } from '../schema';\nimport { MeasurementUnit, measurementUnitSchema } from './measurementUnit';\n\n/**\n * Contains the measurement unit for a quantity and a precision which\n * specifies the number of digits after the decimal point for decimal quantities.\n */\nexport interface OrderQuantityUnit {\n  /**\n   * Represents a unit of measurement to use with a quantity, such as ounces\n   * or inches. Exactly one of the following fields are required: `custom_unit`,\n   * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.\n   */\n  measurementUnit?: MeasurementUnit;\n  /**\n   * For non-integer quantities, represents the number of digits after the decimal point that are\n   * recorded for this quantity.\n   * For example, a precision of 1 allows quantities like `\"1.0\"` and `\"1.1\"`, but not `\"1.01\"`.\n   * Min: 0. Max: 5.\n   */\n  precision?: number;\n}\n\nexport const orderQuantityUnitSchema: Schema<OrderQuantityUnit> = object({\n  measurementUnit: [\n    'measurement_unit',\n    optional(lazy(() => measurementUnitSchema)),\n  ],\n  precision: ['precision', optional(number())],\n});\n","import { array, dict, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedDiscount,\n  orderLineItemAppliedDiscountSchema,\n} from './orderLineItemAppliedDiscount';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\nimport {\n  OrderLineItemModifier,\n  orderLineItemModifierSchema,\n} from './orderLineItemModifier';\nimport {\n  OrderQuantityUnit,\n  orderQuantityUnitSchema,\n} from './orderQuantityUnit';\n\n/**\n * Represents a line item in an order. Each line item describes a different\n * product to purchase, with its own quantity and price details.\n */\nexport interface OrderLineItem {\n  /** Unique ID that identifies the line item only within this order. */\n  uid?: string;\n  /** The name of the line item. */\n  name?: string;\n  /**\n   * The quantity purchased, formatted as a decimal number.\n   * For example: `\"3\"`.\n   * Line items with a quantity of `\"0\"` will be automatically removed\n   * upon paying for or otherwise completing the order.\n   * Line items with a `quantity_unit` can have non-integer quantities.\n   * For example: `\"1.70000\"`.\n   */\n  quantity: string;\n  /**\n   * Contains the measurement unit for a quantity and a precision which\n   * specifies the number of digits after the decimal point for decimal quantities.\n   */\n  quantityUnit?: OrderQuantityUnit;\n  /** The note of the line item. */\n  note?: string;\n  /** The [CatalogItemVariation](#type-catalogitemvariation) id applied to this line item. */\n  catalogObjectId?: string;\n  /** The name of the variation applied to this line item. */\n  variationName?: string;\n  /**\n   * Application-defined data attached to this line item. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (personally\n   * identifiable information, card details, etc.).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a max length of 255 characters.\n   * An application may have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.\n   */\n  metadata?: Record<string, string>;\n  /** The [CatalogModifier](#type-catalogmodifier)s applied to this line item. */\n  modifiers?: OrderLineItemModifier[];\n  /**\n   * The list of references to taxes applied to this line item. Each\n   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a\n   * top-level `OrderLineItemTax` applied to the line item. On reads, the\n   * amount applied is populated.\n   * An `OrderLineItemAppliedTax` will be automatically created on every line\n   * item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`\n   * records for `LINE_ITEM` scoped taxes must be added in requests for the tax\n   * to apply to any line items.\n   * To change the amount of a tax, modify the referenced top-level tax.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n  /**\n   * The list of references to discounts applied to this line item. Each\n   * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level\n   * `OrderLineItemDiscounts` applied to the line item. On reads, the amount\n   * applied is populated.\n   * An `OrderLineItemAppliedDiscount` will be automatically created on every line item for all\n   * `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records\n   * for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any\n   * line items.\n   * To change the amount of a discount, modify the referenced top-level discount.\n   */\n  appliedDiscounts?: OrderLineItemAppliedDiscount[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  variationTotalPriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  grossSalesMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n}\n\nexport const orderLineItemSchema: Schema<OrderLineItem> = object({\n  uid: ['uid', optional(string())],\n  name: ['name', optional(string())],\n  quantity: ['quantity', string()],\n  quantityUnit: [\n    'quantity_unit',\n    optional(lazy(() => orderQuantityUnitSchema)),\n  ],\n  note: ['note', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  variationName: ['variation_name', optional(string())],\n  metadata: ['metadata', optional(dict(string()))],\n  modifiers: [\n    'modifiers',\n    optional(array(lazy(() => orderLineItemModifierSchema))),\n  ],\n  appliedTaxes: [\n    'applied_taxes',\n    optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n  ],\n  appliedDiscounts: [\n    'applied_discounts',\n    optional(array(lazy(() => orderLineItemAppliedDiscountSchema))),\n  ],\n  basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n  variationTotalPriceMoney: [\n    'variation_total_price_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  grossSalesMoney: ['gross_sales_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n});\n","import { array, dict, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a discount that applies to one or more line items in an\n * order.\n * Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.\n * The amount distributed to each line item is relative to the\n * amount contributed by the item to the order subtotal.\n */\nexport interface OrderLineItemDiscount {\n  /** Unique ID that identifies the discount only within this order. */\n  uid?: string;\n  /** The catalog object id referencing [CatalogDiscount](#type-catalogdiscount). */\n  catalogObjectId?: string;\n  /** The discount's name. */\n  name?: string;\n  /** Indicates how the discount is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the discount, as a string representation of a decimal number.\n   * A value of `7.25` corresponds to a percentage of 7.25%.\n   * `percentage` is not set for amount-based discounts.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /**\n   * Application-defined data attached to this discount. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (personally\n   * identifiable information, card details, etc.).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a max length of 255 characters.\n   * An application may have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.\n   */\n  metadata?: Record<string, string>;\n  /** Indicates whether this is a line item or order level discount. */\n  scope?: string;\n  /**\n   * The reward identifiers corresponding to this discount. The application and\n   * specification of discounts that have `reward_ids` are completely controlled by the backing\n   * criteria corresponding to the reward tiers of the rewards that are added to the order\n   * through the Loyalty API. To manually unapply discounts that are the result of added rewards,\n   * the rewards must be removed from the order through the Loyalty API.\n   */\n  rewardIds?: string[];\n  /**\n   * The object identifier of a [pricing rule](#type-CatalogPricingRule) to be applied automatically\n   * to this discount. The specification and application of the discounts, to which a `pricing_rule_id` is\n   * assigned, are completely controlled by the corresponding pricing rule.\n   */\n  pricingRuleId?: string;\n}\n\nexport const orderLineItemDiscountSchema: Schema<OrderLineItemDiscount> = object(\n  {\n    uid: ['uid', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    name: ['name', optional(string())],\n    type: ['type', optional(string())],\n    percentage: ['percentage', optional(string())],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n    metadata: ['metadata', optional(dict(string()))],\n    scope: ['scope', optional(string())],\n    rewardIds: ['reward_ids', optional(array(string()))],\n    pricingRuleId: ['pricing_rule_id', optional(string())],\n  }\n);\n","import { dict, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a tax that applies to one or more line item in the order.\n * Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.\n * The amount distributed to each line item is relative to the amount the item\n * contributes to the order subtotal.\n */\nexport interface OrderLineItemTax {\n  /** Unique ID that identifies the tax only within this order. */\n  uid?: string;\n  /** The catalog object id referencing [CatalogTax](#type-catalogtax). */\n  catalogObjectId?: string;\n  /** The tax's name. */\n  name?: string;\n  /** Indicates how the tax is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the tax, as a string representation of a decimal\n   * number. For example, a value of `\"7.25\"` corresponds to a percentage of\n   * 7.25%.\n   */\n  percentage?: string;\n  /**\n   * Application-defined data attached to this tax. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (personally\n   * identifiable information, card details, etc.).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a max length of 255 characters.\n   * An application may have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.\n   */\n  metadata?: Record<string, string>;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /** Indicates whether this is a line item or order level tax. */\n  scope?: string;\n}\n\nexport const orderLineItemTaxSchema: Schema<OrderLineItemTax> = object({\n  uid: ['uid', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  name: ['name', optional(string())],\n  type: ['type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  metadata: ['metadata', optional(dict(string()))],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  scope: ['scope', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A collection of various money amounts. */\nexport interface OrderMoneyAmounts {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  taxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  discountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  serviceChargeMoney?: Money;\n}\n\nexport const orderMoneyAmountsSchema: Schema<OrderMoneyAmounts> = object({\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  taxMoney: ['tax_money', optional(lazy(() => moneySchema))],\n  discountMoney: ['discount_money', optional(lazy(() => moneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  serviceChargeMoney: [\n    'service_charge_money',\n    optional(lazy(() => moneySchema)),\n  ],\n});\n","import { boolean, object, optional, Schema } from '../schema';\n\n/**\n * Pricing options for an order. The options affect how the order's price is calculated.\n * They can be used, for example, to apply automatic price adjustments that are based on pre-configured\n * [pricing rules](https://developer.squareup.com/docs/reference/square/objects/CatalogPricingRule).\n */\nexport interface OrderPricingOptions {\n  /**\n   * The option to determine whether or not pricing rule-based\n   * discounts are automatically applied to an order.\n   */\n  autoApplyDiscounts?: boolean;\n}\n\nexport const orderPricingOptionsSchema: Schema<OrderPricingOptions> = object({\n  autoApplyDiscounts: ['auto_apply_discounts', optional(boolean())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a discount being returned that applies to one or more return line items in an\n * order.\n * Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals.\n * The amount distributed to each return line item is relative to that item’s contribution to the\n * order subtotal.\n */\nexport interface OrderReturnDiscount {\n  /** Unique ID that identifies the return discount only within this order. */\n  uid?: string;\n  /** `uid` of the Discount from the Order which contains the original application of this discount. */\n  sourceDiscountUid?: string;\n  /** The catalog object id referencing [CatalogDiscount](#type-catalogdiscount). */\n  catalogObjectId?: string;\n  /** The discount's name. */\n  name?: string;\n  /** Indicates how the discount is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the tax, as a string representation of a decimal number.\n   * A value of `7.25` corresponds to a percentage of 7.25%.\n   * `percentage` is not set for amount-based discounts.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /** Indicates whether this is a line item or order level discount. */\n  scope?: string;\n}\n\nexport const orderReturnDiscountSchema: Schema<OrderReturnDiscount> = object({\n  uid: ['uid', optional(string())],\n  sourceDiscountUid: ['source_discount_uid', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  name: ['name', optional(string())],\n  type: ['type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  scope: ['scope', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** A line item modifier being returned. */\nexport interface OrderReturnLineItemModifier {\n  /** Unique ID that identifies the return modifier only within this order. */\n  uid?: string;\n  /**\n   * `uid` of the Modifier from the LineItem from the Order which contains the\n   * original sale of this line item modifier.\n   */\n  sourceModifierUid?: string;\n  /** The catalog object id referencing [CatalogModifier](#type-catalogmodifier). */\n  catalogObjectId?: string;\n  /** The name of the item modifier. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalPriceMoney?: Money;\n}\n\nexport const orderReturnLineItemModifierSchema: Schema<OrderReturnLineItemModifier> = object(\n  {\n    uid: ['uid', optional(string())],\n    sourceModifierUid: ['source_modifier_uid', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    name: ['name', optional(string())],\n    basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n    totalPriceMoney: ['total_price_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedDiscount,\n  orderLineItemAppliedDiscountSchema,\n} from './orderLineItemAppliedDiscount';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\nimport {\n  OrderQuantityUnit,\n  orderQuantityUnitSchema,\n} from './orderQuantityUnit';\nimport {\n  OrderReturnLineItemModifier,\n  orderReturnLineItemModifierSchema,\n} from './orderReturnLineItemModifier';\n\n/** The line item being returned in an Order. */\nexport interface OrderReturnLineItem {\n  /** Unique identifier for this return line item entry. */\n  uid?: string;\n  /** `uid` of the LineItem in the original sale Order. */\n  sourceLineItemUid?: string;\n  /** The name of the line item. */\n  name?: string;\n  /**\n   * The quantity returned, formatted as a decimal number.\n   * For example: `\"3\"`.\n   * Line items with a `quantity_unit` can have non-integer quantities.\n   * For example: `\"1.70000\"`.\n   */\n  quantity: string;\n  /**\n   * Contains the measurement unit for a quantity and a precision which\n   * specifies the number of digits after the decimal point for decimal quantities.\n   */\n  quantityUnit?: OrderQuantityUnit;\n  /** The note of the returned line item. */\n  note?: string;\n  /** The [CatalogItemVariation](#type-catalogitemvariation) id applied to this returned line item. */\n  catalogObjectId?: string;\n  /** The name of the variation applied to this returned line item. */\n  variationName?: string;\n  /** The [CatalogModifier](#type-catalogmodifier)s applied to this line item. */\n  returnModifiers?: OrderReturnLineItemModifier[];\n  /**\n   * The list of references to `OrderReturnTax` entities applied to the returned line item. Each\n   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level\n   * `OrderReturnTax` applied to the returned line item. On reads, the amount applied\n   * is populated.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n  /**\n   * The list of references to `OrderReturnDiscount` entities applied to the returned line item. Each\n   * `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level\n   * `OrderReturnDiscount` applied to the returned line item. On reads, the amount\n   * applied is populated.\n   */\n  appliedDiscounts?: OrderLineItemAppliedDiscount[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  basePriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  variationTotalPriceMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  grossReturnMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n}\n\nexport const orderReturnLineItemSchema: Schema<OrderReturnLineItem> = object({\n  uid: ['uid', optional(string())],\n  sourceLineItemUid: ['source_line_item_uid', optional(string())],\n  name: ['name', optional(string())],\n  quantity: ['quantity', string()],\n  quantityUnit: [\n    'quantity_unit',\n    optional(lazy(() => orderQuantityUnitSchema)),\n  ],\n  note: ['note', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  variationName: ['variation_name', optional(string())],\n  returnModifiers: [\n    'return_modifiers',\n    optional(array(lazy(() => orderReturnLineItemModifierSchema))),\n  ],\n  appliedTaxes: [\n    'applied_taxes',\n    optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n  ],\n  appliedDiscounts: [\n    'applied_discounts',\n    optional(array(lazy(() => orderLineItemAppliedDiscountSchema))),\n  ],\n  basePriceMoney: ['base_price_money', optional(lazy(() => moneySchema))],\n  variationTotalPriceMoney: [\n    'variation_total_price_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  grossReturnMoney: ['gross_return_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\n\n/** Represents the service charge applied to the original order. */\nexport interface OrderReturnServiceCharge {\n  /** Unique ID that identifies the return service charge only within this order. */\n  uid?: string;\n  /**\n   * `uid` of the Service Charge from the Order containing the original\n   * charge of the service charge. `source_service_charge_uid` is `null` for\n   * unlinked returns.\n   */\n  sourceServiceChargeUid?: string;\n  /** The name of the service charge. */\n  name?: string;\n  /** The catalog object ID of the associated [CatalogServiceCharge](#type-catalogservicecharge). */\n  catalogObjectId?: string;\n  /**\n   * The percentage of the service charge, as a string representation of\n   * a decimal number. For example, a value of `\"7.25\"` corresponds to a\n   * percentage of 7.25%.\n   * Exactly one of `percentage` or `amount_money` should be set.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents a phase in the process of calculating order totals.\n   * Service charges are applied __after__ the indicated phase.\n   * [Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)\n   */\n  calculationPhase?: string;\n  /**\n   * Indicates whether the surcharge can be taxed. Service charges\n   * calculated in the `TOTAL_PHASE` cannot be marked as taxable.\n   */\n  taxable?: boolean;\n  /**\n   * The list of references to `OrderReturnTax` entities applied to the\n   * `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`\n   * that references the `uid` of a top-level `OrderReturnTax` that is being\n   * applied to the `OrderReturnServiceCharge`. On reads, the amount applied is\n   * populated.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n}\n\nexport const orderReturnServiceChargeSchema: Schema<OrderReturnServiceCharge> = object(\n  {\n    uid: ['uid', optional(string())],\n    sourceServiceChargeUid: ['source_service_charge_uid', optional(string())],\n    name: ['name', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    percentage: ['percentage', optional(string())],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n    appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n    totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n    totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n    calculationPhase: ['calculation_phase', optional(string())],\n    taxable: ['taxable', optional(boolean())],\n    appliedTaxes: [\n      'applied_taxes',\n      optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a tax being returned that applies to one or more return line items in an order.\n * Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.\n * The amount distributed to each return line item is relative to that item’s contribution to the\n * order subtotal.\n */\nexport interface OrderReturnTax {\n  /** Unique ID that identifies the return tax only within this order. */\n  uid?: string;\n  /** `uid` of the Tax from the Order which contains the original charge of this tax. */\n  sourceTaxUid?: string;\n  /** The catalog object id referencing [CatalogTax](#type-catalogtax). */\n  catalogObjectId?: string;\n  /** The tax's name. */\n  name?: string;\n  /** Indicates how the tax is applied to the associated line item or order. */\n  type?: string;\n  /**\n   * The percentage of the tax, as a string representation of a decimal number.\n   * For example, a value of `\"7.25\"` corresponds to a percentage of 7.25%.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /** Indicates whether this is a line item or order level tax. */\n  scope?: string;\n}\n\nexport const orderReturnTaxSchema: Schema<OrderReturnTax> = object({\n  uid: ['uid', optional(string())],\n  sourceTaxUid: ['source_tax_uid', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  name: ['name', optional(string())],\n  type: ['type', optional(string())],\n  percentage: ['percentage', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  scope: ['scope', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * A rounding adjustment of the money being returned. Commonly used to apply Cash Rounding\n * when the minimum unit of account is smaller than the lowest physical denomination of currency.\n */\nexport interface OrderRoundingAdjustment {\n  /** Unique ID that identifies the rounding adjustment only within this order. */\n  uid?: string;\n  /** The name of the rounding adjustment from the original sale Order. */\n  name?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n}\n\nexport const orderRoundingAdjustmentSchema: Schema<OrderRoundingAdjustment> = object(\n  {\n    uid: ['uid', optional(string())],\n    name: ['name', optional(string())],\n    amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  OrderMoneyAmounts,\n  orderMoneyAmountsSchema,\n} from './orderMoneyAmounts';\nimport {\n  OrderReturnDiscount,\n  orderReturnDiscountSchema,\n} from './orderReturnDiscount';\nimport {\n  OrderReturnLineItem,\n  orderReturnLineItemSchema,\n} from './orderReturnLineItem';\nimport {\n  OrderReturnServiceCharge,\n  orderReturnServiceChargeSchema,\n} from './orderReturnServiceCharge';\nimport { OrderReturnTax, orderReturnTaxSchema } from './orderReturnTax';\nimport {\n  OrderRoundingAdjustment,\n  orderRoundingAdjustmentSchema,\n} from './orderRoundingAdjustment';\n\n/** The set of line items, service charges, taxes, discounts, tips, etc. being returned in an Order. */\nexport interface OrderReturn {\n  /** Unique ID that identifies the return only within this order. */\n  uid?: string;\n  /**\n   * Order which contains the original sale of these returned line items. This will be unset\n   * for unlinked returns.\n   */\n  sourceOrderId?: string;\n  /** Collection of line items which are being returned. */\n  returnLineItems?: OrderReturnLineItem[];\n  /** Collection of service charges which are being returned. */\n  returnServiceCharges?: OrderReturnServiceCharge[];\n  /**\n   * Collection of references to taxes being returned for an order, including the total\n   * applied tax amount to be returned. The taxes must reference a top-level tax ID from the source\n   * order.\n   */\n  returnTaxes?: OrderReturnTax[];\n  /**\n   * Collection of references to discounts being returned for an order, including the total\n   * applied discount amount to be returned. The discounts must reference a top-level discount ID\n   * from the source order.\n   */\n  returnDiscounts?: OrderReturnDiscount[];\n  /**\n   * A rounding adjustment of the money being returned. Commonly used to apply Cash Rounding\n   * when the minimum unit of account is smaller than the lowest physical denomination of currency.\n   */\n  roundingAdjustment?: OrderRoundingAdjustment;\n  /** A collection of various money amounts. */\n  returnAmounts?: OrderMoneyAmounts;\n}\n\nexport const orderReturnSchema: Schema<OrderReturn> = object({\n  uid: ['uid', optional(string())],\n  sourceOrderId: ['source_order_id', optional(string())],\n  returnLineItems: [\n    'return_line_items',\n    optional(array(lazy(() => orderReturnLineItemSchema))),\n  ],\n  returnServiceCharges: [\n    'return_service_charges',\n    optional(array(lazy(() => orderReturnServiceChargeSchema))),\n  ],\n  returnTaxes: [\n    'return_taxes',\n    optional(array(lazy(() => orderReturnTaxSchema))),\n  ],\n  returnDiscounts: [\n    'return_discounts',\n    optional(array(lazy(() => orderReturnDiscountSchema))),\n  ],\n  roundingAdjustment: [\n    'rounding_adjustment',\n    optional(lazy(() => orderRoundingAdjustmentSchema)),\n  ],\n  returnAmounts: [\n    'return_amounts',\n    optional(lazy(() => orderMoneyAmountsSchema)),\n  ],\n});\n","import { object, Schema, string } from '../schema';\n\n/**\n * Represents a reward that may be applied to an order if the necessary\n * reward tier criteria are met. Rewards are created through the Loyalty API.\n */\nexport interface OrderReward {\n  /** The identifier of the reward. */\n  id: string;\n  /** The identifier of the reward tier corresponding to this reward. */\n  rewardTierId: string;\n}\n\nexport const orderRewardSchema: Schema<OrderReward> = object({\n  id: ['id', string()],\n  rewardTierId: ['reward_tier_id', string()],\n});\n","import {\n  array,\n  boolean,\n  dict,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  OrderLineItemAppliedTax,\n  orderLineItemAppliedTaxSchema,\n} from './orderLineItemAppliedTax';\n\n/** Represents a service charge applied to an order. */\nexport interface OrderServiceCharge {\n  /** Unique ID that identifies the service charge only within this order. */\n  uid?: string;\n  /** The name of the service charge. */\n  name?: string;\n  /** The catalog object ID referencing the service charge [CatalogObject](#type-catalogobject). */\n  catalogObjectId?: string;\n  /**\n   * The service charge percentage as a string representation of a\n   * decimal number. For example, `\"7.25\"` indicates a service charge of 7.25%.\n   * Exactly 1 of `percentage` or `amount_money` should be set.\n   */\n  percentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appliedMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents a phase in the process of calculating order totals.\n   * Service charges are applied __after__ the indicated phase.\n   * [Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)\n   */\n  calculationPhase?: string;\n  /**\n   * Indicates whether the service charge can be taxed. If set to `true`,\n   * order-level taxes automatically apply to the service charge. Note that\n   * service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.\n   */\n  taxable?: boolean;\n  /**\n   * The list of references to taxes applied to this service charge. Each\n   * `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level\n   * `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied\n   * is populated.\n   * An `OrderLineItemAppliedTax` will be automatically created on every taxable service charge\n   * for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records\n   * for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable\n   * service charge.  Taxable service charges have the `taxable` field set to true and calculated\n   * in the `SUBTOTAL_PHASE`.\n   * To change the amount of a tax, modify the referenced top-level tax.\n   */\n  appliedTaxes?: OrderLineItemAppliedTax[];\n  /**\n   * Application-defined data attached to this service charge. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (personally\n   * identifiable information, card details, etc.).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a max length of 255 characters.\n   * An application may have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.\n   */\n  metadata?: Record<string, string>;\n}\n\nexport const orderServiceChargeSchema: Schema<OrderServiceCharge> = object({\n  uid: ['uid', optional(string())],\n  name: ['name', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  percentage: ['percentage', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  appliedMoney: ['applied_money', optional(lazy(() => moneySchema))],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  calculationPhase: ['calculation_phase', optional(string())],\n  taxable: ['taxable', optional(boolean())],\n  appliedTaxes: [\n    'applied_taxes',\n    optional(array(lazy(() => orderLineItemAppliedTaxSchema))),\n  ],\n  metadata: ['metadata', optional(dict(string()))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents the origination details of an order. */\nexport interface OrderSource {\n  /**\n   * The name used to identify the place (physical or digital) that an order originates.\n   * If unset, the name defaults to the name of the application that created the order.\n   */\n  name?: string;\n}\n\nexport const orderSourceSchema: Schema<OrderSource> = object({\n  name: ['name', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents an additional recipient (other than the merchant) receiving a portion of this tender. */\nexport interface AdditionalRecipient {\n  /** The location ID for a recipient (other than the merchant) receiving a portion of this tender. */\n  locationId: string;\n  /** The description of the additional recipient. */\n  description: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /** The unique ID for this [AdditionalRecipientReceivable](#type-additionalrecipientreceivable), assigned by the server. */\n  receivableId?: string;\n}\n\nexport const additionalRecipientSchema: Schema<AdditionalRecipient> = object({\n  locationId: ['location_id', string()],\n  description: ['description', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  receivableId: ['receivable_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  AdditionalRecipient,\n  additionalRecipientSchema,\n} from './additionalRecipient';\nimport { Money, moneySchema } from './money';\n\n/** Represents a refund processed for a Square transaction. */\nexport interface Refund {\n  /** The refund's unique ID. */\n  id: string;\n  /** The ID of the refund's associated location. */\n  locationId: string;\n  /** The ID of the transaction that the refunded tender is part of. */\n  transactionId: string;\n  /** The ID of the refunded tender. */\n  tenderId: string;\n  /** The timestamp for when the refund was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The reason for the refund being issued. */\n  reason: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /** Indicates a refund's current status. */\n  status: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  processingFeeMoney?: Money;\n  /**\n   * Additional recipients (other than the merchant) receiving a portion of this refund.\n   * For example, fees assessed on a refund of a purchase by a third party integration.\n   */\n  additionalRecipients?: AdditionalRecipient[];\n}\n\nexport const refundSchema: Schema<Refund> = object({\n  id: ['id', string()],\n  locationId: ['location_id', string()],\n  transactionId: ['transaction_id', string()],\n  tenderId: ['tender_id', string()],\n  createdAt: ['created_at', optional(string())],\n  reason: ['reason', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  status: ['status', string()],\n  processingFeeMoney: [\n    'processing_fee_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => additionalRecipientSchema))),\n  ],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/**\n * Represents the payment details of a card to be used for payments. These\n * details are determined by the `card_nonce` generated by `SqPaymentForm`.\n */\nexport interface Card {\n  /** Unique ID for this card. Generated by Square. */\n  id?: string;\n  /** Indicates a card's brand, such as `VISA` or `MASTERCARD`. */\n  cardBrand?: string;\n  /** The last 4 digits of the card number. */\n  last4?: string;\n  /** The expiration month of the associated card as an integer between 1 and 12. */\n  expMonth?: number;\n  /** The four-digit year of the card's expiration date. */\n  expYear?: number;\n  /** The name of the cardholder. */\n  cardholderName?: string;\n  /** Represents a physical address. */\n  billingAddress?: Address;\n  /**\n   * __Not currently set.__ Intended as a Square-assigned identifier, based\n   * on the card number, to identify the card across multiple locations within a\n   * single application.\n   */\n  fingerprint?: string;\n  /** Indicates a card's type, such as `CREDIT` or `DEBIT`. */\n  cardType?: string;\n  /** Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`. */\n  prepaidType?: string;\n  /**\n   * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API\n   * returns this field.\n   */\n  bin?: string;\n}\n\nexport const cardSchema: Schema<Card> = object({\n  id: ['id', optional(string())],\n  cardBrand: ['card_brand', optional(string())],\n  last4: ['last_4', optional(string())],\n  expMonth: ['exp_month', optional(number())],\n  expYear: ['exp_year', optional(number())],\n  cardholderName: ['cardholder_name', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  fingerprint: ['fingerprint', optional(string())],\n  cardType: ['card_type', optional(string())],\n  prepaidType: ['prepaid_type', optional(string())],\n  bin: ['bin', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Card, cardSchema } from './card';\n\n/** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */\nexport interface TenderCardDetails {\n  /** Indicates the card transaction's current status. */\n  status?: string;\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the `card_nonce` generated by `SqPaymentForm`.\n   */\n  card?: Card;\n  /** Indicates the method used to enter the card's details. */\n  entryMethod?: string;\n}\n\nexport const tenderCardDetailsSchema: Schema<TenderCardDetails> = object({\n  status: ['status', optional(string())],\n  card: ['card', optional(lazy(() => cardSchema))],\n  entryMethod: ['entry_method', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents the details of a tender with `type` `CASH`. */\nexport interface TenderCashDetails {\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  buyerTenderedMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  changeBackMoney?: Money;\n}\n\nexport const tenderCashDetailsSchema: Schema<TenderCashDetails> = object({\n  buyerTenderedMoney: [\n    'buyer_tendered_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  changeBackMoney: ['change_back_money', optional(lazy(() => moneySchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  AdditionalRecipient,\n  additionalRecipientSchema,\n} from './additionalRecipient';\nimport { Money, moneySchema } from './money';\nimport {\n  TenderCardDetails,\n  tenderCardDetailsSchema,\n} from './tenderCardDetails';\nimport {\n  TenderCashDetails,\n  tenderCashDetailsSchema,\n} from './tenderCashDetails';\n\n/** Represents a tender (i.e., a method of payment) used in a Square transaction. */\nexport interface Tender {\n  /** The tender's unique ID. */\n  id?: string;\n  /** The ID of the transaction's associated location. */\n  locationId?: string;\n  /** The ID of the tender's associated transaction. */\n  transactionId?: string;\n  /** The timestamp for when the tender was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** An optional note associated with the tender at the time of payment. */\n  note?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  processingFeeMoney?: Money;\n  /**\n   * If the tender is associated with a customer or represents a customer's card on file,\n   * this is the ID of the associated customer.\n   */\n  customerId?: string;\n  /** Indicates a tender's type. */\n  type: string;\n  /** Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD` */\n  cardDetails?: TenderCardDetails;\n  /** Represents the details of a tender with `type` `CASH`. */\n  cashDetails?: TenderCashDetails;\n  /**\n   * Additional recipients (other than the merchant) receiving a portion of this tender.\n   * For example, fees assessed on the purchase by a third party integration.\n   */\n  additionalRecipients?: AdditionalRecipient[];\n  /**\n   * The ID of the [Payment](#type-payment) that corresponds to this tender.\n   * This value is only present for payments created with the v2 Payments API.\n   */\n  paymentId?: string;\n}\n\nexport const tenderSchema: Schema<Tender> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  transactionId: ['transaction_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  note: ['note', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  processingFeeMoney: [\n    'processing_fee_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  customerId: ['customer_id', optional(string())],\n  type: ['type', string()],\n  cardDetails: ['card_details', optional(lazy(() => tenderCardDetailsSchema))],\n  cashDetails: ['cash_details', optional(lazy(() => tenderCashDetailsSchema))],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => additionalRecipientSchema))),\n  ],\n  paymentId: ['payment_id', optional(string())],\n});\n","import {\n  array,\n  dict,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\nimport { OrderFulfillment, orderFulfillmentSchema } from './orderFulfillment';\nimport { OrderLineItem, orderLineItemSchema } from './orderLineItem';\nimport {\n  OrderLineItemDiscount,\n  orderLineItemDiscountSchema,\n} from './orderLineItemDiscount';\nimport { OrderLineItemTax, orderLineItemTaxSchema } from './orderLineItemTax';\nimport {\n  OrderMoneyAmounts,\n  orderMoneyAmountsSchema,\n} from './orderMoneyAmounts';\nimport {\n  OrderPricingOptions,\n  orderPricingOptionsSchema,\n} from './orderPricingOptions';\nimport { OrderReturn, orderReturnSchema } from './orderReturn';\nimport { OrderReward, orderRewardSchema } from './orderReward';\nimport {\n  OrderRoundingAdjustment,\n  orderRoundingAdjustmentSchema,\n} from './orderRoundingAdjustment';\nimport {\n  OrderServiceCharge,\n  orderServiceChargeSchema,\n} from './orderServiceCharge';\nimport { OrderSource, orderSourceSchema } from './orderSource';\nimport { Refund, refundSchema } from './refund';\nimport { Tender, tenderSchema } from './tender';\n\n/**\n * Contains all information related to a single order to process with Square,\n * including line items that specify the products to purchase. Order objects also\n * include information on any associated tenders, refunds, and returns.\n * All Connect V2 Transactions have all been converted to Orders including all associated\n * itemization data.\n */\nexport interface Order {\n  /** The order's unique ID. */\n  id?: string;\n  /** The ID of the merchant location this order is associated with. */\n  locationId: string;\n  /**\n   * A client specified identifier to associate an entity in another system\n   * with this order.\n   */\n  referenceId?: string;\n  /** Represents the origination details of an order. */\n  source?: OrderSource;\n  /** The [Customer](#type-customer) ID of the customer associated with the order. */\n  customerId?: string;\n  /** The line items included in the order. */\n  lineItems?: OrderLineItem[];\n  /**\n   * The list of all taxes associated with the order.\n   * Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an\n   * `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes\n   * with `ORDER` scope, the server will generate an `OrderLineItemAppliedTax` for every line item.\n   * On reads, each tax in the list will include the total amount of that tax applied to the order.\n   * __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, usage of the deprecated\n   * `line_items.taxes` field will result in an error. Please use `line_items.applied_taxes`\n   * instead.\n   */\n  taxes?: OrderLineItemTax[];\n  /**\n   * The list of all discounts associated with the order.\n   * Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,\n   * an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.\n   * For discounts with `ORDER` scope, the server will generate an `OrderLineItemAppliedDiscount`\n   * for every line item.\n   * __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, usage of the deprecated\n   * `line_items.discounts` field will result in an error. Please use `line_items.applied_discounts`\n   * instead.\n   */\n  discounts?: OrderLineItemDiscount[];\n  /** A list of service charges applied to the order. */\n  serviceCharges?: OrderServiceCharge[];\n  /**\n   * Details on order fulfillment.\n   * Orders can only be created with at most one fulfillment. However, orders returned\n   * by the API may contain multiple fulfillments.\n   */\n  fulfillments?: OrderFulfillment[];\n  /**\n   * Collection of items from sale Orders being returned in this one. Normally part of an\n   * Itemized Return or Exchange.  There will be exactly one `Return` object per sale Order being\n   * referenced.\n   */\n  returns?: OrderReturn[];\n  /** A collection of various money amounts. */\n  returnAmounts?: OrderMoneyAmounts;\n  /** A collection of various money amounts. */\n  netAmounts?: OrderMoneyAmounts;\n  /**\n   * A rounding adjustment of the money being returned. Commonly used to apply Cash Rounding\n   * when the minimum unit of account is smaller than the lowest physical denomination of currency.\n   */\n  roundingAdjustment?: OrderRoundingAdjustment;\n  /** The Tenders which were used to pay for the Order. */\n  tenders?: Tender[];\n  /** The Refunds that are part of this Order. */\n  refunds?: Refund[];\n  /**\n   * Application-defined data attached to this order. Metadata fields are intended\n   * to store descriptive references or associations with an entity in another system or store brief\n   * information about the object. Square does not process this field; it only stores and returns it\n   * in relevant API calls. Do not use metadata to store any sensitive information (personally\n   * identifiable information, card details, etc.).\n   * Keys written by applications must be 60 characters or less and must be in the character set\n   * `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square. These keys are prefixed\n   * with a namespace, separated from the key with a ':' character.\n   * Values have a max length of 255 characters.\n   * An application may have up to 10 entries per metadata field.\n   * Entries written by applications are private and can only be read or modified by the same\n   * application.\n   * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.\n   */\n  metadata?: Record<string, string>;\n  /** Timestamp for when the order was created. In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  createdAt?: string;\n  /** Timestamp for when the order was last updated. In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  updatedAt?: string;\n  /** Timestamp for when the order reached a terminal [state](#property-state). In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\". */\n  closedAt?: string;\n  /** The state of the order. */\n  state?: string;\n  /**\n   * Version number which is incremented each time an update is committed to the order.\n   * Orders that were not created through the API will not include a version and\n   * thus cannot be updated.\n   * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).\n   */\n  version?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTaxMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalTipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalServiceChargeMoney?: Money;\n  /**\n   * Pricing options for an order. The options affect how the order's price is calculated.\n   * They can be used, for example, to apply automatic price adjustments that are based on pre-configured\n   * [pricing rules](https://developer.squareup.com/docs/reference/square/objects/CatalogPricingRule).\n   */\n  pricingOptions?: OrderPricingOptions;\n  /** A set-like list of rewards that have been added to the order. */\n  rewards?: OrderReward[];\n}\n\nexport const orderSchema: Schema<Order> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', string()],\n  referenceId: ['reference_id', optional(string())],\n  source: ['source', optional(lazy(() => orderSourceSchema))],\n  customerId: ['customer_id', optional(string())],\n  lineItems: ['line_items', optional(array(lazy(() => orderLineItemSchema)))],\n  taxes: ['taxes', optional(array(lazy(() => orderLineItemTaxSchema)))],\n  discounts: [\n    'discounts',\n    optional(array(lazy(() => orderLineItemDiscountSchema))),\n  ],\n  serviceCharges: [\n    'service_charges',\n    optional(array(lazy(() => orderServiceChargeSchema))),\n  ],\n  fulfillments: [\n    'fulfillments',\n    optional(array(lazy(() => orderFulfillmentSchema))),\n  ],\n  returns: ['returns', optional(array(lazy(() => orderReturnSchema)))],\n  returnAmounts: [\n    'return_amounts',\n    optional(lazy(() => orderMoneyAmountsSchema)),\n  ],\n  netAmounts: ['net_amounts', optional(lazy(() => orderMoneyAmountsSchema))],\n  roundingAdjustment: [\n    'rounding_adjustment',\n    optional(lazy(() => orderRoundingAdjustmentSchema)),\n  ],\n  tenders: ['tenders', optional(array(lazy(() => tenderSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => refundSchema)))],\n  metadata: ['metadata', optional(dict(string()))],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  closedAt: ['closed_at', optional(string())],\n  state: ['state', optional(string())],\n  version: ['version', optional(number())],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => moneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  totalTipMoney: ['total_tip_money', optional(lazy(() => moneySchema))],\n  totalServiceChargeMoney: [\n    'total_service_charge_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  pricingOptions: [\n    'pricing_options',\n    optional(lazy(() => orderPricingOptionsSchema)),\n  ],\n  rewards: ['rewards', optional(array(lazy(() => orderRewardSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Order, orderSchema } from './order';\n\nexport interface CreateOrderRequest {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** The ID of the business location to associate the order with. */\n  locationId?: string;\n  /**\n   * A value you specify that uniquely identifies this\n   * order among orders you've created.\n   * If you're unsure whether a particular order was created successfully,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate orders.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey?: string;\n}\n\nexport const createOrderRequestSchema: Schema<CreateOrderRequest> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  locationId: ['location_id', optional(string())],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  ChargeRequestAdditionalRecipient,\n  chargeRequestAdditionalRecipientSchema,\n} from './chargeRequestAdditionalRecipient';\nimport {\n  CreateOrderRequest,\n  createOrderRequestSchema,\n} from './createOrderRequest';\n\n/**\n * Defines the parameters that can be included in the body of\n * a request to the __CreateCheckout__ endpoint.\n */\nexport interface CreateCheckoutRequest {\n  /**\n   * A unique string that identifies this checkout among others\n   * you've created. It can be any valid string but must be unique for every\n   * order sent to Square Checkout for a given location ID.\n   * The idempotency key is used to avoid processing the same order more than\n   * once. If you're unsure whether a particular checkout was created\n   * successfully, you can reattempt it with the same idempotency key and all the\n   * same other parameters without worrying about creating duplicates.\n   * We recommend using a random number/string generator native to the language\n   * you are working in to generate strings for your idempotency keys.\n   * See the [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency) guide for more information.\n   */\n  idempotencyKey: string;\n  order: CreateOrderRequest;\n  /**\n   * If `true`, Square Checkout will collect shipping information on your\n   * behalf and store that information with the transaction information in your\n   * Square Dashboard.\n   * Default: `false`.\n   */\n  askForShippingAddress?: boolean;\n  /**\n   * The email address to display on the Square Checkout confirmation page\n   * and confirmation email that the buyer can use to contact the merchant.\n   * If this value is not set, the confirmation page and email will display the\n   * primary email address associated with the merchant's Square account.\n   * Default: none; only exists if explicitly set.\n   */\n  merchantSupportEmail?: string;\n  /**\n   * If provided, the buyer's email is pre-populated on the checkout page\n   * as an editable text field.\n   * Default: none; only exists if explicitly set.\n   */\n  prePopulateBuyerEmail?: string;\n  /** Represents a physical address. */\n  prePopulateShippingAddress?: Address;\n  /**\n   * The URL to redirect to after checkout is completed with `checkoutId`,\n   * Square's `orderId`, `transactionId`, and `referenceId` appended as URL\n   * parameters. For example, if the provided redirect_url is\n   * `http://www.example.com/order-complete`, a successful transaction redirects\n   * the customer to:\n   * `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`\n   * If you do not provide a redirect URL, Square Checkout will display an order\n   * confirmation page on your behalf; however Square strongly recommends that\n   * you provide a redirect URL so you can verify the transaction results and\n   * finalize the order through your existing/normal confirmation workflow.\n   * Default: none; only exists if explicitly set.\n   */\n  redirectUrl?: string;\n  /**\n   * The basic primitive of multi-party transaction. The value is optional.\n   * The transaction facilitated by you can be split from here.\n   * If you provide this value, the `amount_money` value in your additional_recipients\n   * must not be more than 90% of the `total_money` calculated by Square for your order.\n   * The `location_id` must be the valid location of the app owner merchant.\n   * This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.\n   * This field is currently not supported in sandbox.\n   */\n  additionalRecipients?: ChargeRequestAdditionalRecipient[];\n  /**\n   * An optional note to associate with the checkout object.\n   * This value cannot exceed 60 characters.\n   */\n  note?: string;\n}\n\nexport const createCheckoutRequestSchema: Schema<CreateCheckoutRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    order: ['order', lazy(() => createOrderRequestSchema)],\n    askForShippingAddress: ['ask_for_shipping_address', optional(boolean())],\n    merchantSupportEmail: ['merchant_support_email', optional(string())],\n    prePopulateBuyerEmail: ['pre_populate_buyer_email', optional(string())],\n    prePopulateShippingAddress: [\n      'pre_populate_shipping_address',\n      optional(lazy(() => addressSchema)),\n    ],\n    redirectUrl: ['redirect_url', optional(string())],\n    additionalRecipients: [\n      'additional_recipients',\n      optional(array(lazy(() => chargeRequestAdditionalRecipientSchema))),\n    ],\n    note: ['note', optional(string())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  AdditionalRecipient,\n  additionalRecipientSchema,\n} from './additionalRecipient';\nimport { Address, addressSchema } from './address';\nimport { Order, orderSchema } from './order';\n\n/**\n * Square Checkout lets merchants accept online payments for supported\n * payment types using a checkout workflow hosted on squareup.com.\n */\nexport interface Checkout {\n  /** ID generated by Square Checkout when a new checkout is requested. */\n  id?: string;\n  /**\n   * The URL that the buyer's browser should be redirected to after the\n   * checkout is completed.\n   */\n  checkoutPageUrl?: string;\n  /**\n   * If `true`, Square Checkout will collect shipping information on your\n   * behalf and store that information with the transaction information in your\n   * Square Dashboard.\n   * Default: `false`.\n   */\n  askForShippingAddress?: boolean;\n  /**\n   * The email address to display on the Square Checkout confirmation page\n   * and confirmation email that the buyer can use to contact the merchant.\n   * If this value is not set, the confirmation page and email will display the\n   * primary email address associated with the merchant's Square account.\n   * Default: none; only exists if explicitly set.\n   */\n  merchantSupportEmail?: string;\n  /**\n   * If provided, the buyer's email is pre-populated on the checkout page\n   * as an editable text field.\n   * Default: none; only exists if explicitly set.\n   */\n  prePopulateBuyerEmail?: string;\n  /** Represents a physical address. */\n  prePopulateShippingAddress?: Address;\n  /**\n   * The URL to redirect to after checkout is completed with `checkoutId`,\n   * Square's `orderId`, `transactionId`, and `referenceId` appended as URL\n   * parameters. For example, if the provided redirect_url is\n   * `http://www.example.com/order-complete`, a successful transaction redirects\n   * the customer to:\n   * `http://www.example.com/order-complete?checkoutId=xxxxxx&orderId=xxxxxx&referenceId=xxxxxx&transactionId=xxxxxx`\n   * If you do not provide a redirect URL, Square Checkout will display an order\n   * confirmation page on your behalf; however Square strongly recommends that\n   * you provide a redirect URL so you can verify the transaction results and\n   * finalize the order through your existing/normal confirmation workflow.\n   */\n  redirectUrl?: string;\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** The time when the checkout was created, in RFC 3339 format. */\n  createdAt?: string;\n  /**\n   * Additional recipients (other than the merchant) receiving a portion of this checkout.\n   * For example, fees assessed on the purchase by a third party integration.\n   */\n  additionalRecipients?: AdditionalRecipient[];\n}\n\nexport const checkoutSchema: Schema<Checkout> = object({\n  id: ['id', optional(string())],\n  checkoutPageUrl: ['checkout_page_url', optional(string())],\n  askForShippingAddress: ['ask_for_shipping_address', optional(boolean())],\n  merchantSupportEmail: ['merchant_support_email', optional(string())],\n  prePopulateBuyerEmail: ['pre_populate_buyer_email', optional(string())],\n  prePopulateShippingAddress: [\n    'pre_populate_shipping_address',\n    optional(lazy(() => addressSchema)),\n  ],\n  redirectUrl: ['redirect_url', optional(string())],\n  order: ['order', optional(lazy(() => orderSchema))],\n  createdAt: ['created_at', optional(string())],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => additionalRecipientSchema))),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Checkout, checkoutSchema } from './checkout';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the __CreateCheckout__ endpoint.\n */\nexport interface CreateCheckoutResponse {\n  /**\n   * Square Checkout lets merchants accept online payments for supported\n   * payment types using a checkout workflow hosted on squareup.com.\n   */\n  checkout?: Checkout;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createCheckoutResponseSchema: Schema<CreateCheckoutResponse> = object(\n  {\n    checkout: ['checkout', optional(lazy(() => checkoutSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateCheckoutRequest,\n  createCheckoutRequestSchema,\n} from '../models/createCheckoutRequest';\nimport {\n  CreateCheckoutResponse,\n  createCheckoutResponseSchema,\n} from '../models/createCheckoutResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CheckoutApi extends BaseApi {\n  /**\n   * Links a `checkoutId` to a `checkout_page_url` that customers will\n   * be directed to in order to provide their payment information using a\n   * payment processing workflow hosted on connect.squareup.com.\n   *\n   * @param locationId  The ID of the business location to associate the checkout with.\n   * @param body        An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCheckout(\n    locationId: string,\n    body: CreateCheckoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCheckoutResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, createCheckoutRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/checkouts`;\n    return req.callAsJson(createCheckoutResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a group of customer profiles.\n * Customer groups can be created, modified, and have their membership defined either via\n * the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.\n */\nexport interface CustomerGroup {\n  /** Unique Square-generated ID for the customer group. */\n  id?: string;\n  /** Name of the customer group. */\n  name: string;\n  /** The timestamp when the customer group was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timesamp when the customer group was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const customerGroupSchema: Schema<CustomerGroup> = object({\n  id: ['id', optional(string())],\n  name: ['name', string()],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\n\n/**\n * Defines the body parameters that can be provided in a request to the\n * [CreateCustomerGroup](#endpoint-createcustomegroup) endpoint.\n */\nexport interface CreateCustomerGroupRequest {\n  /**\n   * The idempotency key for the request. See the [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency)\n   * guide for more information.\n   */\n  idempotencyKey?: string;\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, modified, and have their membership defined either via\n   * the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.\n   */\n  group: CustomerGroup;\n}\n\nexport const createCustomerGroupRequestSchema: Schema<CreateCustomerGroupRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    group: ['group', lazy(() => customerGroupSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CreateCustomerGroup](#endpoint-createcustomergroup) endpoint.\n * One of `errors` or `group` is present in a given response (never both).\n */\nexport interface CreateCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, modified, and have their membership defined either via\n   * the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.\n   */\n  group?: CustomerGroup;\n}\n\nexport const createCustomerGroupResponseSchema: Schema<CreateCustomerGroupResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    group: ['group', optional(lazy(() => customerGroupSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [DeleteCustomerGroup](#endpoint-deletecustomergroup) endpoint.\n */\nexport interface DeleteCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteCustomerGroupResponseSchema: Schema<DeleteCustomerGroupResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListCustomerGroups](#endpoint-listcustomergroups) endpoint.\n * One of `errors` or `groups` is present in a given response (never both).\n */\nexport interface ListCustomerGroupsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** A list of customer groups belonging to the current merchant. */\n  groups?: CustomerGroup[];\n  /**\n   * A pagination cursor to retrieve the next set of results for your\n   * original query to the endpoint. This value is present only if the request\n   * succeeded and additional results are available.\n   * See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listCustomerGroupsResponseSchema: Schema<ListCustomerGroupsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    groups: ['groups', optional(array(lazy(() => customerGroupSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RetrieveCustomerGroup](#endpoint-retrievecustomergroup) endpoint.\n * One of `errors` or `group` is present in a given response (never both).\n */\nexport interface RetrieveCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, modified, and have their membership defined either via\n   * the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.\n   */\n  group?: CustomerGroup;\n}\n\nexport const retrieveCustomerGroupResponseSchema: Schema<RetrieveCustomerGroupResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    group: ['group', optional(lazy(() => customerGroupSchema))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\n\n/**\n * Defines the body parameters that can be provided in a request to the\n * [UpdateCustomerGroup](#endpoint-updatecustomergroup) endpoint.\n */\nexport interface UpdateCustomerGroupRequest {\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, modified, and have their membership defined either via\n   * the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.\n   */\n  group: CustomerGroup;\n}\n\nexport const updateCustomerGroupRequestSchema: Schema<UpdateCustomerGroupRequest> = object(\n  { group: ['group', lazy(() => customerGroupSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerGroup, customerGroupSchema } from './customerGroup';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [UpdateCustomerGroup](#endpoint-updatecustomergroup) endpoint.\n * One of `errors` or `group` is present in a given response (never both).\n */\nexport interface UpdateCustomerGroupResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles.\n   * Customer groups can be created, modified, and have their membership defined either via\n   * the Customers API or within Customer Directory in the Square Dashboard or Point of Sale.\n   */\n  group?: CustomerGroup;\n}\n\nexport const updateCustomerGroupResponseSchema: Schema<UpdateCustomerGroupResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    group: ['group', optional(lazy(() => customerGroupSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateCustomerGroupRequest,\n  createCustomerGroupRequestSchema,\n} from '../models/createCustomerGroupRequest';\nimport {\n  CreateCustomerGroupResponse,\n  createCustomerGroupResponseSchema,\n} from '../models/createCustomerGroupResponse';\nimport {\n  DeleteCustomerGroupResponse,\n  deleteCustomerGroupResponseSchema,\n} from '../models/deleteCustomerGroupResponse';\nimport {\n  ListCustomerGroupsResponse,\n  listCustomerGroupsResponseSchema,\n} from '../models/listCustomerGroupsResponse';\nimport {\n  RetrieveCustomerGroupResponse,\n  retrieveCustomerGroupResponseSchema,\n} from '../models/retrieveCustomerGroupResponse';\nimport {\n  UpdateCustomerGroupRequest,\n  updateCustomerGroupRequestSchema,\n} from '../models/updateCustomerGroupRequest';\nimport {\n  UpdateCustomerGroupResponse,\n  updateCustomerGroupResponseSchema,\n} from '../models/updateCustomerGroupResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CustomerGroupsApi extends BaseApi {\n  /**\n   * Retrieves the list of customer groups of a business.\n   *\n   * @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                         retrieve the next set of results for your original query.  See the [Pagination\n   *                         guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more\n   *                         information.\n   * @return Response from the API call\n   */\n  async listCustomerGroups(\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCustomerGroupsResponse>> {\n    const req = this.createRequest('GET', '/v2/customers/groups');\n    const mapped = req.prepareArgs({ cursor: [cursor, optional(string())] });\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listCustomerGroupsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new customer group for a business.\n   *\n   * The request must include the `name` value of the group.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCustomerGroup(\n    body: CreateCustomerGroupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCustomerGroupResponse>> {\n    const req = this.createRequest('POST', '/v2/customers/groups');\n    const mapped = req.prepareArgs({\n      body: [body, createCustomerGroupRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createCustomerGroupResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a customer group as identified by the `group_id` value.\n   *\n   * @param groupId  The ID of the customer group to delete.\n   * @return Response from the API call\n   */\n  async deleteCustomerGroup(\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCustomerGroupResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ groupId: [groupId, string()] });\n    req.appendTemplatePath`/v2/customers/groups/${mapped.groupId}`;\n    return req.callAsJson(deleteCustomerGroupResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a specific customer group as identified by the `group_id` value.\n   *\n   * @param groupId  The ID of the customer group to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveCustomerGroup(\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCustomerGroupResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ groupId: [groupId, string()] });\n    req.appendTemplatePath`/v2/customers/groups/${mapped.groupId}`;\n    return req.callAsJson(retrieveCustomerGroupResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a customer group as identified by the `group_id` value.\n   *\n   * @param groupId  The ID of the customer group to update.\n   * @param body     An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateCustomerGroup(\n    groupId: string,\n    body: UpdateCustomerGroupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateCustomerGroupResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      groupId: [groupId, string()],\n      body: [body, updateCustomerGroupRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/customers/groups/${mapped.groupId}`;\n    return req.callAsJson(updateCustomerGroupResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [AddGroupToCustomer](#endpoint-addgrouptocustomer) endpoint.\n */\nexport interface AddGroupToCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const addGroupToCustomerResponseSchema: Schema<AddGroupToCustomerResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/**\n * Defines the fields that are included in the request body of a request\n * to the CreateCustomerCard endpoint.\n */\nexport interface CreateCustomerCardRequest {\n  /**\n   * A card nonce representing the credit card to link to the customer.\n   * Card nonces are generated by the Square Payment Form when customers enter\n   * their card information. See\n   * [Embedding the payment form](https://developer.squareup.com/docs/payment-form/payment-form-walkthrough) for\n   * more information.\n   * __NOTE:__ Card nonces generated by digital wallets (e.g., Apple Pay)\n   * cannot be used to create a customer card.\n   */\n  cardNonce: string;\n  /** Represents a physical address. */\n  billingAddress?: Address;\n  /** The full name printed on the credit card. */\n  cardholderName?: string;\n  /**\n   * An identifying token generated by `SqPaymentForm.verifyBuyer()`.\n   * Verification tokens encapsulate customer device information and 3-D Secure\n   * challenge results to indicate that Square has verified the buyer identity.\n   */\n  verificationToken?: string;\n}\n\nexport const createCustomerCardRequestSchema: Schema<CreateCustomerCardRequest> = object(\n  {\n    cardNonce: ['card_nonce', string()],\n    billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n    cardholderName: ['cardholder_name', optional(string())],\n    verificationToken: ['verification_token', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Card, cardSchema } from './card';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the CreateCustomerCard endpoint.\n * One of `errors` or `card` is present in a given response (never both).\n */\nexport interface CreateCustomerCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the `card_nonce` generated by `SqPaymentForm`.\n   */\n  card?: Card;\n}\n\nexport const createCustomerCardResponseSchema: Schema<CreateCustomerCardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    card: ['card', optional(lazy(() => cardSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/**\n * Defines the body parameters that can be provided in a request to the\n * CreateCustomer endpoint.\n */\nexport interface CreateCustomerRequest {\n  /**\n   * The idempotency key for the request.\tSee the\n   * [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency) guide for more information.\n   */\n  idempotencyKey?: string;\n  /** The given (i.e., first) name associated with the customer profile. */\n  givenName?: string;\n  /** The family (i.e., last) name associated with the customer profile. */\n  familyName?: string;\n  /** A business name associated with the customer profile. */\n  companyName?: string;\n  /** A nickname for the customer profile. */\n  nickname?: string;\n  /** The email address associated with the customer profile. */\n  emailAddress?: string;\n  /** Represents a physical address. */\n  address?: Address;\n  /** The 11-digit phone number associated with the customer profile. */\n  phoneNumber?: string;\n  /**\n   * An optional, second ID used to associate the customer profile with an\n   * entity in another system.\n   */\n  referenceId?: string;\n  /** A custom note associated with the customer profile. */\n  note?: string;\n  /**\n   * The birthday associated with the customer profile, in RFC 3339 format.\n   * Year is optional, timezone and times are not allowed.\n   * For example: `0000-09-01T00:00:00-00:00` indicates a birthday on September 1st.\n   * `1998-09-01T00:00:00-00:00` indications a birthday on September 1st __1998__.\n   */\n  birthday?: string;\n}\n\nexport const createCustomerRequestSchema: Schema<CreateCustomerRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    givenName: ['given_name', optional(string())],\n    familyName: ['family_name', optional(string())],\n    companyName: ['company_name', optional(string())],\n    nickname: ['nickname', optional(string())],\n    emailAddress: ['email_address', optional(string())],\n    address: ['address', optional(lazy(() => addressSchema))],\n    phoneNumber: ['phone_number', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    note: ['note', optional(string())],\n    birthday: ['birthday', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Contains some brief information about a Customer Group with its identifier included. */\nexport interface CustomerGroupInfo {\n  /** The ID of the Customer Group. */\n  id: string;\n  /** The name of the Customer Group. */\n  name: string;\n}\n\nexport const customerGroupInfoSchema: Schema<CustomerGroupInfo> = object({\n  id: ['id', string()],\n  name: ['name', string()],\n});\n","import { boolean, object, optional, Schema } from '../schema';\n\n/** Represents communication preferences for the customer profile. */\nexport interface CustomerPreferences {\n  /** The customer has unsubscribed from receiving marketing campaign emails. */\n  emailUnsubscribed?: boolean;\n}\n\nexport const customerPreferencesSchema: Schema<CustomerPreferences> = object({\n  emailUnsubscribed: ['email_unsubscribed', optional(boolean())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Card, cardSchema } from './card';\nimport {\n  CustomerGroupInfo,\n  customerGroupInfoSchema,\n} from './customerGroupInfo';\nimport {\n  CustomerPreferences,\n  customerPreferencesSchema,\n} from './customerPreferences';\n\n/**\n * Represents a Square customer profile, which can have one or more\n * cards on file associated with it.\n */\nexport interface Customer {\n  /** A unique Square-assigned ID for the customer profile. */\n  id?: string;\n  /** The timestamp when the customer profile was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the customer profile was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** Payment details of cards stored on file for the customer profile. */\n  cards?: Card[];\n  /** The given (i.e., first) name associated with the customer profile. */\n  givenName?: string;\n  /** The family (i.e., last) name associated with the customer profile. */\n  familyName?: string;\n  /** A nickname for the customer profile. */\n  nickname?: string;\n  /** A business name associated with the customer profile. */\n  companyName?: string;\n  /** The email address associated with the customer profile. */\n  emailAddress?: string;\n  /** Represents a physical address. */\n  address?: Address;\n  /** The 11-digit phone number associated with the customer profile. */\n  phoneNumber?: string;\n  /**\n   * The birthday associated with the customer profile, in RFC 3339 format.\n   * Year is optional, timezone and times are not allowed.\n   * For example: `0000-09-01T00:00:00-00:00` indicates a birthday on September 1st.\n   * `1998-09-01T00:00:00-00:00` indications a birthday on September 1st __1998__.\n   */\n  birthday?: string;\n  /**\n   * An optional, second ID used to associate the customer profile with an\n   * entity in another system.\n   */\n  referenceId?: string;\n  /** A custom note associated with the customer profile. */\n  note?: string;\n  /** Represents communication preferences for the customer profile. */\n  preferences?: CustomerPreferences;\n  /** The customer groups and segments the customer belongs to. This deprecated field has been replaced with  the dedicated `group_ids` for customer groups and the dedicated `segment_ids` field for customer segments. You can retrieve information about a given customer group and segment respectively using the Customer Groups API and Customer Segments API. */\n  groups?: CustomerGroupInfo[];\n  /** Indicates the method used to create the customer profile. */\n  creationSource?: string;\n  /** The IDs of customer groups the customer belongs to. */\n  groupIds?: string[];\n  /** The IDs of segments the customer belongs to. */\n  segmentIds?: string[];\n}\n\nexport const customerSchema: Schema<Customer> = object({\n  id: ['id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  cards: ['cards', optional(array(lazy(() => cardSchema)))],\n  givenName: ['given_name', optional(string())],\n  familyName: ['family_name', optional(string())],\n  nickname: ['nickname', optional(string())],\n  companyName: ['company_name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  phoneNumber: ['phone_number', optional(string())],\n  birthday: ['birthday', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  note: ['note', optional(string())],\n  preferences: ['preferences', optional(lazy(() => customerPreferencesSchema))],\n  groups: ['groups', optional(array(lazy(() => customerGroupInfoSchema)))],\n  creationSource: ['creation_source', optional(string())],\n  groupIds: ['group_ids', optional(array(string()))],\n  segmentIds: ['segment_ids', optional(array(string()))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the CreateCustomer endpoint.\n * One of `errors` or `customer` is present in a given response (never both).\n */\nexport interface CreateCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a Square customer profile, which can have one or more\n   * cards on file associated with it.\n   */\n  customer?: Customer;\n}\n\nexport const createCustomerResponseSchema: Schema<CreateCustomerResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customer: ['customer', optional(lazy(() => customerSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the DeleteCustomerCard endpoint.\n */\nexport interface DeleteCustomerCardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteCustomerCardResponseSchema: Schema<DeleteCustomerCardResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the DeleteCustomer endpoint.\n */\nexport interface DeleteCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteCustomerResponseSchema: Schema<DeleteCustomerResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the ListCustomers endpoint.\n * One of `errors` or `customers` is present in a given response (never both).\n */\nexport interface ListCustomersResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of `Customer` objects that match the provided query. */\n  customers?: Customer[];\n  /**\n   * A pagination cursor to retrieve the next set of results for the\n   * original query. Only present if the request succeeded and additional results\n   * are available.\n   * See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listCustomersResponseSchema: Schema<ListCustomersResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customers: ['customers', optional(array(lazy(() => customerSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RemoveGroupFromCustomer](#endpoint-removegroupfromcustomer)\n * endpoint.\n */\nexport interface RemoveGroupFromCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const removeGroupFromCustomerResponseSchema: Schema<RemoveGroupFromCustomerResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the RetrieveCustomer endpoint.\n * One of `errors` or `customer` is present in a given response (never both).\n */\nexport interface RetrieveCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a Square customer profile, which can have one or more\n   * cards on file associated with it.\n   */\n  customer?: Customer;\n}\n\nexport const retrieveCustomerResponseSchema: Schema<RetrieveCustomerResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customer: ['customer', optional(lazy(() => customerSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Creation source filter.\n * If one or more creation sources are set, customer profiles are included in,\n * or excluded from, the result if they match at least one of the filter\n * criteria.\n */\nexport interface CustomerCreationSourceFilter {\n  /**\n   * The list of creation sources used as filtering criteria.\n   * See [CustomerCreationSource](#type-customercreationsource) for possible values\n   */\n  values?: string[];\n  /**\n   * Indicates whether customers should be included in, or excluded from,\n   * the result set when they match the filtering criteria.\n   */\n  rule?: string;\n}\n\nexport const customerCreationSourceFilterSchema: Schema<CustomerCreationSourceFilter> = object(\n  {\n    values: ['values', optional(array(string()))],\n    rule: ['rule', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A filter to select customers based on exact or fuzzy matching of\n * customer attributes against a specified query. Depending on customer attributes,\n * the filter can be case sensitive. This filter can be either exact or fuzzy. It cannot be both.\n */\nexport interface CustomerTextFilter {\n  /** Use the exact filter to select customers whose attributes match exactly the specified query. */\n  exact?: string;\n  /**\n   * Use the fuzzy filter to select customers whose attributes match the specified query\n   * in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then\n   * each query token must be matched somewhere in the searched attribute. For single token queries,\n   * this is effectively the same behavior as a partial match operation.\n   */\n  fuzzy?: string;\n}\n\nexport const customerTextFilterSchema: Schema<CustomerTextFilter> = object({\n  exact: ['exact', optional(string())],\n  fuzzy: ['fuzzy', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  CustomerCreationSourceFilter,\n  customerCreationSourceFilterSchema,\n} from './customerCreationSourceFilter';\nimport {\n  CustomerTextFilter,\n  customerTextFilterSchema,\n} from './customerTextFilter';\nimport { FilterValue, filterValueSchema } from './filterValue';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/**\n * Represents a set of `CustomerQuery` filters used to limit the set of\n * `Customers` returned by `SearchCustomers`.\n */\nexport interface CustomerFilter {\n  /**\n   * Creation source filter.\n   * If one or more creation sources are set, customer profiles are included in,\n   * or excluded from, the result if they match at least one of the filter\n   * criteria.\n   */\n  creationSource?: CustomerCreationSourceFilter;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  updatedAt?: TimeRange;\n  /**\n   * A filter to select customers based on exact or fuzzy matching of\n   * customer attributes against a specified query. Depending on customer attributes,\n   * the filter can be case sensitive. This filter can be either exact or fuzzy. It cannot be both.\n   */\n  emailAddress?: CustomerTextFilter;\n  /**\n   * A filter to select customers based on exact or fuzzy matching of\n   * customer attributes against a specified query. Depending on customer attributes,\n   * the filter can be case sensitive. This filter can be either exact or fuzzy. It cannot be both.\n   */\n  phoneNumber?: CustomerTextFilter;\n  /**\n   * A filter to select customers based on exact or fuzzy matching of\n   * customer attributes against a specified query. Depending on customer attributes,\n   * the filter can be case sensitive. This filter can be either exact or fuzzy. It cannot be both.\n   */\n  referenceId?: CustomerTextFilter;\n  /**\n   * A filter to select resources based on an exact field value. For any given\n   * value, the value can only be in one property. Depending on the field, either\n   * all properties can be set or only a subset will be available.\n   * Refer to the documentation of the field.\n   */\n  groupIds?: FilterValue;\n}\n\nexport const customerFilterSchema: Schema<CustomerFilter> = object({\n  creationSource: [\n    'creation_source',\n    optional(lazy(() => customerCreationSourceFilterSchema)),\n  ],\n  createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n  updatedAt: ['updated_at', optional(lazy(() => timeRangeSchema))],\n  emailAddress: [\n    'email_address',\n    optional(lazy(() => customerTextFilterSchema)),\n  ],\n  phoneNumber: ['phone_number', optional(lazy(() => customerTextFilterSchema))],\n  referenceId: ['reference_id', optional(lazy(() => customerTextFilterSchema))],\n  groupIds: ['group_ids', optional(lazy(() => filterValueSchema))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Specifies how searched customers profiles are sorted, including the sort key and sort order. */\nexport interface CustomerSort {\n  /** Specifies customer attributes as the sort key to customer profiles returned from a search. */\n  field?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const customerSortSchema: Schema<CustomerSort> = object({\n  field: ['field', optional(string())],\n  order: ['order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { CustomerFilter, customerFilterSchema } from './customerFilter';\nimport { CustomerSort, customerSortSchema } from './customerSort';\n\n/**\n * Represents a query (including filtering criteria, sorting criteria, or both) used to search\n * for customer profiles.\n */\nexport interface CustomerQuery {\n  /**\n   * Represents a set of `CustomerQuery` filters used to limit the set of\n   * `Customers` returned by `SearchCustomers`.\n   */\n  filter?: CustomerFilter;\n  /** Specifies how searched customers profiles are sorted, including the sort key and sort order. */\n  sort?: CustomerSort;\n}\n\nexport const customerQuerySchema: Schema<CustomerQuery> = object({\n  filter: ['filter', optional(lazy(() => customerFilterSchema))],\n  sort: ['sort', optional(lazy(() => customerSortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { CustomerQuery, customerQuerySchema } from './customerQuery';\n\n/**\n * Defines the fields included in the request body for the\n * SearchCustomers endpoint.\n */\nexport interface SearchCustomersRequest {\n  /**\n   * Include the pagination cursor in subsequent calls to this endpoint to retrieve\n   * the next set of results associated with the original query.\n   * See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n  /**\n   * A limit on the number of results to be returned in a single page.\n   * The limit is advisory - the implementation may return more or fewer results.\n   * If the supplied limit is negative, zero, or is higher than the maximum limit\n   * of 100, it will be ignored.\n   */\n  limit?: number;\n  /**\n   * Represents a query (including filtering criteria, sorting criteria, or both) used to search\n   * for customer profiles.\n   */\n  query?: CustomerQuery;\n}\n\nexport const searchCustomersRequestSchema: Schema<SearchCustomersRequest> = object(\n  {\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n    query: ['query', optional(lazy(() => customerQuerySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the SearchCustomers endpoint.\n * One of `errors` or `customers` is present in a given response (never both).\n */\nexport interface SearchCustomersResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of `Customer` objects that match a query. */\n  customers?: Customer[];\n  /**\n   * A pagination cursor that can be used during subsequent calls\n   * to SearchCustomers to retrieve the next set of results associated\n   * with the original query. Pagination cursors are only present when\n   * a request succeeds and additional results are available.\n   * See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchCustomersResponseSchema: Schema<SearchCustomersResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customers: ['customers', optional(array(lazy(() => customerSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/**\n * Defines the body parameters that can be provided in a request to the\n * UpdateCustomer endpoint.\n */\nexport interface UpdateCustomerRequest {\n  /** The given (i.e., first) name associated with the customer profile. */\n  givenName?: string;\n  /** The family (i.e., last) name associated with the customer profile. */\n  familyName?: string;\n  /** A business name associated with the customer profile. */\n  companyName?: string;\n  /** A nickname for the customer profile. */\n  nickname?: string;\n  /** The email address associated with the customer profile. */\n  emailAddress?: string;\n  /** Represents a physical address. */\n  address?: Address;\n  /** The 11-digit phone number associated with the customer profile. */\n  phoneNumber?: string;\n  /**\n   * An optional, second ID used to associate the customer profile with an\n   * entity in another system.\n   */\n  referenceId?: string;\n  /** A custom note associated with the customer profile. */\n  note?: string;\n  /**\n   * The birthday associated with the customer profile, in RFC 3339 format.\n   * Year is optional, timezone and times are not allowed.\n   * For example: `0000-09-01T00:00:00-00:00` indicates a birthday on September 1st.\n   * `1998-09-01T00:00:00-00:00` indications a birthday on September 1st __1998__.\n   */\n  birthday?: string;\n}\n\nexport const updateCustomerRequestSchema: Schema<UpdateCustomerRequest> = object(\n  {\n    givenName: ['given_name', optional(string())],\n    familyName: ['family_name', optional(string())],\n    companyName: ['company_name', optional(string())],\n    nickname: ['nickname', optional(string())],\n    emailAddress: ['email_address', optional(string())],\n    address: ['address', optional(lazy(() => addressSchema))],\n    phoneNumber: ['phone_number', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    note: ['note', optional(string())],\n    birthday: ['birthday', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Customer, customerSchema } from './customer';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the UpdateCustomer endpoint.\n * One of `errors` or `customer` is present in a given response (never both).\n */\nexport interface UpdateCustomerResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a Square customer profile, which can have one or more\n   * cards on file associated with it.\n   */\n  customer?: Customer;\n}\n\nexport const updateCustomerResponseSchema: Schema<UpdateCustomerResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    customer: ['customer', optional(lazy(() => customerSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  AddGroupToCustomerResponse,\n  addGroupToCustomerResponseSchema,\n} from '../models/addGroupToCustomerResponse';\nimport {\n  CreateCustomerCardRequest,\n  createCustomerCardRequestSchema,\n} from '../models/createCustomerCardRequest';\nimport {\n  CreateCustomerCardResponse,\n  createCustomerCardResponseSchema,\n} from '../models/createCustomerCardResponse';\nimport {\n  CreateCustomerRequest,\n  createCustomerRequestSchema,\n} from '../models/createCustomerRequest';\nimport {\n  CreateCustomerResponse,\n  createCustomerResponseSchema,\n} from '../models/createCustomerResponse';\nimport {\n  DeleteCustomerCardResponse,\n  deleteCustomerCardResponseSchema,\n} from '../models/deleteCustomerCardResponse';\nimport {\n  DeleteCustomerResponse,\n  deleteCustomerResponseSchema,\n} from '../models/deleteCustomerResponse';\nimport {\n  ListCustomersResponse,\n  listCustomersResponseSchema,\n} from '../models/listCustomersResponse';\nimport {\n  RemoveGroupFromCustomerResponse,\n  removeGroupFromCustomerResponseSchema,\n} from '../models/removeGroupFromCustomerResponse';\nimport {\n  RetrieveCustomerResponse,\n  retrieveCustomerResponseSchema,\n} from '../models/retrieveCustomerResponse';\nimport {\n  SearchCustomersRequest,\n  searchCustomersRequestSchema,\n} from '../models/searchCustomersRequest';\nimport {\n  SearchCustomersResponse,\n  searchCustomersResponseSchema,\n} from '../models/searchCustomersResponse';\nimport {\n  UpdateCustomerRequest,\n  updateCustomerRequestSchema,\n} from '../models/updateCustomerRequest';\nimport {\n  UpdateCustomerResponse,\n  updateCustomerResponseSchema,\n} from '../models/updateCustomerResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CustomersApi extends BaseApi {\n  /**\n   * Lists customer profiles associated with a Square account.\n   *\n   * Under normal operating conditions, newly created or updated customer profiles become available\n   * for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated\n   * profiles can take closer to one minute or longer, especially during network incidents and outages.\n   *\n   * @param cursor     A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                             retrieve the next set of results for your original query.  See the [Pagination\n   *                             guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more\n   *                             information.\n   * @param sortField  Indicates how Customers should be sorted.  Default: `DEFAULT`.\n   * @param sortOrder  Indicates whether Customers should be sorted in ascending (`ASC`) or descending\n   *                             (`DESC`) order.  Default: `ASC`.\n   * @return Response from the API call\n   */\n  async listCustomers(\n    cursor?: string,\n    sortField?: string,\n    sortOrder?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCustomersResponse>> {\n    const req = this.createRequest('GET', '/v2/customers');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      sortField: [sortField, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('sort_field', mapped.sortField);\n    req.query('sort_order', mapped.sortOrder);\n    return req.callAsJson(listCustomersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new customer for a business, which can have associated cards on file.\n   *\n   * You must provide __at least one__ of the following values in your request to this\n   * endpoint:\n   *\n   * - `given_name`\n   * - `family_name`\n   * - `company_name`\n   * - `email_address`\n   * - `phone_number`\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                             corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCustomer(\n    body: CreateCustomerRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCustomerResponse>> {\n    const req = this.createRequest('POST', '/v2/customers');\n    const mapped = req.prepareArgs({\n      body: [body, createCustomerRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches the customer profiles associated with a Square account using a supported query filter.\n   *\n   * Calling `SearchCustomers` without any explicit query filter returns all\n   * customer profiles ordered alphabetically based on `given_name` and\n   * `family_name`.\n   *\n   * Under normal operating conditions, newly created or updated customer profiles become available\n   * for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated\n   * profiles can take closer to one minute or longer, especially during network incidents and outages.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                              corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchCustomers(\n    body: SearchCustomersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchCustomersResponse>> {\n    const req = this.createRequest('POST', '/v2/customers/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchCustomersRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchCustomersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a customer from a business, along with any linked cards on file. When two profiles\n   * are merged into a single profile, that profile is assigned a new `customer_id`. You must use the\n   * new `customer_id` to delete merged profiles.\n   *\n   * @param customerId  The ID of the customer to delete.\n   * @return Response from the API call\n   */\n  async deleteCustomer(\n    customerId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCustomerResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ customerId: [customerId, string()] });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}`;\n    return req.callAsJson(deleteCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details for a single customer.\n   *\n   * @param customerId  The ID of the customer to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveCustomer(\n    customerId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCustomerResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ customerId: [customerId, string()] });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}`;\n    return req.callAsJson(retrieveCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates the details of an existing customer. When two profiles are merged\n   * into a single profile, that profile is assigned a new `customer_id`. You must use\n   * the new `customer_id` to update merged profiles.\n   *\n   * You cannot edit a customer's cards on file with this endpoint. To make changes\n   * to a card on file, you must delete the existing card on file with the\n   * [DeleteCustomerCard](#endpoint-Customers-deletecustomercard) endpoint, then create a new one with\n   * the\n   * [CreateCustomerCard](#endpoint-Customers-createcustomercard) endpoint.\n   *\n   * @param customerId  The ID of the customer to update.\n   * @param body        An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateCustomer(\n    customerId: string,\n    body: UpdateCustomerRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateCustomerResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      body: [body, updateCustomerRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}`;\n    return req.callAsJson(updateCustomerResponseSchema, requestOptions);\n  }\n\n  /**\n   * Adds a card on file to an existing customer.\n   *\n   * As with charges, calls to `CreateCustomerCard` are idempotent. Multiple\n   * calls with the same card nonce return the same card record that was created\n   * with the provided nonce during the _first_ call.\n   *\n   * @param customerId  The Square ID of the customer profile the card is linked\n   *                                                        to.\n   * @param body        An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createCustomerCard(\n    customerId: string,\n    body: CreateCustomerCardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateCustomerCardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      body: [body, createCustomerCardRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/cards`;\n    return req.callAsJson(createCustomerCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Removes a card on file from a customer.\n   *\n   * @param customerId  The ID of the customer that the card on file belongs to.\n   * @param cardId      The ID of the card on file to delete.\n   * @return Response from the API call\n   */\n  async deleteCustomerCard(\n    customerId: string,\n    cardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteCustomerCardResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      cardId: [cardId, string()],\n    });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/cards/${mapped.cardId}`;\n    return req.callAsJson(deleteCustomerCardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Removes a group membership from a customer.\n   *\n   * The customer is identified by the `customer_id` value\n   * and the customer group is identified by the `group_id` value.\n   *\n   * @param customerId  The ID of the customer to remove from the group.\n   * @param groupId     The ID of the customer group to remove the customer from.\n   * @return Response from the API call\n   */\n  async removeGroupFromCustomer(\n    customerId: string,\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RemoveGroupFromCustomerResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      groupId: [groupId, string()],\n    });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/groups/${mapped.groupId}`;\n    return req.callAsJson(\n      removeGroupFromCustomerResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Adds a group membership to a customer.\n   *\n   * The customer is identified by the `customer_id` value\n   * and the customer group is identified by the `group_id` value.\n   *\n   * @param customerId  The ID of the customer to add to a group.\n   * @param groupId     The ID of the customer group to add the customer to.\n   * @return Response from the API call\n   */\n  async addGroupToCustomer(\n    customerId: string,\n    groupId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AddGroupToCustomerResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      customerId: [customerId, string()],\n      groupId: [groupId, string()],\n    });\n    req.appendTemplatePath`/v2/customers/${mapped.customerId}/groups/${mapped.groupId}`;\n    return req.callAsJson(addGroupToCustomerResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a group of customer profiles that match one or more predefined filter criteria.\n * Segments (also known as Smart Groups) are defined and created within Customer Directory in the Square Dashboard or Point of Sale.\n */\nexport interface CustomerSegment {\n  /** Unique Square-generated ID for the segment. */\n  id?: string;\n  /** Name of the segment. */\n  name: string;\n  /** The timestamp when the segment was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the segment was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const customerSegmentSchema: Schema<CustomerSegment> = object({\n  id: ['id', optional(string())],\n  name: ['name', string()],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { CustomerSegment, customerSegmentSchema } from './customerSegment';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields included in the response body for requests to __ListCustomerSegments__.\n * One of `errors` or `segments` is present in a given response (never both).\n */\nexport interface ListCustomerSegmentsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The list of customer segments belonging to the associated Square account. */\n  segments?: CustomerSegment[];\n  /**\n   * A pagination cursor to be used in subsequent calls to __ListCustomerSegments__\n   * to retrieve the next set of query results. Only present only if the request succeeded and\n   * additional results are available.\n   * See the [Pagination guide](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listCustomerSegmentsResponseSchema: Schema<ListCustomerSegmentsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    segments: ['segments', optional(array(lazy(() => customerSegmentSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { CustomerSegment, customerSegmentSchema } from './customerSegment';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields included in the response body for requests to __RetrieveCustomerSegment__.\n * One of `errors` or `segment` is present in a given response (never both).\n */\nexport interface RetrieveCustomerSegmentResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a group of customer profiles that match one or more predefined filter criteria.\n   * Segments (also known as Smart Groups) are defined and created within Customer Directory in the Square Dashboard or Point of Sale.\n   */\n  segment?: CustomerSegment;\n}\n\nexport const retrieveCustomerSegmentResponseSchema: Schema<RetrieveCustomerSegmentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    segment: ['segment', optional(lazy(() => customerSegmentSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  ListCustomerSegmentsResponse,\n  listCustomerSegmentsResponseSchema,\n} from '../models/listCustomerSegmentsResponse';\nimport {\n  RetrieveCustomerSegmentResponse,\n  retrieveCustomerSegmentResponseSchema,\n} from '../models/retrieveCustomerSegmentResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class CustomerSegmentsApi extends BaseApi {\n  /**\n   * Retrieves the list of customer segments of a business.\n   *\n   * @param cursor A pagination cursor returned by previous calls to __ListCustomerSegments__. Used to\n   *                         retrieve the next set of query results.  See the [Pagination guide](https://developer.\n   *                         squareup.com/docs/working-with-apis/pagination) for more information.\n   * @return Response from the API call\n   */\n  async listCustomerSegments(\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListCustomerSegmentsResponse>> {\n    const req = this.createRequest('GET', '/v2/customers/segments');\n    const mapped = req.prepareArgs({ cursor: [cursor, optional(string())] });\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listCustomerSegmentsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a specific customer segment as identified by the `segment_id` value.\n   *\n   * @param segmentId  The Square-issued ID of the customer segment.\n   * @return Response from the API call\n   */\n  async retrieveCustomerSegment(\n    segmentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveCustomerSegmentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ segmentId: [segmentId, string()] });\n    req.appendTemplatePath`/v2/customers/segments/${mapped.segmentId}`;\n    return req.callAsJson(\n      retrieveCustomerSegmentResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface DeviceCode {\n  /** The unique id for this device code. */\n  id?: string;\n  /** An optional user-defined name for the device code. */\n  name?: string;\n  /** The unique code that can be used to login. */\n  code?: string;\n  /** The unique id of the device that used this code. Populated when the device is paired up. */\n  deviceId?: string;\n  productType: string;\n  /** The location assigned to this code. */\n  locationId?: string;\n  /** DeviceCode.Status enum. */\n  status?: string;\n  /** When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format. */\n  pairBy?: string;\n  /** When this DeviceCode was created. Timestamp in RFC 3339 format. */\n  createdAt?: string;\n  /** When this DeviceCode's status was last changed. Timestamp in RFC 3339 format. */\n  statusChangedAt?: string;\n  /** When this DeviceCode was paired. Timestamp in RFC 3339 format. */\n  pairedAt?: string;\n}\n\nexport const deviceCodeSchema: Schema<DeviceCode> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  code: ['code', optional(string())],\n  deviceId: ['device_id', optional(string())],\n  productType: ['product_type', string()],\n  locationId: ['location_id', optional(string())],\n  status: ['status', optional(string())],\n  pairBy: ['pair_by', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  statusChangedAt: ['status_changed_at', optional(string())],\n  pairedAt: ['paired_at', optional(string())],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\n\nexport interface CreateDeviceCodeRequest {\n  /**\n   * A unique string that identifies this CreateCheckout request. Keys can be any valid string but\n   * must be unique for every CreateCheckout request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  deviceCode: DeviceCode;\n}\n\nexport const createDeviceCodeRequestSchema: Schema<CreateDeviceCodeRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    deviceCode: ['device_code', lazy(() => deviceCodeSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\nimport { Error, errorSchema } from './error';\n\nexport interface CreateDeviceCodeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  deviceCode?: DeviceCode;\n}\n\nexport const createDeviceCodeResponseSchema: Schema<CreateDeviceCodeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deviceCode: ['device_code', optional(lazy(() => deviceCodeSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\nimport { Error, errorSchema } from './error';\n\nexport interface GetDeviceCodeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  deviceCode?: DeviceCode;\n}\n\nexport const getDeviceCodeResponseSchema: Schema<GetDeviceCodeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deviceCode: ['device_code', optional(lazy(() => deviceCodeSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { DeviceCode, deviceCodeSchema } from './deviceCode';\nimport { Error, errorSchema } from './error';\n\nexport interface ListDeviceCodesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The queried DeviceCode. */\n  deviceCodes?: DeviceCode[];\n  /**\n   * A pagination cursor to retrieve the next set of results for your\n   * original query to the endpoint. This value is present only if the request\n   * succeeded and additional results are available.\n   * See [Paginating results](#paginatingresults) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listDeviceCodesResponseSchema: Schema<ListDeviceCodesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    deviceCodes: [\n      'device_codes',\n      optional(array(lazy(() => deviceCodeSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateDeviceCodeRequest,\n  createDeviceCodeRequestSchema,\n} from '../models/createDeviceCodeRequest';\nimport {\n  CreateDeviceCodeResponse,\n  createDeviceCodeResponseSchema,\n} from '../models/createDeviceCodeResponse';\nimport {\n  GetDeviceCodeResponse,\n  getDeviceCodeResponseSchema,\n} from '../models/getDeviceCodeResponse';\nimport {\n  ListDeviceCodesResponse,\n  listDeviceCodesResponseSchema,\n} from '../models/listDeviceCodesResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class DevicesApi extends BaseApi {\n  /**\n   * Lists all DeviceCodes associated with the merchant.\n   *\n   * @param cursor       A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                               retrieve the next set of results for your original query.  See [Paginating\n   *                               results](#paginatingresults) for more information.\n   * @param locationId   If specified, only returns DeviceCodes of the specified location. Returns\n   *                               DeviceCodes of all locations if empty.\n   * @param productType  If specified, only returns DeviceCodes targeting the specified product type.\n   *                               Returns DeviceCodes of all product types if empty.\n   * @param status       If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes\n   *                               of status `PAIRED` and `UNPAIRED` if empty.\n   * @return Response from the API call\n   */\n  async listDeviceCodes(\n    cursor?: string,\n    locationId?: string,\n    productType?: string,\n    status?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListDeviceCodesResponse>> {\n    const req = this.createRequest('GET', '/v2/devices/codes');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n      productType: [productType, optional(string())],\n      status: [status, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    req.query('product_type', mapped.productType);\n    req.query('status', mapped.status);\n    return req.callAsJson(listDeviceCodesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected\n   * terminal mode.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                               corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createDeviceCode(\n    body: CreateDeviceCodeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateDeviceCodeResponse>> {\n    const req = this.createRequest('POST', '/v2/devices/codes');\n    const mapped = req.prepareArgs({\n      body: [body, createDeviceCodeRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createDeviceCodeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves DeviceCode with the associated ID.\n   *\n   * @param id The unique identifier for the device code.\n   * @return Response from the API call\n   */\n  async getDeviceCode(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetDeviceCodeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/devices/codes/${mapped.id}`;\n    return req.callAsJson(getDeviceCodeResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** The payment the cardholder disputed. */\nexport interface DisputedPayment {\n  /** Square-generated unique ID of the payment being disputed. */\n  paymentId?: string;\n}\n\nexport const disputedPaymentSchema: Schema<DisputedPayment> = object({\n  paymentId: ['payment_id', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { DisputedPayment, disputedPaymentSchema } from './disputedPayment';\nimport { Money, moneySchema } from './money';\n\n/** Represents a dispute a cardholder initiated with their bank. */\nexport interface Dispute {\n  /** Unique ID for this `Dispute`, generated by Square. */\n  disputeId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * List of possible reasons why a cardholder might initiate a\n   * dispute with their bank.\n   */\n  reason?: string;\n  /** List of possible dispute states. */\n  state?: string;\n  /** The time when the next action is due, in RFC 3339 format. */\n  dueAt?: string;\n  /** The payment the cardholder disputed. */\n  disputedPayment?: DisputedPayment;\n  /** The IDs of the evidence associated with the dispute. */\n  evidenceIds?: string[];\n  /** Indicates a card's brand, such as `VISA` or `MASTERCARD`. */\n  cardBrand?: string;\n  /** Timestamp when the dispute was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** Timestamp when dispute was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** ID of the dispute in the card brand system, generated by the card brand. */\n  brandDisputeId?: string;\n  /** Timestamp when the dispute was reported, in RFC 3339 format. */\n  reportedDate?: string;\n  /** The current version of the `Dispute`. */\n  version?: number;\n  /** The ID of location where dispute originated. */\n  locationId?: string;\n}\n\nexport const disputeSchema: Schema<Dispute> = object({\n  disputeId: ['dispute_id', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  reason: ['reason', optional(string())],\n  state: ['state', optional(string())],\n  dueAt: ['due_at', optional(string())],\n  disputedPayment: [\n    'disputed_payment',\n    optional(lazy(() => disputedPaymentSchema)),\n  ],\n  evidenceIds: ['evidence_ids', optional(array(string()))],\n  cardBrand: ['card_brand', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  brandDisputeId: ['brand_dispute_id', optional(string())],\n  reportedDate: ['reported_date', optional(string())],\n  version: ['version', optional(number())],\n  locationId: ['location_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a AcceptDispute response. */\nexport interface AcceptDisputeResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a dispute a cardholder initiated with their bank. */\n  dispute?: Dispute;\n}\n\nexport const acceptDisputeResponseSchema: Schema<AcceptDisputeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    dispute: ['dispute', optional(lazy(() => disputeSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Defines parameters for a CreateDisputeEvidenceFile request. */\nexport interface CreateDisputeEvidenceFileRequest {\n  /**\n   * Unique ID. For more information,\n   * see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /** Type of the dispute evidence. */\n  evidenceType?: string;\n  /**\n   * The MIME type of the uploaded file.\n   * One of image/heic, image/heif, image/jpeg, application/pdf,  image/png, image/tiff.\n   */\n  contentType?: string;\n}\n\nexport const createDisputeEvidenceFileRequestSchema: Schema<CreateDisputeEvidenceFileRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    evidenceType: ['evidence_type', optional(string())],\n    contentType: ['content_type', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface DisputeEvidence {\n  /** The Square-generated ID of the evidence. */\n  evidenceId?: string;\n  /** The ID of the dispute the evidence is associated with. */\n  disputeId?: string;\n  /** The time when the next action is due, in RFC 3339 format. */\n  uploadedAt?: string;\n  /** Type of the dispute evidence. */\n  evidenceType?: string;\n}\n\nexport const disputeEvidenceSchema: Schema<DisputeEvidence> = object({\n  evidenceId: ['evidence_id', optional(string())],\n  disputeId: ['dispute_id', optional(string())],\n  uploadedAt: ['uploaded_at', optional(string())],\n  evidenceType: ['evidence_type', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a CreateDisputeEvidenceFile response. */\nexport interface CreateDisputeEvidenceFileResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  evidence?: DisputeEvidence;\n}\n\nexport const createDisputeEvidenceFileResponseSchema: Schema<CreateDisputeEvidenceFileResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    evidence: ['evidence', optional(lazy(() => disputeEvidenceSchema))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Defines parameters for a CreateDisputeEvidenceText request. */\nexport interface CreateDisputeEvidenceTextRequest {\n  /**\n   * Unique ID. For more information,\n   * see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /** Type of the dispute evidence. */\n  evidenceType?: string;\n  /** The evidence string. */\n  evidenceText: string;\n}\n\nexport const createDisputeEvidenceTextRequestSchema: Schema<CreateDisputeEvidenceTextRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    evidenceType: ['evidence_type', optional(string())],\n    evidenceText: ['evidence_text', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a CreateDisputeEvidenceText response. */\nexport interface CreateDisputeEvidenceTextResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  evidence?: DisputeEvidence;\n}\n\nexport const createDisputeEvidenceTextResponseSchema: Schema<CreateDisputeEvidenceTextResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    evidence: ['evidence', optional(lazy(() => disputeEvidenceSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a ListDisputeEvidence response. */\nexport interface ListDisputeEvidenceResponse {\n  /** The list of evidence previously uploaded to the specified dispute. */\n  evidence?: DisputeEvidence[];\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const listDisputeEvidenceResponseSchema: Schema<ListDisputeEvidenceResponse> = object(\n  {\n    evidence: ['evidence', optional(array(lazy(() => disputeEvidenceSchema)))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a ListDisputes response. */\nexport interface ListDisputesResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** The list of Disputes. */\n  disputes?: Dispute[];\n  /**\n   * The pagination cursor to be used in a subsequent request.\n   * If unset, this is the final response.\n   * For more information, see [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listDisputesResponseSchema: Schema<ListDisputesResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  disputes: ['disputes', optional(array(lazy(() => disputeSchema)))],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a RemoveDisputeEvidence response. */\nexport interface RemoveDisputeEvidenceResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const removeDisputeEvidenceResponseSchema: Schema<RemoveDisputeEvidenceResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { DisputeEvidence, disputeEvidenceSchema } from './disputeEvidence';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a RetrieveDisputeEvidence response. */\nexport interface RetrieveDisputeEvidenceResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  evidence?: DisputeEvidence;\n}\n\nexport const retrieveDisputeEvidenceResponseSchema: Schema<RetrieveDisputeEvidenceResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    evidence: ['evidence', optional(lazy(() => disputeEvidenceSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a RetrieveDispute response. */\nexport interface RetrieveDisputeResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a dispute a cardholder initiated with their bank. */\n  dispute?: Dispute;\n}\n\nexport const retrieveDisputeResponseSchema: Schema<RetrieveDisputeResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    dispute: ['dispute', optional(lazy(() => disputeSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Dispute, disputeSchema } from './dispute';\nimport { Error, errorSchema } from './error';\n\n/** Defines fields in a SubmitEvidence response. */\nexport interface SubmitEvidenceResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a dispute a cardholder initiated with their bank. */\n  dispute?: Dispute;\n}\n\nexport const submitEvidenceResponseSchema: Schema<SubmitEvidenceResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    dispute: ['dispute', optional(lazy(() => disputeSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { FileWrapper } from '../fileWrapper';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  AcceptDisputeResponse,\n  acceptDisputeResponseSchema,\n} from '../models/acceptDisputeResponse';\nimport {\n  CreateDisputeEvidenceFileRequest,\n  createDisputeEvidenceFileRequestSchema,\n} from '../models/createDisputeEvidenceFileRequest';\nimport {\n  CreateDisputeEvidenceFileResponse,\n  createDisputeEvidenceFileResponseSchema,\n} from '../models/createDisputeEvidenceFileResponse';\nimport {\n  CreateDisputeEvidenceTextRequest,\n  createDisputeEvidenceTextRequestSchema,\n} from '../models/createDisputeEvidenceTextRequest';\nimport {\n  CreateDisputeEvidenceTextResponse,\n  createDisputeEvidenceTextResponseSchema,\n} from '../models/createDisputeEvidenceTextResponse';\nimport {\n  ListDisputeEvidenceResponse,\n  listDisputeEvidenceResponseSchema,\n} from '../models/listDisputeEvidenceResponse';\nimport {\n  ListDisputesResponse,\n  listDisputesResponseSchema,\n} from '../models/listDisputesResponse';\nimport {\n  RemoveDisputeEvidenceResponse,\n  removeDisputeEvidenceResponseSchema,\n} from '../models/removeDisputeEvidenceResponse';\nimport {\n  RetrieveDisputeEvidenceResponse,\n  retrieveDisputeEvidenceResponseSchema,\n} from '../models/retrieveDisputeEvidenceResponse';\nimport {\n  RetrieveDisputeResponse,\n  retrieveDisputeResponseSchema,\n} from '../models/retrieveDisputeResponse';\nimport {\n  SubmitEvidenceResponse,\n  submitEvidenceResponseSchema,\n} from '../models/submitEvidenceResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class DisputesApi extends BaseApi {\n  /**\n   * Returns a list of disputes associated\n   * with a particular account.\n   *\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                              retrieve the next set of results for the original query. For more information, see\n   *                              [Paginating](https://developer.squareup.com/docs/basics/api101/pagination).\n   * @param states      The dispute states to filter the result. If not specified, the endpoint returns all\n   *                              open disputes (dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`).\n   * @param locationId  The ID of the location for which to return  a list of disputes. If not specified,\n   *                              the endpoint returns all open disputes (dispute status is not `INQUIRY_CLOSED`, `WON`,\n   *                              or  `LOST`) associated with all locations.\n   * @return Response from the API call\n   */\n  async listDisputes(\n    cursor?: string,\n    states?: string,\n    locationId?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListDisputesResponse>> {\n    const req = this.createRequest('GET', '/v2/disputes');\n    const mapped = req.prepareArgs({\n      cursor: [cursor, optional(string())],\n      states: [states, optional(string())],\n      locationId: [locationId, optional(string())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('states', mapped.states);\n    req.query('location_id', mapped.locationId);\n    return req.callAsJson(listDisputesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns details of a specific dispute.\n   *\n   * @param disputeId  The ID of the dispute you want more details about.\n   * @return Response from the API call\n   */\n  async retrieveDispute(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveDisputeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}`;\n    return req.callAsJson(retrieveDisputeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Accepts loss on a dispute. Square returns\n   * the disputed amount to the cardholder and updates the\n   * dispute state to ACCEPTED.\n   *\n   * Square debits the disputed amount from the seller’s Square\n   * account. If the Square account balance does not have\n   * sufficient funds, Square debits the associated bank account.\n   *\n   * @param disputeId  ID of the dispute you want to accept.\n   * @return Response from the API call\n   */\n  async acceptDispute(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AcceptDisputeResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/accept`;\n    return req.callAsJson(acceptDisputeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of evidence associated with a dispute.\n   *\n   * @param disputeId  The ID of the dispute.\n   * @return Response from the API call\n   */\n  async listDisputeEvidence(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListDisputeEvidenceResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence`;\n    return req.callAsJson(listDisputeEvidenceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Removes specified evidence from a dispute.\n   *\n   * Square does not send the bank any evidence that\n   * is removed. Also, you cannot remove evidence after\n   * submitting it to the bank using [SubmitEvidence](https://developer.squareup.\n   * com/docs/reference/square/disputes-api/submit-evidence).\n   *\n   * @param disputeId   The ID of the dispute you want to remove evidence from.\n   * @param evidenceId  The ID of the evidence you want to remove.\n   * @return Response from the API call\n   */\n  async removeDisputeEvidence(\n    disputeId: string,\n    evidenceId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RemoveDisputeEvidenceResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      evidenceId: [evidenceId, string()],\n    });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence/${mapped.evidenceId}`;\n    return req.callAsJson(removeDisputeEvidenceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns the specific evidence metadata associated with a specific dispute.\n   *\n   * You must maintain a copy of the evidence you upload if you want to\n   * reference it later. You cannot download the evidence\n   * after you upload it.\n   *\n   * @param disputeId   The ID of the dispute that you want to retrieve evidence from.\n   * @param evidenceId  The ID of the evidence to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveDisputeEvidence(\n    disputeId: string,\n    evidenceId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveDisputeEvidenceResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      evidenceId: [evidenceId, string()],\n    });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence/${mapped.evidenceId}`;\n    return req.callAsJson(\n      retrieveDisputeEvidenceResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Uploads a file to use as evidence in a dispute challenge. The endpoint accepts\n   * HTTP multipart/form-data file uploads in HEIC, HEIF, JPEG, PDF, PNG,\n   * and TIFF formats.\n   *\n   * @param disputeId  ID of the dispute you want to upload evidence for.\n   * @param request    Defines parameters for a CreateDisputeEvidenceFile\n   *                                                              request.\n   * @param imageFile\n   * @return Response from the API call\n   */\n  async createDisputeEvidenceFile(\n    disputeId: string,\n    request?: CreateDisputeEvidenceFileRequest,\n    imageFile?: FileWrapper,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateDisputeEvidenceFileResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      request: [request, optional(createDisputeEvidenceFileRequestSchema)],\n    });\n    req.formData({\n      request: JSON.stringify(mapped.request),\n      image_file: imageFile,\n    });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence_file`;\n    return req.callAsJson(\n      createDisputeEvidenceFileResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Uploads text to use as evidence for a dispute challenge.\n   *\n   * @param disputeId  The ID of the dispute you want to upload evidence\n   *                                                              for.\n   * @param body       An object containing the fields to POST for the\n   *                                                              request.  See the corresponding object definition for\n   *                                                              field details.\n   * @return Response from the API call\n   */\n  async createDisputeEvidenceText(\n    disputeId: string,\n    body: CreateDisputeEvidenceTextRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateDisputeEvidenceTextResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      disputeId: [disputeId, string()],\n      body: [body, createDisputeEvidenceTextRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/evidence_text`;\n    return req.callAsJson(\n      createDisputeEvidenceTextResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Submits evidence to the cardholder's bank.\n   *\n   * Before submitting evidence, Square compiles all available evidence. This includes\n   * evidence uploaded using the\n   * [CreateDisputeEvidenceFile](https://developer.squareup.com/docs/reference/square/disputes-api/create-\n   * dispute-evidence-file) and\n   * [CreateDisputeEvidenceText](https://developer.squareup.com/docs/reference/square/disputes-api/create-\n   * dispute-evidence-text) endpoints,\n   * and evidence automatically provided by Square, when\n   * available.\n   *\n   * @param disputeId  The ID of the dispute you want to submit evidence for.\n   * @return Response from the API call\n   */\n  async submitEvidence(\n    disputeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SubmitEvidenceResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ disputeId: [disputeId, string()] });\n    req.appendTemplatePath`/v2/disputes/${mapped.disputeId}/submit-evidence`;\n    return req.callAsJson(submitEvidenceResponseSchema, requestOptions);\n  }\n}\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\n/** An employee object that is used by the external API. */\nexport interface Employee {\n  /** UUID for this object. */\n  id?: string;\n  /** The employee's first name. */\n  firstName?: string;\n  /** The employee's last name. */\n  lastName?: string;\n  /** The employee's email address */\n  email?: string;\n  /** The employee's phone number in E.164 format, i.e. \"+12125554250\" */\n  phoneNumber?: string;\n  /** A list of location IDs where this employee has access to. */\n  locationIds?: string[];\n  /** The status of the Employee being retrieved. */\n  status?: string;\n  /**\n   * Whether this employee is the owner of the merchant. Each merchant\n   * has one owner employee, and that employee has full authority over\n   * the account.\n   */\n  isOwner?: boolean;\n  /** A read-only timestamp in RFC 3339 format. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const employeeSchema: Schema<Employee> = object({\n  id: ['id', optional(string())],\n  firstName: ['first_name', optional(string())],\n  lastName: ['last_name', optional(string())],\n  email: ['email', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  locationIds: ['location_ids', optional(array(string()))],\n  status: ['status', optional(string())],\n  isOwner: ['is_owner', optional(boolean())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Employee, employeeSchema } from './employee';\nimport { Error, errorSchema } from './error';\n\nexport interface ListEmployeesResponse {\n  employees?: Employee[];\n  /** The token to be used to retrieve the next page of results. */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listEmployeesResponseSchema: Schema<ListEmployeesResponse> = object(\n  {\n    employees: ['employees', optional(array(lazy(() => employeeSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Employee, employeeSchema } from './employee';\nimport { Error, errorSchema } from './error';\n\nexport interface RetrieveEmployeeResponse {\n  /** An employee object that is used by the external API. */\n  employee?: Employee;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveEmployeeResponseSchema: Schema<RetrieveEmployeeResponse> = object(\n  {\n    employee: ['employee', optional(lazy(() => employeeSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  ListEmployeesResponse,\n  listEmployeesResponseSchema,\n} from '../models/listEmployeesResponse';\nimport {\n  RetrieveEmployeeResponse,\n  retrieveEmployeeResponseSchema,\n} from '../models/retrieveEmployeeResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class EmployeesApi extends BaseApi {\n  /**\n   * ListEmployees\n   *\n   * @param locationId\n   * @param status      Specifies the EmployeeStatus to filter the employee by.\n   * @param limit       The number of employees to be returned on each page.\n   * @param cursor      The token required to retrieve the specified page of results.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listEmployees(\n    locationId?: string,\n    status?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListEmployeesResponse>> {\n    const req = this.createRequest('GET', '/v2/employees');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, optional(string())],\n      status: [status, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('status', mapped.status);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.deprecated('EmployeesApi.listEmployees');\n    return req.callAsJson(listEmployeesResponseSchema, requestOptions);\n  }\n\n  /**\n   * RetrieveEmployee\n   *\n   * @param id UUID for the employee that was requested.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveEmployee(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveEmployeeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/employees/${mapped.id}`;\n    req.deprecated('EmployeesApi.retrieveEmployee');\n    return req.callAsJson(retrieveEmployeeResponseSchema, requestOptions);\n  }\n}\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Represents a change in state or quantity of product inventory at a\n * particular time and location.\n */\nexport interface InventoryAdjustment {\n  /**\n   * A unique ID generated by Square for the\n   * `InventoryAdjustment`.\n   */\n  id?: string;\n  /**\n   * An optional ID provided by the application to tie the\n   * `InventoryAdjustment` to an external\n   * system.\n   */\n  referenceId?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  fromState?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  toState?: string;\n  /**\n   * The Square ID of the [Location](#type-location) where the related\n   * quantity of items are being tracked.\n   */\n  locationId?: string;\n  /**\n   * The Square generated ID of the\n   * `CatalogObject` being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The `CatalogObjectType` of the\n   * `CatalogObject` being tracked. Tracking is only\n   * supported for the `ITEM_VARIATION` type.\n   */\n  catalogObjectType?: string;\n  /**\n   * The number of items affected by the adjustment as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalPriceMoney?: Money;\n  /**\n   * A client-generated timestamp in RFC 3339 format that indicates when\n   * the adjustment took place. For write actions, the `occurred_at`\n   * timestamp cannot be older than 24 hours or in the future relative to the\n   * time of the request.\n   */\n  occurredAt?: string;\n  /**\n   * A read-only timestamp in RFC 3339 format that indicates when Square\n   * received the adjustment.\n   */\n  createdAt?: string;\n  /** Provides information about the application used to generate a change. */\n  source?: SourceApplication;\n  /**\n   * The Square ID of the [Employee](#type-employee) responsible for the\n   * inventory adjustment.\n   */\n  employeeId?: string;\n  /**\n   * The read-only Square ID of the [Transaction][#type-transaction] that\n   * caused the adjustment. Only relevant for payment-related state\n   * transitions.\n   */\n  transactionId?: string;\n  /**\n   * The read-only Square ID of the [Refund][#type-refund] that\n   * caused the adjustment. Only relevant for refund-related state\n   * transitions.\n   */\n  refundId?: string;\n  /**\n   * The read-only Square ID of the purchase order that caused the\n   * adjustment. Only relevant for state transitions from the Square for Retail\n   * app.\n   */\n  purchaseOrderId?: string;\n  /**\n   * The read-only Square ID of the Square goods receipt that caused the\n   * adjustment. Only relevant for state transitions from the Square for Retail\n   * app.\n   */\n  goodsReceiptId?: string;\n}\n\nexport const inventoryAdjustmentSchema: Schema<InventoryAdjustment> = object({\n  id: ['id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  fromState: ['from_state', optional(string())],\n  toState: ['to_state', optional(string())],\n  locationId: ['location_id', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogObjectType: ['catalog_object_type', optional(string())],\n  quantity: ['quantity', optional(string())],\n  totalPriceMoney: ['total_price_money', optional(lazy(() => moneySchema))],\n  occurredAt: ['occurred_at', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  source: ['source', optional(lazy(() => sourceApplicationSchema))],\n  employeeId: ['employee_id', optional(string())],\n  transactionId: ['transaction_id', optional(string())],\n  refundId: ['refund_id', optional(string())],\n  purchaseOrderId: ['purchase_order_id', optional(string())],\n  goodsReceiptId: ['goods_receipt_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Represents the quantity of an item variation that is physically present\n * at a specific location, verified by a seller or a seller's employee. For example,\n * a physical count might come from an employee counting the item variations on\n * hand or from syncing with an external system.\n */\nexport interface InventoryPhysicalCount {\n  /**\n   * A unique ID generated by Square for the\n   * [InventoryPhysicalCount](#type-inventoryphysicalcount).\n   */\n  id?: string;\n  /**\n   * An optional ID provided by the application to tie the\n   * [InventoryPhysicalCount](#type-inventoryphysicalcount) to an external\n   * system.\n   */\n  referenceId?: string;\n  /**\n   * The Square generated ID of the\n   * `CatalogObject` being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The `CatalogObjectType` of the\n   * `CatalogObject` being tracked. Tracking is only\n   * supported for the `ITEM_VARIATION` type.\n   */\n  catalogObjectType?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  state?: string;\n  /**\n   * The Square ID of the [Location](#type-location) where the related\n   * quantity of items are being tracked.\n   */\n  locationId?: string;\n  /**\n   * The number of items affected by the physical count as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /** Provides information about the application used to generate a change. */\n  source?: SourceApplication;\n  /**\n   * The Square ID of the [Employee](#type-employee) responsible for the\n   * physical count.\n   */\n  employeeId?: string;\n  /**\n   * A client-generated timestamp in RFC 3339 format that indicates when\n   * the physical count took place. For write actions, the `occurred_at`\n   * timestamp cannot be older than 24 hours or in the future relative to the\n   * time of the request.\n   */\n  occurredAt?: string;\n  /**\n   * A read-only timestamp in RFC 3339 format that indicates when Square\n   * received the physical count.\n   */\n  createdAt?: string;\n}\n\nexport const inventoryPhysicalCountSchema: Schema<InventoryPhysicalCount> = object(\n  {\n    id: ['id', optional(string())],\n    referenceId: ['reference_id', optional(string())],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n    catalogObjectType: ['catalog_object_type', optional(string())],\n    state: ['state', optional(string())],\n    locationId: ['location_id', optional(string())],\n    quantity: ['quantity', optional(string())],\n    source: ['source', optional(lazy(() => sourceApplicationSchema))],\n    employeeId: ['employee_id', optional(string())],\n    occurredAt: ['occurred_at', optional(string())],\n    createdAt: ['created_at', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  SourceApplication,\n  sourceApplicationSchema,\n} from './sourceApplication';\n\n/**\n * Represents the transfer of a quantity of product inventory at a\n * particular time from one location to another.\n */\nexport interface InventoryTransfer {\n  /**\n   * A unique ID generated by Square for the\n   * `InventoryTransfer`.\n   */\n  id?: string;\n  /**\n   * An optional ID provided by the application to tie the\n   * `InventoryTransfer` to an external system.\n   */\n  referenceId?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  state?: string;\n  /**\n   * The Square ID of the [Location](#type-location) where the related\n   * quantity of items were tracked before the transfer.\n   */\n  fromLocationId?: string;\n  /**\n   * The Square ID of the [Location](#type-location) where the related\n   * quantity of items were tracked after the transfer.\n   */\n  toLocationId?: string;\n  /**\n   * The Square generated ID of the\n   * `CatalogObject` being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The `CatalogObjectType` of the\n   * `CatalogObject` being tracked.Tracking is only\n   * supported for the `ITEM_VARIATION` type.\n   */\n  catalogObjectType?: string;\n  /**\n   * The number of items affected by the transfer as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /**\n   * A client-generated timestamp in RFC 3339 format that indicates when\n   * the transfer took place. For write actions, the `occurred_at` timestamp\n   * cannot be older than 24 hours or in the future relative to the time of the\n   * request.\n   */\n  occurredAt?: string;\n  /**\n   * A read-only timestamp in RFC 3339 format that indicates when Square\n   * received the transfer request.\n   */\n  createdAt?: string;\n  /** Provides information about the application used to generate a change. */\n  source?: SourceApplication;\n  /**\n   * The Square ID of the [Employee](#type-employee) responsible for the\n   * inventory transfer.\n   */\n  employeeId?: string;\n}\n\nexport const inventoryTransferSchema: Schema<InventoryTransfer> = object({\n  id: ['id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  state: ['state', optional(string())],\n  fromLocationId: ['from_location_id', optional(string())],\n  toLocationId: ['to_location_id', optional(string())],\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogObjectType: ['catalog_object_type', optional(string())],\n  quantity: ['quantity', optional(string())],\n  occurredAt: ['occurred_at', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  source: ['source', optional(lazy(() => sourceApplicationSchema))],\n  employeeId: ['employee_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  InventoryAdjustment,\n  inventoryAdjustmentSchema,\n} from './inventoryAdjustment';\nimport {\n  InventoryPhysicalCount,\n  inventoryPhysicalCountSchema,\n} from './inventoryPhysicalCount';\nimport {\n  InventoryTransfer,\n  inventoryTransferSchema,\n} from './inventoryTransfer';\n\n/**\n * Represents a single physical count, inventory, adjustment, or transfer\n * that is part of the history of inventory changes for a particular\n * `CatalogObject`.\n */\nexport interface InventoryChange {\n  /** Indicates how the inventory change was applied to a tracked quantity of items. */\n  type?: string;\n  /**\n   * Represents the quantity of an item variation that is physically present\n   * at a specific location, verified by a seller or a seller's employee. For example,\n   * a physical count might come from an employee counting the item variations on\n   * hand or from syncing with an external system.\n   */\n  physicalCount?: InventoryPhysicalCount;\n  /**\n   * Represents a change in state or quantity of product inventory at a\n   * particular time and location.\n   */\n  adjustment?: InventoryAdjustment;\n  /**\n   * Represents the transfer of a quantity of product inventory at a\n   * particular time from one location to another.\n   */\n  transfer?: InventoryTransfer;\n}\n\nexport const inventoryChangeSchema: Schema<InventoryChange> = object({\n  type: ['type', optional(string())],\n  physicalCount: [\n    'physical_count',\n    optional(lazy(() => inventoryPhysicalCountSchema)),\n  ],\n  adjustment: ['adjustment', optional(lazy(() => inventoryAdjustmentSchema))],\n  transfer: ['transfer', optional(lazy(() => inventoryTransferSchema))],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\n\nexport interface BatchChangeInventoryRequest {\n  /**\n   * A client-supplied, universally unique identifier (UUID) for the\n   * request.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the\n   * [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more\n   * information.\n   */\n  idempotencyKey?: string;\n  /**\n   * The set of physical counts and inventory adjustments to be made.\n   * Changes are applied based on the client-supplied timestamp and may be sent\n   * out of order.\n   */\n  changes?: InventoryChange[];\n  /**\n   * Indicates whether the current physical count should be ignored if\n   * the quantity is unchanged since the last physical count. Default: `true`.\n   */\n  ignoreUnchangedCounts?: boolean;\n}\n\nexport const batchChangeInventoryRequestSchema: Schema<BatchChangeInventoryRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n    ignoreUnchangedCounts: ['ignore_unchanged_counts', optional(boolean())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents Square's estimated quantity of items in a particular state at a\n * particular location based on the known history of physical counts and\n * inventory adjustments.\n */\nexport interface InventoryCount {\n  /**\n   * The Square generated ID of the\n   * `CatalogObject` being tracked.\n   */\n  catalogObjectId?: string;\n  /**\n   * The `CatalogObjectType` of the\n   * `CatalogObject` being tracked. Tracking is only\n   * supported for the `ITEM_VARIATION` type.\n   */\n  catalogObjectType?: string;\n  /** Indicates the state of a tracked item quantity in the lifecycle of goods. */\n  state?: string;\n  /**\n   * The Square ID of the [Location](#type-location) where the related\n   * quantity of items are being tracked.\n   */\n  locationId?: string;\n  /**\n   * The number of items affected by the estimated count as a decimal string.\n   * Can support up to 5 digits after the decimal point.\n   */\n  quantity?: string;\n  /**\n   * A read-only timestamp in RFC 3339 format that indicates when Square\n   * received the most recent physical count or adjustment that had an affect\n   * on the estimated count.\n   */\n  calculatedAt?: string;\n}\n\nexport const inventoryCountSchema: Schema<InventoryCount> = object({\n  catalogObjectId: ['catalog_object_id', optional(string())],\n  catalogObjectType: ['catalog_object_type', optional(string())],\n  state: ['state', optional(string())],\n  locationId: ['location_id', optional(string())],\n  quantity: ['quantity', optional(string())],\n  calculatedAt: ['calculated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryCount, inventoryCountSchema } from './inventoryCount';\n\nexport interface BatchChangeInventoryResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The current counts for all objects referenced in the request. */\n  counts?: InventoryCount[];\n}\n\nexport const batchChangeInventoryResponseSchema: Schema<BatchChangeInventoryResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    counts: ['counts', optional(array(lazy(() => inventoryCountSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface BatchRetrieveInventoryChangesRequest {\n  /**\n   * The filter to return results by `CatalogObject` ID.\n   * The filter is only applicable when set. The default value is null.\n   */\n  catalogObjectIds?: string[];\n  /**\n   * The filter to return results by `Location` ID.\n   * The filter is only applicable when set. The default value is null.\n   */\n  locationIds?: string[];\n  /**\n   * The filter to return results by `InventoryChangeType` values other than `TRANSFER`.\n   * The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.\n   */\n  types?: string[];\n  /**\n   * The filter to return `ADJUSTMENT` query results by\n   * `InventoryState`. This filter is only applied when set.\n   * The default value is null.\n   */\n  states?: string[];\n  /**\n   * The filter to return results with their `calculated_at` value\n   * after the given time as specified in an RFC 3339 timestamp.\n   * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).\n   */\n  updatedAfter?: string;\n  /**\n   * The filter to return results with their `created_at` or `calculated_at` value\n   * strictly before the given time as specified in an RFC 3339 timestamp.\n   * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).\n   */\n  updatedBefore?: string;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const batchRetrieveInventoryChangesRequestSchema: Schema<BatchRetrieveInventoryChangesRequest> = object(\n  {\n    catalogObjectIds: ['catalog_object_ids', optional(array(string()))],\n    locationIds: ['location_ids', optional(array(string()))],\n    types: ['types', optional(array(string()))],\n    states: ['states', optional(array(string()))],\n    updatedAfter: ['updated_after', optional(string())],\n    updatedBefore: ['updated_before', optional(string())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\n\nexport interface BatchRetrieveInventoryChangesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The current calculated inventory changes for the requested objects\n   * and locations.\n   */\n  changes?: InventoryChange[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const batchRetrieveInventoryChangesResponseSchema: Schema<BatchRetrieveInventoryChangesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\nexport interface BatchRetrieveInventoryCountsRequest {\n  /**\n   * The filter to return results by `CatalogObject` ID.\n   * The filter is applicable only when set.  The default is null.\n   */\n  catalogObjectIds?: string[];\n  /**\n   * The filter to return results by `Location` ID.\n   * This filter is applicable only when set. The default is null.\n   */\n  locationIds?: string[];\n  /**\n   * The filter to return results with their `calculated_at` value\n   * after the given time as specified in an RFC 3339 timestamp.\n   * The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).\n   */\n  updatedAfter?: string;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n  /**\n   * The filter to return results by `InventoryState`. The filter is only applicable when set.\n   * Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`.\n   * The default is null.\n   */\n  states?: string[];\n}\n\nexport const batchRetrieveInventoryCountsRequestSchema: Schema<BatchRetrieveInventoryCountsRequest> = object(\n  {\n    catalogObjectIds: ['catalog_object_ids', optional(array(string()))],\n    locationIds: ['location_ids', optional(array(string()))],\n    updatedAfter: ['updated_after', optional(string())],\n    cursor: ['cursor', optional(string())],\n    states: ['states', optional(array(string()))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryCount, inventoryCountSchema } from './inventoryCount';\n\nexport interface BatchRetrieveInventoryCountsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The current calculated inventory counts for the requested objects\n   * and locations.\n   */\n  counts?: InventoryCount[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const batchRetrieveInventoryCountsResponseSchema: Schema<BatchRetrieveInventoryCountsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    counts: ['counts', optional(array(lazy(() => inventoryCountSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  InventoryAdjustment,\n  inventoryAdjustmentSchema,\n} from './inventoryAdjustment';\n\nexport interface RetrieveInventoryAdjustmentResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a change in state or quantity of product inventory at a\n   * particular time and location.\n   */\n  adjustment?: InventoryAdjustment;\n}\n\nexport const retrieveInventoryAdjustmentResponseSchema: Schema<RetrieveInventoryAdjustmentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    adjustment: ['adjustment', optional(lazy(() => inventoryAdjustmentSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryChange, inventoryChangeSchema } from './inventoryChange';\n\nexport interface RetrieveInventoryChangesResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The set of inventory changes for the requested object and locations. */\n  changes?: InventoryChange[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const retrieveInventoryChangesResponseSchema: Schema<RetrieveInventoryChangesResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    changes: ['changes', optional(array(lazy(() => inventoryChangeSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { InventoryCount, inventoryCountSchema } from './inventoryCount';\n\nexport interface RetrieveInventoryCountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The current calculated inventory counts for the requested object and\n   * locations.\n   */\n  counts?: InventoryCount[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.\n   */\n  cursor?: string;\n}\n\nexport const retrieveInventoryCountResponseSchema: Schema<RetrieveInventoryCountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    counts: ['counts', optional(array(lazy(() => inventoryCountSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  InventoryPhysicalCount,\n  inventoryPhysicalCountSchema,\n} from './inventoryPhysicalCount';\n\nexport interface RetrieveInventoryPhysicalCountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents the quantity of an item variation that is physically present\n   * at a specific location, verified by a seller or a seller's employee. For example,\n   * a physical count might come from an employee counting the item variations on\n   * hand or from syncing with an external system.\n   */\n  count?: InventoryPhysicalCount;\n}\n\nexport const retrieveInventoryPhysicalCountResponseSchema: Schema<RetrieveInventoryPhysicalCountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    count: ['count', optional(lazy(() => inventoryPhysicalCountSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  BatchChangeInventoryRequest,\n  batchChangeInventoryRequestSchema,\n} from '../models/batchChangeInventoryRequest';\nimport {\n  BatchChangeInventoryResponse,\n  batchChangeInventoryResponseSchema,\n} from '../models/batchChangeInventoryResponse';\nimport {\n  BatchRetrieveInventoryChangesRequest,\n  batchRetrieveInventoryChangesRequestSchema,\n} from '../models/batchRetrieveInventoryChangesRequest';\nimport {\n  BatchRetrieveInventoryChangesResponse,\n  batchRetrieveInventoryChangesResponseSchema,\n} from '../models/batchRetrieveInventoryChangesResponse';\nimport {\n  BatchRetrieveInventoryCountsRequest,\n  batchRetrieveInventoryCountsRequestSchema,\n} from '../models/batchRetrieveInventoryCountsRequest';\nimport {\n  BatchRetrieveInventoryCountsResponse,\n  batchRetrieveInventoryCountsResponseSchema,\n} from '../models/batchRetrieveInventoryCountsResponse';\nimport {\n  RetrieveInventoryAdjustmentResponse,\n  retrieveInventoryAdjustmentResponseSchema,\n} from '../models/retrieveInventoryAdjustmentResponse';\nimport {\n  RetrieveInventoryChangesResponse,\n  retrieveInventoryChangesResponseSchema,\n} from '../models/retrieveInventoryChangesResponse';\nimport {\n  RetrieveInventoryCountResponse,\n  retrieveInventoryCountResponseSchema,\n} from '../models/retrieveInventoryCountResponse';\nimport {\n  RetrieveInventoryPhysicalCountResponse,\n  retrieveInventoryPhysicalCountResponseSchema,\n} from '../models/retrieveInventoryPhysicalCountResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class InventoryApi extends BaseApi {\n  /**\n   * Returns the [InventoryAdjustment](#type-inventoryadjustment) object\n   * with the provided `adjustment_id`.\n   *\n   * @param adjustmentId  ID of the [InventoryAdjustment](#type-inventoryadjustment) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveInventoryAdjustment(\n    adjustmentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryAdjustmentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ adjustmentId: [adjustmentId, string()] });\n    req.appendTemplatePath`/v2/inventory/adjustment/${mapped.adjustmentId}`;\n    return req.callAsJson(\n      retrieveInventoryAdjustmentResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Applies adjustments and counts to the provided item quantities.\n   *\n   * On success: returns the current calculated counts for all objects\n   * referenced in the request.\n   * On failure: returns a list of related errors.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async batchChangeInventory(\n    body: BatchChangeInventoryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchChangeInventoryResponse>> {\n    const req = this.createRequest('POST', '/v2/inventory/batch-change');\n    const mapped = req.prepareArgs({\n      body: [body, batchChangeInventoryRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(batchChangeInventoryResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns historical physical counts and adjustments based on the\n   * provided filter criteria.\n   *\n   * Results are paginated and sorted in ascending order according their\n   * `occurred_at` timestamp (oldest first).\n   *\n   * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries\n   * that cannot be handled by other, simpler endpoints.\n   *\n   * @param body An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async batchRetrieveInventoryChanges(\n    body: BatchRetrieveInventoryChangesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveInventoryChangesResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/batch-retrieve-changes'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveInventoryChangesRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchRetrieveInventoryChangesResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns current counts for the provided\n   * [CatalogObject](#type-catalogobject)s at the requested\n   * [Location](#type-location)s.\n   *\n   * Results are paginated and sorted in descending order according to their\n   * `calculated_at` timestamp (newest first).\n   *\n   * When `updated_after` is specified, only counts that have changed since that\n   * time (based on the server timestamp for the most recent change) are\n   * returned. This allows clients to perform a \"sync\" operation, for example\n   * in response to receiving a Webhook notification.\n   *\n   * @param body An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async batchRetrieveInventoryCounts(\n    body: BatchRetrieveInventoryCountsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveInventoryCountsResponse>> {\n    const req = this.createRequest(\n      'POST',\n      '/v2/inventory/batch-retrieve-counts'\n    );\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveInventoryCountsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      batchRetrieveInventoryCountsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Returns the [InventoryPhysicalCount](#type-inventoryphysicalcount)\n   * object with the provided `physical_count_id`.\n   *\n   * @param physicalCountId   ID of the [InventoryPhysicalCount](#type-inventoryphysicalcount) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveInventoryPhysicalCount(\n    physicalCountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryPhysicalCountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      physicalCountId: [physicalCountId, string()],\n    });\n    req.appendTemplatePath`/v2/inventory/physical-count/${mapped.physicalCountId}`;\n    return req.callAsJson(\n      retrieveInventoryPhysicalCountResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves the current calculated stock count for a given\n   * [CatalogObject](#type-catalogobject) at a given set of\n   * [Location](#type-location)s. Responses are paginated and unsorted.\n   * For more sophisticated queries, use a batch endpoint.\n   *\n   * @param catalogObjectId   ID of the [CatalogObject](#type-catalogobject) to retrieve.\n   * @param locationIds       The [Location](#type-location) IDs to look up as a comma-separated list. An\n   *                                    empty list queries all locations.\n   * @param cursor            A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                                    to retrieve the next set of results for the original query.  See the\n   *                                    [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination)\n   *                                    guide for more information.\n   * @return Response from the API call\n   */\n  async retrieveInventoryCount(\n    catalogObjectId: string,\n    locationIds?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryCountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      catalogObjectId: [catalogObjectId, string()],\n      locationIds: [locationIds, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_ids', mapped.locationIds);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/inventory/${mapped.catalogObjectId}`;\n    return req.callAsJson(retrieveInventoryCountResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a set of physical counts and inventory adjustments for the\n   * provided [CatalogObject](#type-catalogobject) at the requested\n   * [Location](#type-location)s.\n   *\n   * Results are paginated and sorted in descending order according to their\n   * `occurred_at` timestamp (newest first).\n   *\n   * There are no limits on how far back the caller can page. This endpoint can be\n   * used to display recent changes for a specific item. For more\n   * sophisticated queries, use a batch endpoint.\n   *\n   * @param catalogObjectId   ID of the [CatalogObject](#type-catalogobject) to retrieve.\n   * @param locationIds       The [Location](#type-location) IDs to look up as a comma-separated list. An\n   *                                    empty list queries all locations.\n   * @param cursor            A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                                    to retrieve the next set of results for the original query.  See the\n   *                                    [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination)\n   *                                    guide for more information.\n   * @return Response from the API call\n   */\n  async retrieveInventoryChanges(\n    catalogObjectId: string,\n    locationIds?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveInventoryChangesResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      catalogObjectId: [catalogObjectId, string()],\n      locationIds: [locationIds, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_ids', mapped.locationIds);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/inventory/${mapped.catalogObjectId}/changes`;\n    return req.callAsJson(\n      retrieveInventoryChangesResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { number, object, Schema } from '../schema';\n\n/** Describes a `CancelInvoice` request. */\nexport interface CancelInvoiceRequest {\n  /**\n   * The version of the [invoice](#type-invoice) to cancel.\n   * If you do not know the version, you can call\n   * [GetInvoice](#endpoint-Invoices-GetInvoice) or [ListInvoices](#endpoint-Invoices-ListInvoices).\n   */\n  version: number;\n}\n\nexport const cancelInvoiceRequestSchema: Schema<CancelInvoiceRequest> = object({\n  version: ['version', number()],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Describes a payment request reminder (automatic notification) that Square sends\n * to the customer. You configure a reminder relative to the payment request\n * `due_date`.\n */\nexport interface InvoicePaymentReminder {\n  /**\n   * A Square-assigned ID that uniquely identifies the reminder within the\n   * `InvoicePaymentRequest`.\n   */\n  uid?: string;\n  /**\n   * The number of days before (a negative number) or after (a positive number)\n   * the payment request `due_date` when the reminder is sent. For example, -3 indicates that\n   * the reminder should be sent 3 days before the payment request `due_date`.\n   */\n  relativeScheduledDays?: number;\n  /** The reminder message. */\n  message?: string;\n  /** The status of a payment request reminder. */\n  status?: string;\n  /** If sent, the timestamp when the reminder was sent, in RFC 3339 format. */\n  sentAt?: string;\n}\n\nexport const invoicePaymentReminderSchema: Schema<InvoicePaymentReminder> = object(\n  {\n    uid: ['uid', optional(string())],\n    relativeScheduledDays: ['relative_scheduled_days', optional(number())],\n    message: ['message', optional(string())],\n    status: ['status', optional(string())],\n    sentAt: ['sent_at', optional(string())],\n  }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  InvoicePaymentReminder,\n  invoicePaymentReminderSchema,\n} from './invoicePaymentReminder';\nimport { Money, moneySchema } from './money';\n\n/**\n * Describes a specific payment request in an invoice. Invoices that contain multiple payment requests can\n * specify a maximum of 12 `INSTALLMENT` request types. All of the payment requests must specify the same `request_method`.\n * For more information,\n * see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).\n */\nexport interface InvoicePaymentRequest {\n  /** The Square-generated ID of the payment request in an [invoice](#type-invoice). */\n  uid?: string;\n  /**\n   * Specifies the action for Square to take for processing the invoice. For example,\n   * email the invoice, charge a customer's card on file, or do nothing.\n   */\n  requestMethod?: string;\n  /**\n   * Indicates the type of the payment request. An invoice supports the following payment request combinations:\n   * - 1 balance\n   * - 1 deposit with 1 balance\n   * - 2 - 12 installments\n   * - 1 deposit with 2 - 12 installments\n   * For more information,\n   * see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).\n   */\n  requestType?: string;\n  /**\n   * The due date (in the invoice location's time zone) for the payment request.\n   * After this date, the invoice becomes overdue.\n   */\n  dueDate?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  fixedAmountRequestedMoney?: Money;\n  /**\n   * Specifies the amount for the payment request in percentage:\n   * - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order total amount.\n   * - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order total less\n   * the deposit, if requested. The sum of the `percentage_requested` in all installment\n   * payment requests must be equal to 100.\n   * You cannot specify this when the payment `request_type` is `BALANCE` or when the\n   * payment request specifies the `fixed_amount_requested_money` field.\n   */\n  percentageRequested?: string;\n  /**\n   * If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)\n   * provides a place for the customer to pay a tip.\n   * This field is allowed only on the final payment request\n   * and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.\n   */\n  tippingEnabled?: boolean;\n  /**\n   * If the request method is `CHARGE_CARD_ON_FILE`, this field provides the\n   * card to charge.\n   */\n  cardId?: string;\n  /** A list of one or more reminders to send for the payment request. */\n  reminders?: InvoicePaymentReminder[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  computedAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalCompletedAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  roundingAdjustmentIncludedMoney?: Money;\n}\n\nexport const invoicePaymentRequestSchema: Schema<InvoicePaymentRequest> = object(\n  {\n    uid: ['uid', optional(string())],\n    requestMethod: ['request_method', optional(string())],\n    requestType: ['request_type', optional(string())],\n    dueDate: ['due_date', optional(string())],\n    fixedAmountRequestedMoney: [\n      'fixed_amount_requested_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    percentageRequested: ['percentage_requested', optional(string())],\n    tippingEnabled: ['tipping_enabled', optional(boolean())],\n    cardId: ['card_id', optional(string())],\n    reminders: [\n      'reminders',\n      optional(array(lazy(() => invoicePaymentReminderSchema))),\n    ],\n    computedAmountMoney: [\n      'computed_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    totalCompletedAmountMoney: [\n      'total_completed_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    roundingAdjustmentIncludedMoney: [\n      'rounding_adjustment_included_money',\n      optional(lazy(() => moneySchema)),\n    ],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\n\n/** Provides customer data that Square uses to deliver an invoice. */\nexport interface InvoiceRecipient {\n  /**\n   * The ID of the customer. This is the customer profile ID that\n   * you provide when creating a draft invoice.\n   */\n  customerId?: string;\n  /** The recipient's given (that is, first) name. */\n  givenName?: string;\n  /** The recipient's family (that is, last) name. */\n  familyName?: string;\n  /** The recipient's email address. */\n  emailAddress?: string;\n  /** Represents a physical address. */\n  address?: Address;\n  /** The recipient's phone number. */\n  phoneNumber?: string;\n  /** The name of the recipient's company. */\n  companyName?: string;\n}\n\nexport const invoiceRecipientSchema: Schema<InvoiceRecipient> = object({\n  customerId: ['customer_id', optional(string())],\n  givenName: ['given_name', optional(string())],\n  familyName: ['family_name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  phoneNumber: ['phone_number', optional(string())],\n  companyName: ['company_name', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  InvoicePaymentRequest,\n  invoicePaymentRequestSchema,\n} from './invoicePaymentRequest';\nimport { InvoiceRecipient, invoiceRecipientSchema } from './invoiceRecipient';\nimport { Money, moneySchema } from './money';\n\n/**\n * Stores information about an invoice. You use the Invoices API to create and process\n * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n */\nexport interface Invoice {\n  /** The Square-assigned ID of the invoice. */\n  id?: string;\n  /** The Square-assigned version number, which is incremented each time an update is committed to the invoice. */\n  version?: number;\n  /**\n   * The ID of the location that this invoice is associated with.\n   * This field is required when creating an invoice.\n   */\n  locationId?: string;\n  /**\n   * The ID of the [order](#type-order) for which the invoice is created.\n   * This order must be in the `OPEN` state and must belong to the `location_id`\n   * specified for this invoice. This field is required when creating an invoice.\n   */\n  orderId?: string;\n  /** Provides customer data that Square uses to deliver an invoice. */\n  primaryRecipient?: InvoiceRecipient;\n  /**\n   * An array of `InvoicePaymentRequest` objects. Each object defines\n   * a payment request in an invoice payment schedule. It provides information\n   * such as when and how Square processes payments. You must specify at least one payment request. For invoices\n   * with multiple payment requests, you can specify a maximum of 12 `INSTALLMENT` request types. All of the payment requests must specify the\n   * same `request_method`.\n   * This field is required when creating an invoice.\n   */\n  paymentRequests?: InvoicePaymentRequest[];\n  /**\n   * A user-friendly invoice number. The value is unique within a location.\n   * If not provided when creating an invoice, Square assigns a value.\n   * It increments from 1 and padded with zeros making it 7 characters long\n   * for example, 0000001, 0000002.\n   */\n  invoiceNumber?: string;\n  /** The title of the invoice. */\n  title?: string;\n  /** The description of the invoice. This is visible the customer receiving the invoice. */\n  description?: string;\n  /**\n   * The timestamp when the invoice is scheduled for processing, in RFC 3339 format.\n   * At the specified time, depending on the `request_method`, Square sends the\n   * invoice to the customer's email address or charge the customer's card on file.\n   * If the field is not set, Square processes the invoice immediately after publication.\n   */\n  scheduledAt?: string;\n  /**\n   * The URL of the Square-hosted invoice page.\n   * After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice\n   * page and returns the page URL in the response.\n   */\n  publicUrl?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  nextPaymentAmountMoney?: Money;\n  /** Indicates the status of an invoice. */\n  status?: string;\n  /** The time zone of the date values (for example, `due_date`) specified in the invoice. */\n  timezone?: string;\n  /** The timestamp when the invoice was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the invoice was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const invoiceSchema: Schema<Invoice> = object({\n  id: ['id', optional(string())],\n  version: ['version', optional(number())],\n  locationId: ['location_id', optional(string())],\n  orderId: ['order_id', optional(string())],\n  primaryRecipient: [\n    'primary_recipient',\n    optional(lazy(() => invoiceRecipientSchema)),\n  ],\n  paymentRequests: [\n    'payment_requests',\n    optional(array(lazy(() => invoicePaymentRequestSchema))),\n  ],\n  invoiceNumber: ['invoice_number', optional(string())],\n  title: ['title', optional(string())],\n  description: ['description', optional(string())],\n  scheduledAt: ['scheduled_at', optional(string())],\n  publicUrl: ['public_url', optional(string())],\n  nextPaymentAmountMoney: [\n    'next_payment_amount_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  status: ['status', optional(string())],\n  timezone: ['timezone', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** The response returned by the `CancelInvoice` request. */\nexport interface CancelInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const cancelInvoiceResponseSchema: Schema<CancelInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `CreateInvoice` request. */\nexport interface CreateInvoiceRequest {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice: Invoice;\n  /**\n   * A unique string that identifies the `CreateInvoice` request. If you do not\n   * provide `idempotency_key` (or provide an empty string as the value), the endpoint\n   * treats each request as independent.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const createInvoiceRequestSchema: Schema<CreateInvoiceRequest> = object({\n  invoice: ['invoice', lazy(() => invoiceSchema)],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** The response returned by the `CreateInvoice` request. */\nexport interface CreateInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const createInvoiceResponseSchema: Schema<CreateInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** Describes a `DeleteInvoice` response. */\nexport interface DeleteInvoiceResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const deleteInvoiceResponseSchema: Schema<DeleteInvoiceResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `GetInvoice` response. */\nexport interface GetInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const getInvoiceResponseSchema: Schema<GetInvoiceResponse> = object({\n  invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `ListInvoice` response. */\nexport interface ListInvoicesResponse {\n  /** The invoices retrieved. */\n  invoices?: Invoice[];\n  /**\n   * When a response is truncated, it includes a cursor that you can use in a\n   * subsequent request to fetch the next set of invoices. If empty, this is the final\n   * response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const listInvoicesResponseSchema: Schema<ListInvoicesResponse> = object({\n  invoices: ['invoices', optional(array(lazy(() => invoiceSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Describes a `PublishInvoice` request. */\nexport interface PublishInvoiceRequest {\n  /**\n   * The version of the [Invoice](#type-invoice) to publish.\n   * This must match the current version of the invoice,\n   * otherwise the request is rejected.\n   */\n  version: number;\n  /**\n   * A unique string that identifies the `PublishInvoice` request. If you do not\n   * provide `idempotency_key` (or provide an empty string as the value), the endpoint\n   * treats each request as independent.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n}\n\nexport const publishInvoiceRequestSchema: Schema<PublishInvoiceRequest> = object(\n  {\n    version: ['version', number()],\n    idempotencyKey: ['idempotency_key', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `PublishInvoice` response. */\nexport interface PublishInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const publishInvoiceResponseSchema: Schema<PublishInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Describes query filters to apply. */\nexport interface InvoiceFilter {\n  /**\n   * Limits the search to the specified locations. A location is required.\n   * In the current implementation, only one location can be specified.\n   */\n  locationIds: string[];\n  /**\n   * Limits the search to the specified customers, within the specified locations.\n   * Specifying a customer is optional. In the current implementation,\n   * a maximum of one customer can be specified.\n   */\n  customerIds?: string[];\n}\n\nexport const invoiceFilterSchema: Schema<InvoiceFilter> = object({\n  locationIds: ['location_ids', array(string())],\n  customerIds: ['customer_ids', optional(array(string()))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Identifies the  sort field and sort order. */\nexport interface InvoiceSort {\n  /** Field to use for sorting. */\n  field: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const invoiceSortSchema: Schema<InvoiceSort> = object({\n  field: ['field', string()],\n  order: ['order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { InvoiceFilter, invoiceFilterSchema } from './invoiceFilter';\nimport { InvoiceSort, invoiceSortSchema } from './invoiceSort';\n\n/** Describes query criteria for searching invoices. */\nexport interface InvoiceQuery {\n  /** Describes query filters to apply. */\n  filter: InvoiceFilter;\n  /** Identifies the  sort field and sort order. */\n  sort?: InvoiceSort;\n}\n\nexport const invoiceQuerySchema: Schema<InvoiceQuery> = object({\n  filter: ['filter', lazy(() => invoiceFilterSchema)],\n  sort: ['sort', optional(lazy(() => invoiceSortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { InvoiceQuery, invoiceQuerySchema } from './invoiceQuery';\n\n/** Describes a `SearchInvoices` request. */\nexport interface SearchInvoicesRequest {\n  /** Describes query criteria for searching invoices. */\n  query: InvoiceQuery;\n  /**\n   * The maximum number of invoices to return (200 is the maximum `limit`).\n   * If not provided, the server\n   * uses a default limit of 100 invoices.\n   */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this cursor to retrieve the next set of results for your original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchInvoicesRequestSchema: Schema<SearchInvoicesRequest> = object(\n  {\n    query: ['query', lazy(() => invoiceQuerySchema)],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `SearchInvoices` response. */\nexport interface SearchInvoicesResponse {\n  /** The list of invoices returned by the search. */\n  invoices?: Invoice[];\n  /**\n   * When a response is truncated, it includes a cursor that you can use in a\n   * subsequent request to fetch the next set of invoices. If empty, this is the final\n   * response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const searchInvoicesResponseSchema: Schema<SearchInvoicesResponse> = object(\n  {\n    invoices: ['invoices', optional(array(lazy(() => invoiceSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `UpdateInvoice` request. */\nexport interface UpdateInvoiceRequest {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice: Invoice;\n  /**\n   * A unique string that identifies the `UpdateInvoice` request. If you do not\n   * provide `idempotency_key` (or provide an empty string as the value), the endpoint\n   * treats each request as independent.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey?: string;\n  /**\n   * List of fields to clear.\n   * For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).\n   */\n  fieldsToClear?: string[];\n}\n\nexport const updateInvoiceRequestSchema: Schema<UpdateInvoiceRequest> = object({\n  invoice: ['invoice', lazy(() => invoiceSchema)],\n  idempotencyKey: ['idempotency_key', optional(string())],\n  fieldsToClear: ['fields_to_clear', optional(array(string()))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Invoice, invoiceSchema } from './invoice';\n\n/** Describes a `UpdateInvoice` response. */\nexport interface UpdateInvoiceResponse {\n  /**\n   * Stores information about an invoice. You use the Invoices API to create and process\n   * invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).\n   */\n  invoice?: Invoice;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const updateInvoiceResponseSchema: Schema<UpdateInvoiceResponse> = object(\n  {\n    invoice: ['invoice', optional(lazy(() => invoiceSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CancelInvoiceRequest,\n  cancelInvoiceRequestSchema,\n} from '../models/cancelInvoiceRequest';\nimport {\n  CancelInvoiceResponse,\n  cancelInvoiceResponseSchema,\n} from '../models/cancelInvoiceResponse';\nimport {\n  CreateInvoiceRequest,\n  createInvoiceRequestSchema,\n} from '../models/createInvoiceRequest';\nimport {\n  CreateInvoiceResponse,\n  createInvoiceResponseSchema,\n} from '../models/createInvoiceResponse';\nimport {\n  DeleteInvoiceResponse,\n  deleteInvoiceResponseSchema,\n} from '../models/deleteInvoiceResponse';\nimport {\n  GetInvoiceResponse,\n  getInvoiceResponseSchema,\n} from '../models/getInvoiceResponse';\nimport {\n  ListInvoicesResponse,\n  listInvoicesResponseSchema,\n} from '../models/listInvoicesResponse';\nimport {\n  PublishInvoiceRequest,\n  publishInvoiceRequestSchema,\n} from '../models/publishInvoiceRequest';\nimport {\n  PublishInvoiceResponse,\n  publishInvoiceResponseSchema,\n} from '../models/publishInvoiceResponse';\nimport {\n  SearchInvoicesRequest,\n  searchInvoicesRequestSchema,\n} from '../models/searchInvoicesRequest';\nimport {\n  SearchInvoicesResponse,\n  searchInvoicesResponseSchema,\n} from '../models/searchInvoicesResponse';\nimport {\n  UpdateInvoiceRequest,\n  updateInvoiceRequestSchema,\n} from '../models/updateInvoiceRequest';\nimport {\n  UpdateInvoiceResponse,\n  updateInvoiceResponseSchema,\n} from '../models/updateInvoiceResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class InvoicesApi extends BaseApi {\n  /**\n   * Returns a list of invoices for a given location. The response\n   * is paginated. If truncated, the response includes a `cursor` that you\n   * use in a subsequent request to fetch the next set of invoices.\n   *\n   * @param locationId  The ID of the location for which to list invoices.\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint.  Provide this\n   *                              cursor to retrieve the next set of results for your original query.  For more\n   *                              information, see [Pagination](https://developer.squareup.com/docs/working-with-\n   *                              apis/pagination).\n   * @param limit       The maximum number of invoices to return (200 is the maximum `limit`).  If not\n   *                              provided, the server  uses a default limit of 100 invoices.\n   * @return Response from the API call\n   */\n  async listInvoices(\n    locationId: string,\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListInvoicesResponse>> {\n    const req = this.createRequest('GET', '/v2/invoices');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listInvoicesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a draft [invoice](#type-invoice)\n   * for an order created using the Orders API.\n   *\n   * A draft invoice remains in your account and no action is taken.\n   * You must publish the invoice before Square can process it (send it to the customer's email address\n   * or charge the customer’s card on file).\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                            corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createInvoice(\n    body: CreateInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateInvoiceResponse>> {\n    const req = this.createRequest('POST', '/v2/invoices');\n    const mapped = req.prepareArgs({\n      body: [body, createInvoiceRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for invoices from a location specified in\n   * the filter. You can optionally specify customers in the filter for whom to\n   * retrieve invoices. In the current implementation, you can only specify one location and\n   * optionally one customer.\n   *\n   * The response is paginated. If truncated, the response includes a `cursor`\n   * that you use in a subsequent request to fetch the next set of invoices.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                             corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchInvoices(\n    body: SearchInvoicesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchInvoicesResponse>> {\n    const req = this.createRequest('POST', '/v2/invoices/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchInvoicesRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchInvoicesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes the specified invoice. When an invoice is deleted, the\n   * associated Order status changes to CANCELED. You can only delete a draft\n   * invoice (you cannot delete an invoice scheduled for publication, or a\n   * published invoice).\n   *\n   * @param invoiceId  The ID of the invoice to delete.\n   * @param version    The version of the [invoice](#type-invoice) to delete. If you do not know the version,\n   *                             you can call [GetInvoice](#endpoint-Invoices-GetInvoice) or  [ListInvoices](#endpoint-\n   *                             Invoices-ListInvoices).\n   * @return Response from the API call\n   */\n  async deleteInvoice(\n    invoiceId: string,\n    version?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteInvoiceResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      version: [version, optional(number())],\n    });\n    req.query('version', mapped.version);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}`;\n    return req.callAsJson(deleteInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves an invoice by invoice ID.\n   *\n   * @param invoiceId  The id of the invoice to retrieve.\n   * @return Response from the API call\n   */\n  async getInvoice(\n    invoiceId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetInvoiceResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ invoiceId: [invoiceId, string()] });\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}`;\n    return req.callAsJson(getInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an invoice by modifying field values, clearing field values, or both\n   * as specified in the request.\n   * There are no restrictions to updating an invoice in a draft state.\n   * However, there are guidelines for updating a published invoice.\n   *\n   * @param invoiceId  The id of the invoice to update.\n   * @param body       An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateInvoice(\n    invoiceId: string,\n    body: UpdateInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateInvoiceResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      body: [body, updateInvoiceRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}`;\n    return req.callAsJson(updateInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels an invoice. The seller cannot collect payments for\n   * the canceled invoice.\n   *\n   * You cannot cancel an invoice in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.\n   *\n   * @param invoiceId  The ID of the [invoice](#type-invoice) to cancel.\n   * @param body       An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async cancelInvoice(\n    invoiceId: string,\n    body: CancelInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelInvoiceResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      body: [body, cancelInvoiceRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}/cancel`;\n    return req.callAsJson(cancelInvoiceResponseSchema, requestOptions);\n  }\n\n  /**\n   * Publishes the specified draft invoice.\n   *\n   * After an invoice is published, Square\n   * follows up based on the invoice configuration. For example, Square\n   * sends the invoice to the customer's email address, charges the customer's card on file, or does\n   * nothing. Square also makes the invoice available on a Square-hosted invoice page.\n   *\n   * The invoice `status` also changes from `DRAFT` to a status\n   * based on the invoice configuration. For example, the status changes to `UNPAID` if\n   * Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the\n   * invoice amount).\n   *\n   * @param invoiceId  The id of the invoice to publish.\n   * @param body       An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async publishInvoice(\n    invoiceId: string,\n    body: PublishInvoiceRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<PublishInvoiceResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      invoiceId: [invoiceId, string()],\n      body: [body, publishInvoiceRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/invoices/${mapped.invoiceId}/publish`;\n    return req.callAsJson(publishInvoiceResponseSchema, requestOptions);\n  }\n}\n","import { boolean, number, object, optional, Schema, string } from '../schema';\n\n/**\n * A defined break template that sets an expectation for possible `Break`\n * instances on a `Shift`.\n */\nexport interface BreakType {\n  /** UUID for this object. */\n  id?: string;\n  /** The ID of the business location this type of break applies to. */\n  locationId: string;\n  /**\n   * A human-readable name for this type of break. Will be displayed to\n   * employees in Square products.\n   */\n  breakName: string;\n  /**\n   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of\n   * this break. Precision below minutes is truncated.\n   */\n  expectedDuration: string;\n  /**\n   * Whether this break counts towards time worked for compensation\n   * purposes.\n   */\n  isPaid: boolean;\n  /**\n   * Used for resolving concurrency issues; request will fail if version\n   * provided does not match server version at time of request. If a value is not\n   * provided, Square's servers execute a \"blind\" write; potentially\n   * overwriting another writer's data.\n   */\n  version?: number;\n  /** A read-only timestamp in RFC 3339 format. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const breakTypeSchema: Schema<BreakType> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', string()],\n  breakName: ['break_name', string()],\n  expectedDuration: ['expected_duration', string()],\n  isPaid: ['is_paid', boolean()],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\n\n/** A request to create a new `BreakType` */\nexport interface CreateBreakTypeRequest {\n  /** Unique string value to insure idempotency of the operation */\n  idempotencyKey?: string;\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType: BreakType;\n}\n\nexport const createBreakTypeRequestSchema: Schema<CreateBreakTypeRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    breakType: ['break_type', lazy(() => breakTypeSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to the request to create a `BreakType`. Contains\n * the created `BreakType` object. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface CreateBreakTypeResponse {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType?: BreakType;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createBreakTypeResponseSchema: Schema<CreateBreakTypeResponse> = object(\n  {\n    breakType: ['break_type', optional(lazy(() => breakTypeSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** A record of an employee's break during a shift. */\nexport interface Break {\n  /** UUID for this object */\n  id?: string;\n  /**\n   * RFC 3339; follows same timezone info as `Shift`. Precision up to\n   * the minute is respected; seconds are truncated.\n   */\n  startAt: string;\n  /**\n   * RFC 3339; follows same timezone info as `Shift`. Precision up to\n   * the minute is respected; seconds are truncated.\n   */\n  endAt?: string;\n  /** The `BreakType` this `Break` was templated on. */\n  breakTypeId: string;\n  /** A human-readable name. */\n  name: string;\n  /**\n   * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of\n   * the break.\n   */\n  expectedDuration: string;\n  /**\n   * Whether this break counts towards time worked for compensation\n   * purposes.\n   */\n  isPaid: boolean;\n}\n\nexport const breakSchema: Schema<Break> = object({\n  id: ['id', optional(string())],\n  startAt: ['start_at', string()],\n  endAt: ['end_at', optional(string())],\n  breakTypeId: ['break_type_id', string()],\n  name: ['name', string()],\n  expectedDuration: ['expected_duration', string()],\n  isPaid: ['is_paid', boolean()],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** The hourly wage rate used to compensate an employee for this shift. */\nexport interface ShiftWage {\n  /**\n   * The name of the job performed during this shift. Square\n   * labor-reporting UIs may group shifts together by title.\n   */\n  title?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n}\n\nexport const shiftWageSchema: Schema<ShiftWage> = object({\n  title: ['title', optional(string())],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Break, breakSchema } from './break';\nimport { ShiftWage, shiftWageSchema } from './shiftWage';\n\n/**\n * A record of the hourly rate, start, and end times for a single work shift\n * for an employee. May include a record of the start and end times for breaks\n * taken during the shift.\n */\nexport interface Shift {\n  /** UUID for this object */\n  id?: string;\n  /** The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead */\n  employeeId?: string;\n  /**\n   * The ID of the location this shift occurred at. Should be based on\n   * where the employee clocked in.\n   */\n  locationId?: string;\n  /**\n   * Read-only convenience value that is calculated from the location based\n   * on `location_id`. Format: the IANA Timezone Database identifier for the\n   * location timezone.\n   */\n  timezone?: string;\n  /**\n   * RFC 3339; shifted to location timezone + offset. Precision up to the\n   * minute is respected; seconds are truncated.\n   */\n  startAt: string;\n  /**\n   * RFC 3339; shifted to timezone + offset. Precision up to the minute is\n   * respected; seconds are truncated.\n   */\n  endAt?: string;\n  /** The hourly wage rate used to compensate an employee for this shift. */\n  wage?: ShiftWage;\n  /** A list of any paid or unpaid breaks that were taken during this shift. */\n  breaks?: Break[];\n  /** Enumerates the possible status of a `Shift` */\n  status?: string;\n  /**\n   * Used for resolving concurrency issues; request will fail if version\n   * provided does not match server version at time of request. If not provided,\n   * Square executes a blind write; potentially overwriting data from another\n   * write.\n   */\n  version?: number;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC. */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC. */\n  updatedAt?: string;\n  /** The ID of the team member this shift belongs to. Replaced `employee_id` at version \"2020-08-26\" */\n  teamMemberId?: string;\n}\n\nexport const shiftSchema: Schema<Shift> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  timezone: ['timezone', optional(string())],\n  startAt: ['start_at', string()],\n  endAt: ['end_at', optional(string())],\n  wage: ['wage', optional(lazy(() => shiftWageSchema))],\n  breaks: ['breaks', optional(array(lazy(() => breakSchema)))],\n  status: ['status', optional(string())],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Shift, shiftSchema } from './shift';\n\n/** Represents a request to create a `Shift` */\nexport interface CreateShiftRequest {\n  /** Unique string value to insure the idempotency of the operation. */\n  idempotencyKey?: string;\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. May include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift: Shift;\n}\n\nexport const createShiftRequestSchema: Schema<CreateShiftRequest> = object({\n  idempotencyKey: ['idempotency_key', optional(string())],\n  shift: ['shift', lazy(() => shiftSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * The response to the request to create a `Shift`. Contains\n * the created `Shift` object. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface CreateShiftResponse {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. May include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift?: Shift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createShiftResponseSchema: Schema<CreateShiftResponse> = object({\n  shift: ['shift', optional(lazy(() => shiftSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request to delete a `BreakType`. May contain a set\n * of `Error` objects if the request resulted in errors.\n */\nexport interface DeleteBreakTypeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteBreakTypeResponseSchema: Schema<DeleteBreakTypeResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request to delete a `Shift`. May contain a set of\n * `Error` objects if the request resulted in errors.\n */\nexport interface DeleteShiftResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteShiftResponseSchema: Schema<DeleteShiftResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request to get a `BreakType`. Contains\n * the requested `BreakType` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetBreakTypeResponse {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType?: BreakType;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getBreakTypeResponseSchema: Schema<GetBreakTypeResponse> = object({\n  breakType: ['break_type', optional(lazy(() => breakTypeSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * The hourly wage rate that an employee will earn on a `Shift` for doing the job\n * specified by the `title` property of this object. Deprecated at verison 2020-08-26. Use `TeamMemberWage` instead.\n */\nexport interface EmployeeWage {\n  /** UUID for this object. */\n  id?: string;\n  /** The `Employee` that this wage is assigned to. */\n  employeeId?: string;\n  /** The job title that this wage relates to. */\n  title?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n}\n\nexport const employeeWageSchema: Schema<EmployeeWage> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  title: ['title', optional(string())],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { EmployeeWage, employeeWageSchema } from './employeeWage';\nimport { Error, errorSchema } from './error';\n\n/**\n * A response to a request to get an `EmployeeWage`. Contains\n * the requested `EmployeeWage` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetEmployeeWageResponse {\n  /**\n   * The hourly wage rate that an employee will earn on a `Shift` for doing the job\n   * specified by the `title` property of this object. Deprecated at verison 2020-08-26. Use `TeamMemberWage` instead.\n   */\n  employeeWage?: EmployeeWage;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getEmployeeWageResponseSchema: Schema<GetEmployeeWageResponse> = object(\n  {\n    employeeWage: ['employee_wage', optional(lazy(() => employeeWageSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * A response to request to get a `Shift`. Contains\n * the requested `Shift` object. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetShiftResponse {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. May include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift?: Shift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getShiftResponseSchema: Schema<GetShiftResponse> = object({\n  shift: ['shift', optional(lazy(() => shiftSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * The hourly wage rate that a team member will earn on a `Shift` for doing the job\n * specified by the `title` property of this object.\n */\nexport interface TeamMemberWage {\n  /** UUID for this object. */\n  id?: string;\n  /** The `Team Member` that this wage is assigned to. */\n  teamMemberId?: string;\n  /** The job title that this wage relates to. */\n  title?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n}\n\nexport const teamMemberWageSchema: Schema<TeamMemberWage> = object({\n  id: ['id', optional(string())],\n  teamMemberId: ['team_member_id', optional(string())],\n  title: ['title', optional(string())],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMemberWage, teamMemberWageSchema } from './teamMemberWage';\n\n/**\n * A response to a request to get a `TeamMemberWage`. Contains\n * the requested `TeamMemberWage` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface GetTeamMemberWageResponse {\n  /**\n   * The hourly wage rate that a team member will earn on a `Shift` for doing the job\n   * specified by the `title` property of this object.\n   */\n  teamMemberWage?: TeamMemberWage;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const getTeamMemberWageResponseSchema: Schema<GetTeamMemberWageResponse> = object(\n  {\n    teamMemberWage: [\n      'team_member_wage',\n      optional(lazy(() => teamMemberWageSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request for a set of `BreakTypes`. Contains\n * the requested `BreakType` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface ListBreakTypesResponse {\n  /** A page of `BreakType` results. */\n  breakTypes?: BreakType[];\n  /**\n   * Value supplied in the subsequent request to fetch the next next page\n   * of Break Type results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listBreakTypesResponseSchema: Schema<ListBreakTypesResponse> = object(\n  {\n    breakTypes: ['break_types', optional(array(lazy(() => breakTypeSchema)))],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { EmployeeWage, employeeWageSchema } from './employeeWage';\nimport { Error, errorSchema } from './error';\n\n/**\n * The response to a request for a set of `EmployeeWage` objects. Contains\n * a set of `EmployeeWage`.\n */\nexport interface ListEmployeeWagesResponse {\n  /** A page of Employee Wage results. */\n  employeeWages?: EmployeeWage[];\n  /**\n   * Value supplied in the subsequent request to fetch the next next page\n   * of Employee Wage results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listEmployeeWagesResponseSchema: Schema<ListEmployeeWagesResponse> = object(\n  {\n    employeeWages: [\n      'employee_wages',\n      optional(array(lazy(() => employeeWageSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMemberWage, teamMemberWageSchema } from './teamMemberWage';\n\n/**\n * The response to a request for a set of `TeamMemberWage` objects. Contains\n * a set of `TeamMemberWage`.\n */\nexport interface ListTeamMemberWagesResponse {\n  /** A page of Team Member Wage results. */\n  teamMemberWages?: TeamMemberWage[];\n  /**\n   * Value supplied in the subsequent request to fetch the next next page\n   * of Team Member Wage results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listTeamMemberWagesResponseSchema: Schema<ListTeamMemberWagesResponse> = object(\n  {\n    teamMemberWages: [\n      'team_member_wages',\n      optional(array(lazy(() => teamMemberWageSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * Sets the Day of the week and hour of the day that a business starts a\n * work week. Used for the calculation of overtime pay.\n */\nexport interface WorkweekConfig {\n  /** UUID for this object */\n  id?: string;\n  /** The days of the week. */\n  startOfWeek: string;\n  /**\n   * The local time at which a business week cuts over. Represented as a\n   * string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are\n   * truncated).\n   */\n  startOfDayLocalTime: string;\n  /**\n   * Used for resolving concurrency issues; request will fail if version\n   * provided does not match server version at time of request. If not provided,\n   * Square executes a blind write; potentially overwriting data from another\n   * write.\n   */\n  version?: number;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC */\n  createdAt?: string;\n  /** A read-only timestamp in RFC 3339 format; presented in UTC */\n  updatedAt?: string;\n}\n\nexport const workweekConfigSchema: Schema<WorkweekConfig> = object({\n  id: ['id', optional(string())],\n  startOfWeek: ['start_of_week', string()],\n  startOfDayLocalTime: ['start_of_day_local_time', string()],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WorkweekConfig, workweekConfigSchema } from './workweekConfig';\n\n/**\n * The response to a request for a set of `WorkweekConfig` objects. Contains\n * the requested `WorkweekConfig` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface ListWorkweekConfigsResponse {\n  /** A page of Employee Wage results. */\n  workweekConfigs?: WorkweekConfig[];\n  /**\n   * Value supplied in the subsequent request to fetch the next page of\n   * Employee Wage results.\n   */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const listWorkweekConfigsResponseSchema: Schema<ListWorkweekConfigsResponse> = object(\n  {\n    workweekConfigs: [\n      'workweek_configs',\n      optional(array(lazy(() => workweekConfigSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * A range defined by two dates. Used for filtering a query for Connect v2\n * objects that have date properties.\n */\nexport interface DateRange {\n  /**\n   * String in `YYYY-MM-DD` format, e.g. `2017-10-31` per the ISO 8601\n   * extended format for calendar dates.\n   * The beginning of a date range (inclusive)\n   */\n  startDate?: string;\n  /**\n   * String in `YYYY-MM-DD` format, e.g. `2017-10-31` per the ISO 8601\n   * extended format for calendar dates.\n   * The end of a date range (inclusive)\n   */\n  endDate?: string;\n}\n\nexport const dateRangeSchema: Schema<DateRange> = object({\n  startDate: ['start_date', optional(string())],\n  endDate: ['end_date', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { DateRange, dateRangeSchema } from './dateRange';\n\n/**\n * A `Shift` search query filter parameter that sets a range of days that\n * a `Shift` must start or end in before passing the filter condition.\n */\nexport interface ShiftWorkday {\n  /**\n   * A range defined by two dates. Used for filtering a query for Connect v2\n   * objects that have date properties.\n   */\n  dateRange?: DateRange;\n  /** Defines the logic used to apply a workday filter. */\n  matchShiftsBy?: string;\n  /**\n   * Location-specific timezones convert workdays to datetime filters.\n   * Every location included in the query must have a timezone, or this field\n   * must be provided as a fallback. Format: the IANA timezone database\n   * identifier for the relevant timezone.\n   */\n  defaultTimezone?: string;\n}\n\nexport const shiftWorkdaySchema: Schema<ShiftWorkday> = object({\n  dateRange: ['date_range', optional(lazy(() => dateRangeSchema))],\n  matchShiftsBy: ['match_shifts_by', optional(string())],\n  defaultTimezone: ['default_timezone', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { ShiftWorkday, shiftWorkdaySchema } from './shiftWorkday';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/**\n * Defines a filter used in a search for `Shift` records. `AND` logic is\n * used by Square's servers to apply each filter property specified.\n */\nexport interface ShiftFilter {\n  /** Fetch shifts for the specified location. */\n  locationIds: string[];\n  /** Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead */\n  employeeIds?: string[];\n  /** Specifies the `status` of `Shift` records to be returned. */\n  status?: string;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  start?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  end?: TimeRange;\n  /**\n   * A `Shift` search query filter parameter that sets a range of days that\n   * a `Shift` must start or end in before passing the filter condition.\n   */\n  workday?: ShiftWorkday;\n  /** Fetch shifts for the specified team members. Replaced `employee_ids` at version \"2020-08-26\" */\n  teamMemberIds: string[];\n}\n\nexport const shiftFilterSchema: Schema<ShiftFilter> = object({\n  locationIds: ['location_ids', array(string())],\n  employeeIds: ['employee_ids', optional(array(string()))],\n  status: ['status', optional(string())],\n  start: ['start', optional(lazy(() => timeRangeSchema))],\n  end: ['end', optional(lazy(() => timeRangeSchema))],\n  workday: ['workday', optional(lazy(() => shiftWorkdaySchema))],\n  teamMemberIds: ['team_member_ids', array(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Sets the sort order of search results. */\nexport interface ShiftSort {\n  /** Enumerates the `Shift` fields to sort on. */\n  field?: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  order?: string;\n}\n\nexport const shiftSortSchema: Schema<ShiftSort> = object({\n  field: ['field', optional(string())],\n  order: ['order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { ShiftFilter, shiftFilterSchema } from './shiftFilter';\nimport { ShiftSort, shiftSortSchema } from './shiftSort';\n\n/** The parameters of a `Shift` search query. Includes filter and sort options. */\nexport interface ShiftQuery {\n  /**\n   * Defines a filter used in a search for `Shift` records. `AND` logic is\n   * used by Square's servers to apply each filter property specified.\n   */\n  filter?: ShiftFilter;\n  /** Sets the sort order of search results. */\n  sort?: ShiftSort;\n}\n\nexport const shiftQuerySchema: Schema<ShiftQuery> = object({\n  filter: ['filter', optional(lazy(() => shiftFilterSchema))],\n  sort: ['sort', optional(lazy(() => shiftSortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { ShiftQuery, shiftQuerySchema } from './shiftQuery';\n\n/** A request for a filtered and sorted set of `Shift` objects. */\nexport interface SearchShiftsRequest {\n  /** The parameters of a `Shift` search query. Includes filter and sort options. */\n  query?: ShiftQuery;\n  /** number of resources in a page (200 by default). */\n  limit?: number;\n  /** opaque cursor for fetching the next page. */\n  cursor?: string;\n}\n\nexport const searchShiftsRequestSchema: Schema<SearchShiftsRequest> = object({\n  query: ['query', optional(lazy(() => shiftQuerySchema))],\n  limit: ['limit', optional(number())],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * The response to a request for `Shift` objects. Contains\n * the requested `Shift` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface SearchShiftsResponse {\n  /** Shifts */\n  shifts?: Shift[];\n  /** Opaque cursor for fetching the next page. */\n  cursor?: string;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const searchShiftsResponseSchema: Schema<SearchShiftsResponse> = object({\n  shifts: ['shifts', optional(array(lazy(() => shiftSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\n\n/** A request to update a `BreakType` */\nexport interface UpdateBreakTypeRequest {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType: BreakType;\n}\n\nexport const updateBreakTypeRequestSchema: Schema<UpdateBreakTypeRequest> = object(\n  { breakType: ['break_type', lazy(() => breakTypeSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { BreakType, breakTypeSchema } from './breakType';\nimport { Error, errorSchema } from './error';\n\n/**\n * A response to a request to update a `BreakType`. Contains\n * the requested `BreakType` objects. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface UpdateBreakTypeResponse {\n  /**\n   * A defined break template that sets an expectation for possible `Break`\n   * instances on a `Shift`.\n   */\n  breakType?: BreakType;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateBreakTypeResponseSchema: Schema<UpdateBreakTypeResponse> = object(\n  {\n    breakType: ['break_type', optional(lazy(() => breakTypeSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { Shift, shiftSchema } from './shift';\n\n/** A request to update a `Shift` object. */\nexport interface UpdateShiftRequest {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. May include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift: Shift;\n}\n\nexport const updateShiftRequestSchema: Schema<UpdateShiftRequest> = object({\n  shift: ['shift', lazy(() => shiftSchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Shift, shiftSchema } from './shift';\n\n/**\n * The response to a request to update a `Shift`. Contains\n * the updated `Shift` object. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface UpdateShiftResponse {\n  /**\n   * A record of the hourly rate, start, and end times for a single work shift\n   * for an employee. May include a record of the start and end times for breaks\n   * taken during the shift.\n   */\n  shift?: Shift;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateShiftResponseSchema: Schema<UpdateShiftResponse> = object({\n  shift: ['shift', optional(lazy(() => shiftSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, Schema } from '../schema';\nimport { WorkweekConfig, workweekConfigSchema } from './workweekConfig';\n\n/** A request to update a `WorkweekConfig` object */\nexport interface UpdateWorkweekConfigRequest {\n  /**\n   * Sets the Day of the week and hour of the day that a business starts a\n   * work week. Used for the calculation of overtime pay.\n   */\n  workweekConfig: WorkweekConfig;\n}\n\nexport const updateWorkweekConfigRequestSchema: Schema<UpdateWorkweekConfigRequest> = object(\n  { workweekConfig: ['workweek_config', lazy(() => workweekConfigSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WorkweekConfig, workweekConfigSchema } from './workweekConfig';\n\n/**\n * The response to a request to update a `WorkweekConfig` object. Contains\n * the updated `WorkweekConfig` object. May contain a set of `Error` objects if\n * the request resulted in errors.\n */\nexport interface UpdateWorkweekConfigResponse {\n  /**\n   * Sets the Day of the week and hour of the day that a business starts a\n   * work week. Used for the calculation of overtime pay.\n   */\n  workweekConfig?: WorkweekConfig;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateWorkweekConfigResponseSchema: Schema<UpdateWorkweekConfigResponse> = object(\n  {\n    workweekConfig: [\n      'workweek_config',\n      optional(lazy(() => workweekConfigSchema)),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateBreakTypeRequest,\n  createBreakTypeRequestSchema,\n} from '../models/createBreakTypeRequest';\nimport {\n  CreateBreakTypeResponse,\n  createBreakTypeResponseSchema,\n} from '../models/createBreakTypeResponse';\nimport {\n  CreateShiftRequest,\n  createShiftRequestSchema,\n} from '../models/createShiftRequest';\nimport {\n  CreateShiftResponse,\n  createShiftResponseSchema,\n} from '../models/createShiftResponse';\nimport {\n  DeleteBreakTypeResponse,\n  deleteBreakTypeResponseSchema,\n} from '../models/deleteBreakTypeResponse';\nimport {\n  DeleteShiftResponse,\n  deleteShiftResponseSchema,\n} from '../models/deleteShiftResponse';\nimport {\n  GetBreakTypeResponse,\n  getBreakTypeResponseSchema,\n} from '../models/getBreakTypeResponse';\nimport {\n  GetEmployeeWageResponse,\n  getEmployeeWageResponseSchema,\n} from '../models/getEmployeeWageResponse';\nimport {\n  GetShiftResponse,\n  getShiftResponseSchema,\n} from '../models/getShiftResponse';\nimport {\n  GetTeamMemberWageResponse,\n  getTeamMemberWageResponseSchema,\n} from '../models/getTeamMemberWageResponse';\nimport {\n  ListBreakTypesResponse,\n  listBreakTypesResponseSchema,\n} from '../models/listBreakTypesResponse';\nimport {\n  ListEmployeeWagesResponse,\n  listEmployeeWagesResponseSchema,\n} from '../models/listEmployeeWagesResponse';\nimport {\n  ListTeamMemberWagesResponse,\n  listTeamMemberWagesResponseSchema,\n} from '../models/listTeamMemberWagesResponse';\nimport {\n  ListWorkweekConfigsResponse,\n  listWorkweekConfigsResponseSchema,\n} from '../models/listWorkweekConfigsResponse';\nimport {\n  SearchShiftsRequest,\n  searchShiftsRequestSchema,\n} from '../models/searchShiftsRequest';\nimport {\n  SearchShiftsResponse,\n  searchShiftsResponseSchema,\n} from '../models/searchShiftsResponse';\nimport {\n  UpdateBreakTypeRequest,\n  updateBreakTypeRequestSchema,\n} from '../models/updateBreakTypeRequest';\nimport {\n  UpdateBreakTypeResponse,\n  updateBreakTypeResponseSchema,\n} from '../models/updateBreakTypeResponse';\nimport {\n  UpdateShiftRequest,\n  updateShiftRequestSchema,\n} from '../models/updateShiftRequest';\nimport {\n  UpdateShiftResponse,\n  updateShiftResponseSchema,\n} from '../models/updateShiftResponse';\nimport {\n  UpdateWorkweekConfigRequest,\n  updateWorkweekConfigRequestSchema,\n} from '../models/updateWorkweekConfigRequest';\nimport {\n  UpdateWorkweekConfigResponse,\n  updateWorkweekConfigResponseSchema,\n} from '../models/updateWorkweekConfigResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class LaborApi extends BaseApi {\n  /**\n   * Returns a paginated list of `BreakType` instances for a business.\n   *\n   * @param locationId  Filter Break Types returned to only those that are associated with the specified\n   *                              location.\n   * @param limit       Maximum number of Break Types to return per page. Can range between 1 and 200. The\n   *                              default is the maximum at 200.\n   * @param cursor      Pointer to the next page of Break Type results to fetch.\n   * @return Response from the API call\n   */\n  async listBreakTypes(\n    locationId?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListBreakTypesResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/break-types');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('location_id', mapped.locationId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listBreakTypesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new `BreakType`.\n   *\n   * A `BreakType` is a template for creating `Break` objects.\n   * You must provide the following values in your request to this\n   * endpoint:\n   *\n   * - `location_id`\n   * - `break_name`\n   * - `expected_duration`\n   * - `is_paid`\n   *\n   * You can only have 3 `BreakType` instances per location. If you attempt to add a 4th\n   * `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\"\n   * is returned.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                              corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createBreakType(\n    body: CreateBreakTypeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateBreakTypeResponse>> {\n    const req = this.createRequest('POST', '/v2/labor/break-types');\n    const mapped = req.prepareArgs({\n      body: [body, createBreakTypeRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing `BreakType`.\n   *\n   * A `BreakType` can be deleted even if it is referenced from a `Shift`.\n   *\n   * @param id UUID for the `BreakType` being deleted.\n   * @return Response from the API call\n   */\n  async deleteBreakType(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteBreakTypeResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/break-types/${mapped.id}`;\n    return req.callAsJson(deleteBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `BreakType` specified by id.\n   *\n   * @param id UUID for the `BreakType` being retrieved.\n   * @return Response from the API call\n   */\n  async getBreakType(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetBreakTypeResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/break-types/${mapped.id}`;\n    return req.callAsJson(getBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an existing `BreakType`.\n   *\n   * @param id   UUID for the `BreakType` being updated.\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                              corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateBreakType(\n    id: string,\n    body: UpdateBreakTypeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateBreakTypeResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      id: [id, string()],\n      body: [body, updateBreakTypeRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/labor/break-types/${mapped.id}`;\n    return req.callAsJson(updateBreakTypeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `EmployeeWage` instances for a business.\n   *\n   * @param employeeId  Filter wages returned to only those that are associated with the specified employee.\n   * @param limit       Maximum number of Employee Wages to return per page. Can range between 1 and 200.\n   *                              The default is the maximum at 200.\n   * @param cursor      Pointer to the next page of Employee Wage results to fetch.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listEmployeeWages(\n    employeeId?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListEmployeeWagesResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/employee-wages');\n    const mapped = req.prepareArgs({\n      employeeId: [employeeId, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('employee_id', mapped.employeeId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    req.deprecated('LaborApi.listEmployeeWages');\n    return req.callAsJson(listEmployeeWagesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `EmployeeWage` specified by id.\n   *\n   * @param id UUID for the `EmployeeWage` being retrieved.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async getEmployeeWage(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetEmployeeWageResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/employee-wages/${mapped.id}`;\n    req.deprecated('LaborApi.getEmployeeWage');\n    return req.callAsJson(getEmployeeWageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a new `Shift`.\n   *\n   * A `Shift` represents a complete work day for a single employee.\n   * You must provide the following values in your request to this\n   * endpoint:\n   *\n   * - `location_id`\n   * - `employee_id`\n   * - `start_at`\n   *\n   * An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:\n   * - The `status` of the new `Shift` is `OPEN` and the employee has another\n   * shift with an `OPEN` status.\n   * - The `start_at` date is in the future\n   * - the `start_at` or `end_at` overlaps another shift for the same employee\n   * - If `Break`s are set in the request, a break `start_at`\n   * must not be before the `Shift.start_at`. A break `end_at` must not be after\n   * the `Shift.end_at`\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                          corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createShift(\n    body: CreateShiftRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateShiftResponse>> {\n    const req = this.createRequest('POST', '/v2/labor/shifts');\n    const mapped = req.prepareArgs({ body: [body, createShiftRequestSchema] });\n    req.json(mapped.body);\n    return req.callAsJson(createShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `Shift` records for a business.\n   * The list to be returned can be filtered by:\n   * - Location IDs **and**\n   * - employee IDs **and**\n   * - shift status (`OPEN`, `CLOSED`) **and**\n   * - shift start **and**\n   * - shift end **and**\n   * - work day details\n   *\n   * The list can be sorted by:\n   * - `start_at`\n   * - `end_at`\n   * - `created_at`\n   * - `updated_at`\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                           corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchShifts(\n    body: SearchShiftsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchShiftsResponse>> {\n    const req = this.createRequest('POST', '/v2/labor/shifts/search');\n    const mapped = req.prepareArgs({ body: [body, searchShiftsRequestSchema] });\n    req.json(mapped.body);\n    return req.callAsJson(searchShiftsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a `Shift`.\n   *\n   * @param id UUID for the `Shift` being deleted.\n   * @return Response from the API call\n   */\n  async deleteShift(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteShiftResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/shifts/${mapped.id}`;\n    return req.callAsJson(deleteShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `Shift` specified by id.\n   *\n   * @param id UUID for the `Shift` being retrieved.\n   * @return Response from the API call\n   */\n  async getShift(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetShiftResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/shifts/${mapped.id}`;\n    return req.callAsJson(getShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an existing `Shift`.\n   *\n   * When adding a `Break` to a `Shift`, any earlier `Breaks` in the `Shift` have\n   * the `end_at` property set to a valid RFC-3339 datetime string.\n   *\n   * When closing a `Shift`, all `Break` instances in the shift must be complete with `end_at`\n   * set on each `Break`.\n   *\n   * @param id   ID of the object being updated.\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                          corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateShift(\n    id: string,\n    body: UpdateShiftRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateShiftResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      id: [id, string()],\n      body: [body, updateShiftRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/labor/shifts/${mapped.id}`;\n    return req.callAsJson(updateShiftResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `TeamMemberWage` instances for a business.\n   *\n   * @param teamMemberId   Filter wages returned to only those that are associated with the specified team\n   *                                 member.\n   * @param limit          Maximum number of Team Member Wages to return per page. Can range between 1 and\n   *                                 200. The default is the maximum at 200.\n   * @param cursor         Pointer to the next page of Employee Wage results to fetch.\n   * @return Response from the API call\n   */\n  async listTeamMemberWages(\n    teamMemberId?: string,\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListTeamMemberWagesResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/team-member-wages');\n    const mapped = req.prepareArgs({\n      teamMemberId: [teamMemberId, optional(string())],\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('team_member_id', mapped.teamMemberId);\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listTeamMemberWagesResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a single `TeamMemberWage` specified by id.\n   *\n   * @param id UUID for the `TeamMemberWage` being retrieved.\n   * @return Response from the API call\n   */\n  async getTeamMemberWage(\n    id: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetTeamMemberWageResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ id: [id, string()] });\n    req.appendTemplatePath`/v2/labor/team-member-wages/${mapped.id}`;\n    return req.callAsJson(getTeamMemberWageResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of `WorkweekConfig` instances for a business.\n   *\n   * @param limit  Maximum number of Workweek Configs to return per page.\n   * @param cursor Pointer to the next page of Workweek Config results to fetch.\n   * @return Response from the API call\n   */\n  async listWorkweekConfigs(\n    limit?: number,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListWorkweekConfigsResponse>> {\n    const req = this.createRequest('GET', '/v2/labor/workweek-configs');\n    const mapped = req.prepareArgs({\n      limit: [limit, optional(number())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('limit', mapped.limit);\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listWorkweekConfigsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a `WorkweekConfig`.\n   *\n   * @param id   UUID for the `WorkweekConfig` object being updated.\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateWorkweekConfig(\n    id: string,\n    body: UpdateWorkweekConfigRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateWorkweekConfigResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      id: [id, string()],\n      body: [body, updateWorkweekConfigRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/labor/workweek-configs/${mapped.id}`;\n    return req.callAsJson(updateWorkweekConfigResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a period of time during which a business location is open. */\nexport interface BusinessHoursPeriod {\n  /** Indicates the specific day  of the week. */\n  dayOfWeek?: string;\n  /**\n   * The start time of a business hours period, specified in local time using partial-time\n   * RFC 3339 format.\n   */\n  startLocalTime?: string;\n  /**\n   * The end time of a business hours period, specified in local time using partial-time\n   * RFC 3339 format.\n   */\n  endLocalTime?: string;\n}\n\nexport const businessHoursPeriodSchema: Schema<BusinessHoursPeriod> = object({\n  dayOfWeek: ['day_of_week', optional(string())],\n  startLocalTime: ['start_local_time', optional(string())],\n  endLocalTime: ['end_local_time', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport {\n  BusinessHoursPeriod,\n  businessHoursPeriodSchema,\n} from './businessHoursPeriod';\n\n/** Represents the hours of operation for a business location. */\nexport interface BusinessHours {\n  /**\n   * The list of time periods during which the business is open. There may be at most 10\n   * periods per day.\n   */\n  periods?: BusinessHoursPeriod[];\n}\n\nexport const businessHoursSchema: Schema<BusinessHours> = object({\n  periods: ['periods', optional(array(lazy(() => businessHoursPeriodSchema)))],\n});\n","import { number, object, optional, Schema } from '../schema';\n\n/** Latitude and longitude coordinates. */\nexport interface Coordinates {\n  /** The latitude of the coordinate expressed in degrees. */\n  latitude?: number;\n  /** The longitude of the coordinate expressed in degrees. */\n  longitude?: number;\n}\n\nexport const coordinatesSchema: Schema<Coordinates> = object({\n  latitude: ['latitude', optional(number())],\n  longitude: ['longitude', optional(number())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { BusinessHours, businessHoursSchema } from './businessHours';\nimport { Coordinates, coordinatesSchema } from './coordinates';\n\nexport interface Location {\n  /** The Square-issued ID of the location. */\n  id?: string;\n  /**\n   * The name of the location.\n   * This information appears in the dashboard as the nickname.\n   */\n  name?: string;\n  /** Represents a physical address. */\n  address?: Address;\n  /**\n   * The [IANA Timezone](https://www.iana.org/time-zones) identifier for\n   * the timezone of the location.\n   */\n  timezone?: string;\n  /**\n   * The Square features that are enabled for the location.\n   * See [LocationCapability](#type-locationcapability) for possible values.\n   * See [LocationCapability](#type-locationcapability) for possible values\n   */\n  capabilities?: string[];\n  /** The status of the location, whether a location is active or inactive. */\n  status?: string;\n  /** The time when the location was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The ID of the merchant that owns the location. */\n  merchantId?: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country?: string;\n  /**\n   * The language associated with the location, in\n   * [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).\n   */\n  languageCode?: string;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency?: string;\n  /** The phone number of the location in human readable format. */\n  phoneNumber?: string;\n  /**\n   * The business name of the location\n   * This is the name visible to the customers of the location.\n   * For example, this name appears on customer receipts.\n   */\n  businessName?: string;\n  /** A location's physical or mobile type. */\n  type?: string;\n  /** The website URL of the location. */\n  websiteUrl?: string;\n  /** Represents the hours of operation for a business location. */\n  businessHours?: BusinessHours;\n  /**\n   * The email of the location.\n   * This email is visible to the customers of the location.\n   * For example, the email appears on customer receipts.\n   */\n  businessEmail?: string;\n  /** The description of the location. */\n  description?: string;\n  /** The Twitter username of the location without the '@' symbol. */\n  twitterUsername?: string;\n  /** The Instagram username of the location without the '@' symbol. */\n  instagramUsername?: string;\n  /** The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. */\n  facebookUrl?: string;\n  /** Latitude and longitude coordinates. */\n  coordinates?: Coordinates;\n  /**\n   * The URL of the logo image for the location. The Seller must choose this logo in the Seller\n   * dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)\n   * that Square generates on behalf of the Seller. This image should have an aspect ratio\n   * close to 1:1 and is recommended to be at least 200x200 pixels.\n   */\n  logoUrl?: string;\n  /** The URL of the Point of Sale background image for the location. */\n  posBackgroundUrl?: string;\n  /**\n   * The merchant category code (MCC) of the location, as standardized by ISO 18245.\n   * The MCC describes the kind of goods or services sold at the location.\n   */\n  mcc?: string;\n  /**\n   * The URL of a full-format logo image for the location. The Seller must choose this logo in the\n   * Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)\n   * that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater\n   * and is recommended to be at least 1280x648 pixels.\n   */\n  fullFormatLogoUrl?: string;\n}\n\nexport const locationSchema: Schema<Location> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  address: ['address', optional(lazy(() => addressSchema))],\n  timezone: ['timezone', optional(string())],\n  capabilities: ['capabilities', optional(array(string()))],\n  status: ['status', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  country: ['country', optional(string())],\n  languageCode: ['language_code', optional(string())],\n  currency: ['currency', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  businessName: ['business_name', optional(string())],\n  type: ['type', optional(string())],\n  websiteUrl: ['website_url', optional(string())],\n  businessHours: ['business_hours', optional(lazy(() => businessHoursSchema))],\n  businessEmail: ['business_email', optional(string())],\n  description: ['description', optional(string())],\n  twitterUsername: ['twitter_username', optional(string())],\n  instagramUsername: ['instagram_username', optional(string())],\n  facebookUrl: ['facebook_url', optional(string())],\n  coordinates: ['coordinates', optional(lazy(() => coordinatesSchema))],\n  logoUrl: ['logo_url', optional(string())],\n  posBackgroundUrl: ['pos_background_url', optional(string())],\n  mcc: ['mcc', optional(string())],\n  fullFormatLogoUrl: ['full_format_logo_url', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Location, locationSchema } from './location';\n\n/** Request object for the [CreateLocation](#endpoint-createlocation) endpoint. */\nexport interface CreateLocationRequest {\n  location?: Location;\n}\n\nexport const createLocationRequestSchema: Schema<CreateLocationRequest> = object(\n  { location: ['location', optional(lazy(() => locationSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/** Response object returned by the [CreateLocation](#endpoint-createlocation) endpoint. */\nexport interface CreateLocationResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  location?: Location;\n}\n\nexport const createLocationResponseSchema: Schema<CreateLocationResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    location: ['location', optional(lazy(() => locationSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the __ListLocations__ endpoint.\n * One of `errors` or `locations` is present in a given response (never both).\n */\nexport interface ListLocationsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The business locations. */\n  locations?: Location[];\n}\n\nexport const listLocationsResponseSchema: Schema<ListLocationsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    locations: ['locations', optional(array(lazy(() => locationSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/**\n * Defines the fields that the\n * [RetrieveLocation](#endpoint-retrievelocation) endpoint returns\n * in a response.\n */\nexport interface RetrieveLocationResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  location?: Location;\n}\n\nexport const retrieveLocationResponseSchema: Schema<RetrieveLocationResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    location: ['location', optional(lazy(() => locationSchema))],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Location, locationSchema } from './location';\n\n/** Request object for the [UpdateLocation](#endpoint-updatelocation) endpoint. */\nexport interface UpdateLocationRequest {\n  location?: Location;\n}\n\nexport const updateLocationRequestSchema: Schema<UpdateLocationRequest> = object(\n  { location: ['location', optional(lazy(() => locationSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Location, locationSchema } from './location';\n\n/** Response object returned by the [UpdateLocation](#endpoint-updatelocation) endpoint. */\nexport interface UpdateLocationResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  location?: Location;\n}\n\nexport const updateLocationResponseSchema: Schema<UpdateLocationResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    location: ['location', optional(lazy(() => locationSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateLocationRequest,\n  createLocationRequestSchema,\n} from '../models/createLocationRequest';\nimport {\n  CreateLocationResponse,\n  createLocationResponseSchema,\n} from '../models/createLocationResponse';\nimport {\n  ListLocationsResponse,\n  listLocationsResponseSchema,\n} from '../models/listLocationsResponse';\nimport {\n  RetrieveLocationResponse,\n  retrieveLocationResponseSchema,\n} from '../models/retrieveLocationResponse';\nimport {\n  UpdateLocationRequest,\n  updateLocationRequestSchema,\n} from '../models/updateLocationRequest';\nimport {\n  UpdateLocationResponse,\n  updateLocationResponseSchema,\n} from '../models/updateLocationResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class LocationsApi extends BaseApi {\n  /**\n   * Provides information of all locations of a business.\n   *\n   * Many Square API endpoints require a `location_id` parameter.\n   * The `id` field of the [`Location`](#type-location) objects returned by this\n   * endpoint correspond to that `location_id` parameter.\n   *\n   * @return Response from the API call\n   */\n  async listLocations(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListLocationsResponse>> {\n    const req = this.createRequest('GET', '/v2/locations');\n    return req.callAsJson(listLocationsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a location.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                             corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createLocation(\n    body: CreateLocationRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateLocationResponse>> {\n    const req = this.createRequest('POST', '/v2/locations');\n    const mapped = req.prepareArgs({\n      body: [body, createLocationRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createLocationResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves details of a location. You can specify \"main\"\n   * as the location ID to retrieve details of the\n   * main location.\n   *\n   * @param locationId  The ID of the location to retrieve. If you specify the string \"main\", then the\n   *                              endpoint returns the main location.\n   * @return Response from the API call\n   */\n  async retrieveLocation(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLocationResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}`;\n    return req.callAsJson(retrieveLocationResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a location.\n   *\n   * @param locationId  The ID of the location to update.\n   * @param body        An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateLocation(\n    locationId: string,\n    body: UpdateLocationRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateLocationResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, updateLocationRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}`;\n    return req.callAsJson(updateLocationResponseSchema, requestOptions);\n  }\n}\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */\nexport interface LoyaltyEventAccumulatePoints {\n  /** The ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId?: string;\n  /** The number of points accumulated by the event. */\n  points?: number;\n  /**\n   * The ID of the [order](#type-Order) for which the buyer accumulated the points.\n   * This field is returned only if the Orders API is used to process orders.\n   */\n  orderId?: string;\n}\n\nexport const loyaltyEventAccumulatePointsSchema: Schema<LoyaltyEventAccumulatePoints> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', optional(string())],\n    points: ['points', optional(number())],\n    orderId: ['order_id', optional(string())],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport {\n  LoyaltyEventAccumulatePoints,\n  loyaltyEventAccumulatePointsSchema,\n} from './loyaltyEventAccumulatePoints';\n\n/** A request to accumulate points for a purchase. */\nexport interface AccumulateLoyaltyPointsRequest {\n  /** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */\n  accumulatePoints: LoyaltyEventAccumulatePoints;\n  /**\n   * A unique string that identifies the `AccumulateLoyaltyPoints` request.\n   * Keys can be any valid string but must be unique for every request.\n   */\n  idempotencyKey: string;\n  /** The [location](#type-Location) where the purchase was made. */\n  locationId: string;\n}\n\nexport const accumulateLoyaltyPointsRequestSchema: Schema<AccumulateLoyaltyPointsRequest> = object(\n  {\n    accumulatePoints: [\n      'accumulate_points',\n      lazy(() => loyaltyEventAccumulatePointsSchema),\n    ],\n    idempotencyKey: ['idempotency_key', string()],\n    locationId: ['location_id', string()],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `ADJUST_POINTS`. */\nexport interface LoyaltyEventAdjustPoints {\n  /** The Square-assigned ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId?: string;\n  /** The number of points added or removed. */\n  points: number;\n  /** The reason for the adjustment of points. */\n  reason?: string;\n}\n\nexport const loyaltyEventAdjustPointsSchema: Schema<LoyaltyEventAdjustPoints> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', optional(string())],\n    points: ['points', number()],\n    reason: ['reason', optional(string())],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `CREATE_REWARD`. */\nexport interface LoyaltyEventCreateReward {\n  /** The ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /**\n   * The Square-assigned ID of the created [loyalty reward](#type-LoyaltyReward).\n   * This field is returned only if the event source is `LOYALTY_API`.\n   */\n  rewardId?: string;\n  /** The loyalty points used to create the reward. */\n  points: number;\n}\n\nexport const loyaltyEventCreateRewardSchema: Schema<LoyaltyEventCreateReward> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    rewardId: ['reward_id', optional(string())],\n    points: ['points', number()],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `DELETE_REWARD`. */\nexport interface LoyaltyEventDeleteReward {\n  /** The ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /**\n   * The ID of the deleted [loyalty reward](#type-LoyaltyReward).\n   * This field is returned only if the event source is `LOYALTY_API`.\n   */\n  rewardId?: string;\n  /** The number of points returned to the loyalty account. */\n  points: number;\n}\n\nexport const loyaltyEventDeleteRewardSchema: Schema<LoyaltyEventDeleteReward> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    rewardId: ['reward_id', optional(string())],\n    points: ['points', number()],\n  }\n);\n","import { number, object, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `EXPIRE_POINTS`. */\nexport interface LoyaltyEventExpirePoints {\n  /** The Square-assigned ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /** The number of points expired. */\n  points: number;\n}\n\nexport const loyaltyEventExpirePointsSchema: Schema<LoyaltyEventExpirePoints> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    points: ['points', number()],\n  }\n);\n","import { number, object, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `OTHER`. */\nexport interface LoyaltyEventOther {\n  /** The Square-assigned ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /** The number of points added or removed. */\n  points: number;\n}\n\nexport const loyaltyEventOtherSchema: Schema<LoyaltyEventOther> = object({\n  loyaltyProgramId: ['loyalty_program_id', string()],\n  points: ['points', number()],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** Provides metadata when the event `type` is `REDEEM_REWARD`. */\nexport interface LoyaltyEventRedeemReward {\n  /** The ID of the [loyalty program](#type-LoyaltyProgram). */\n  loyaltyProgramId: string;\n  /**\n   * The ID of the redeemed [loyalty reward](#type-LoyaltyReward).\n   * This field is returned only if the event source is `LOYALTY_API`.\n   */\n  rewardId?: string;\n  /**\n   * The ID of the [order](#type-Order) that redeemed the reward.\n   * This field is returned only if the Orders API is used to process orders.\n   */\n  orderId?: string;\n}\n\nexport const loyaltyEventRedeemRewardSchema: Schema<LoyaltyEventRedeemReward> = object(\n  {\n    loyaltyProgramId: ['loyalty_program_id', string()],\n    rewardId: ['reward_id', optional(string())],\n    orderId: ['order_id', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyEventAccumulatePoints,\n  loyaltyEventAccumulatePointsSchema,\n} from './loyaltyEventAccumulatePoints';\nimport {\n  LoyaltyEventAdjustPoints,\n  loyaltyEventAdjustPointsSchema,\n} from './loyaltyEventAdjustPoints';\nimport {\n  LoyaltyEventCreateReward,\n  loyaltyEventCreateRewardSchema,\n} from './loyaltyEventCreateReward';\nimport {\n  LoyaltyEventDeleteReward,\n  loyaltyEventDeleteRewardSchema,\n} from './loyaltyEventDeleteReward';\nimport {\n  LoyaltyEventExpirePoints,\n  loyaltyEventExpirePointsSchema,\n} from './loyaltyEventExpirePoints';\nimport {\n  LoyaltyEventOther,\n  loyaltyEventOtherSchema,\n} from './loyaltyEventOther';\nimport {\n  LoyaltyEventRedeemReward,\n  loyaltyEventRedeemRewardSchema,\n} from './loyaltyEventRedeemReward';\n\n/**\n * Provides information about a loyalty event.\n * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).\n */\nexport interface LoyaltyEvent {\n  /** The Square-assigned ID of the loyalty event. */\n  id: string;\n  /** The type of the loyalty event. */\n  type: string;\n  /** The timestamp when the event was created, in RFC 3339 format. */\n  createdAt: string;\n  /** Provides metadata when the event `type` is `ACCUMULATE_POINTS`. */\n  accumulatePoints?: LoyaltyEventAccumulatePoints;\n  /** Provides metadata when the event `type` is `CREATE_REWARD`. */\n  createReward?: LoyaltyEventCreateReward;\n  /** Provides metadata when the event `type` is `REDEEM_REWARD`. */\n  redeemReward?: LoyaltyEventRedeemReward;\n  /** Provides metadata when the event `type` is `DELETE_REWARD`. */\n  deleteReward?: LoyaltyEventDeleteReward;\n  /** Provides metadata when the event `type` is `ADJUST_POINTS`. */\n  adjustPoints?: LoyaltyEventAdjustPoints;\n  /** The ID of the [loyalty account](#type-LoyaltyAccount) in which the event occurred. */\n  loyaltyAccountId: string;\n  /** The ID of the [location](#type-Location) where the event occurred. */\n  locationId?: string;\n  /** Defines whether the event was generated by the Square Point of Sale. */\n  source: string;\n  /** Provides metadata when the event `type` is `EXPIRE_POINTS`. */\n  expirePoints?: LoyaltyEventExpirePoints;\n  /** Provides metadata when the event `type` is `OTHER`. */\n  otherEvent?: LoyaltyEventOther;\n}\n\nexport const loyaltyEventSchema: Schema<LoyaltyEvent> = object({\n  id: ['id', string()],\n  type: ['type', string()],\n  createdAt: ['created_at', string()],\n  accumulatePoints: [\n    'accumulate_points',\n    optional(lazy(() => loyaltyEventAccumulatePointsSchema)),\n  ],\n  createReward: [\n    'create_reward',\n    optional(lazy(() => loyaltyEventCreateRewardSchema)),\n  ],\n  redeemReward: [\n    'redeem_reward',\n    optional(lazy(() => loyaltyEventRedeemRewardSchema)),\n  ],\n  deleteReward: [\n    'delete_reward',\n    optional(lazy(() => loyaltyEventDeleteRewardSchema)),\n  ],\n  adjustPoints: [\n    'adjust_points',\n    optional(lazy(() => loyaltyEventAdjustPointsSchema)),\n  ],\n  loyaltyAccountId: ['loyalty_account_id', string()],\n  locationId: ['location_id', optional(string())],\n  source: ['source', string()],\n  expirePoints: [\n    'expire_points',\n    optional(lazy(() => loyaltyEventExpirePointsSchema)),\n  ],\n  otherEvent: ['other_event', optional(lazy(() => loyaltyEventOtherSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/** A response containing the resulting loyalty event. */\nexport interface AccumulateLoyaltyPointsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Provides information about a loyalty event.\n   * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).\n   */\n  event?: LoyaltyEvent;\n}\n\nexport const accumulateLoyaltyPointsResponseSchema: Schema<AccumulateLoyaltyPointsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    event: ['event', optional(lazy(() => loyaltyEventSchema))],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport {\n  LoyaltyEventAdjustPoints,\n  loyaltyEventAdjustPointsSchema,\n} from './loyaltyEventAdjustPoints';\n\n/** A request to adjust (add or subtract) points manually. */\nexport interface AdjustLoyaltyPointsRequest {\n  /**\n   * A unique string that identifies this `AdjustLoyaltyPoints` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n  /** Provides metadata when the event `type` is `ADJUST_POINTS`. */\n  adjustPoints: LoyaltyEventAdjustPoints;\n}\n\nexport const adjustLoyaltyPointsRequestSchema: Schema<AdjustLoyaltyPointsRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    adjustPoints: ['adjust_points', lazy(() => loyaltyEventAdjustPointsSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/**\n * A response that includes the loyalty event that\n * resulted from the successful API call.\n */\nexport interface AdjustLoyaltyPointsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Provides information about a loyalty event.\n   * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).\n   */\n  event?: LoyaltyEvent;\n}\n\nexport const adjustLoyaltyPointsResponseSchema: Schema<AdjustLoyaltyPointsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    event: ['event', optional(lazy(() => loyaltyEventSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * A request to calculate the points that a buyer can earn from\n * a specified purchase.\n */\nexport interface CalculateLoyaltyPointsRequest {\n  /**\n   * The [order](#type-Order) ID for which to calculate the points.\n   * Specify this field if your application uses the Orders API to process orders.\n   * Otherwise, specify the `transaction_amount`.\n   */\n  orderId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  transactionAmountMoney?: Money;\n}\n\nexport const calculateLoyaltyPointsRequestSchema: Schema<CalculateLoyaltyPointsRequest> = object(\n  {\n    orderId: ['order_id', optional(string())],\n    transactionAmountMoney: [\n      'transaction_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n  }\n);\n","import { array, lazy, number, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * A response that includes the points that the buyer can earn from\n * a specified purchase.\n */\nexport interface CalculateLoyaltyPointsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The points that the buyer can earn from a specified purchase. */\n  points?: number;\n}\n\nexport const calculateLoyaltyPointsResponseSchema: Schema<CalculateLoyaltyPointsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    points: ['points', optional(number())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Associates a loyalty account with the buyer's phone number.\n * For more information, see\n * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n */\nexport interface LoyaltyAccountMapping {\n  /** The Square-assigned ID of the mapping. */\n  id?: string;\n  /** The type of mapping. */\n  type: string;\n  /** The phone number, in E.164 format. For example, \"+14155551111\". */\n  value: string;\n  /** The timestamp when the mapping was created, in RFC 3339 format. */\n  createdAt?: string;\n}\n\nexport const loyaltyAccountMappingSchema: Schema<LoyaltyAccountMapping> = object(\n  {\n    id: ['id', optional(string())],\n    type: ['type', string()],\n    value: ['value', string()],\n    createdAt: ['created_at', optional(string())],\n  }\n);\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  LoyaltyAccountMapping,\n  loyaltyAccountMappingSchema,\n} from './loyaltyAccountMapping';\n\n/**\n * Describes a loyalty account. For more information, see\n * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n */\nexport interface LoyaltyAccount {\n  /** The Square-assigned ID of the loyalty account. */\n  id?: string;\n  /**\n   * The list of mappings that the account is associated with.\n   * Currently, a buyer can only be mapped to a loyalty account using\n   * a phone number. Therefore, the list can only have one mapping.\n   */\n  mappings: LoyaltyAccountMapping[];\n  /** The Square-assigned ID of the [loyalty program](#type-LoyaltyProgram) to which the account belongs. */\n  programId: string;\n  /**\n   * The available point balance in the loyalty account.\n   * Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.\n   */\n  balance?: number;\n  /** The total points accrued during the lifetime of the account. */\n  lifetimePoints?: number;\n  /** The Square-assigned ID of the [customer](#type-Customer) that is associated with the account. */\n  customerId?: string;\n  /** The timestamp when enrollment occurred, in RFC 3339 format. */\n  enrolledAt?: string;\n  /** The timestamp when the loyalty account was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the loyalty account was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const loyaltyAccountSchema: Schema<LoyaltyAccount> = object({\n  id: ['id', optional(string())],\n  mappings: ['mappings', array(lazy(() => loyaltyAccountMappingSchema))],\n  programId: ['program_id', string()],\n  balance: ['balance', optional(number())],\n  lifetimePoints: ['lifetime_points', optional(number())],\n  customerId: ['customer_id', optional(string())],\n  enrolledAt: ['enrolled_at', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A request to create a new loyalty account. */\nexport interface CreateLoyaltyAccountRequest {\n  /**\n   * Describes a loyalty account. For more information, see\n   * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n   */\n  loyaltyAccount: LoyaltyAccount;\n  /**\n   * A unique string that identifies this `CreateLoyaltyAccount` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n}\n\nexport const createLoyaltyAccountRequestSchema: Schema<CreateLoyaltyAccountRequest> = object(\n  {\n    loyaltyAccount: ['loyalty_account', lazy(() => loyaltyAccountSchema)],\n    idempotencyKey: ['idempotency_key', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A response that includes loyalty account created. */\nexport interface CreateLoyaltyAccountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Describes a loyalty account. For more information, see\n   * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n   */\n  loyaltyAccount?: LoyaltyAccount;\n}\n\nexport const createLoyaltyAccountResponseSchema: Schema<CreateLoyaltyAccountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    loyaltyAccount: [\n      'loyalty_account',\n      optional(lazy(() => loyaltyAccountSchema)),\n    ],\n  }\n);\n","import { number, object, optional, Schema, string } from '../schema';\n\nexport interface LoyaltyReward {\n  /** The Square-assigned ID of the loyalty reward. */\n  id?: string;\n  /** The status of the loyalty reward. */\n  status?: string;\n  /** The Square-assigned ID of the [loyalty account](#type-LoyaltyAccount) to which the reward belongs. */\n  loyaltyAccountId: string;\n  /** The Square-assigned ID of the [reward tier](#type-LoyaltyProgramRewardTier) used to create the reward. */\n  rewardTierId: string;\n  /** The number of loyalty points used for the reward. */\n  points?: number;\n  /** The Square-assigned ID of the [order](#type-Order) to which the reward is attached. */\n  orderId?: string;\n  /** The timestamp when the reward was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp when the reward was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /** The timestamp when the reward was redeemed, in RFC 3339 format. */\n  redeemedAt?: string;\n}\n\nexport const loyaltyRewardSchema: Schema<LoyaltyReward> = object({\n  id: ['id', optional(string())],\n  status: ['status', optional(string())],\n  loyaltyAccountId: ['loyalty_account_id', string()],\n  rewardTierId: ['reward_tier_id', string()],\n  points: ['points', optional(number())],\n  orderId: ['order_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  redeemedAt: ['redeemed_at', optional(string())],\n});\n","import { lazy, object, Schema, string } from '../schema';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A request to create a loyalty reward. */\nexport interface CreateLoyaltyRewardRequest {\n  reward: LoyaltyReward;\n  /**\n   * A unique string that identifies this `CreateLoyaltyReward` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n}\n\nexport const createLoyaltyRewardRequestSchema: Schema<CreateLoyaltyRewardRequest> = object(\n  {\n    reward: ['reward', lazy(() => loyaltyRewardSchema)],\n    idempotencyKey: ['idempotency_key', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A response that includes the loyalty reward created. */\nexport interface CreateLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  reward?: LoyaltyReward;\n}\n\nexport const createLoyaltyRewardResponseSchema: Schema<CreateLoyaltyRewardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    reward: ['reward', optional(lazy(() => loyaltyRewardSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/** A response returned by the API call. */\nexport interface DeleteLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const deleteLoyaltyRewardResponseSchema: Schema<DeleteLoyaltyRewardResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Defines an accrual rule, which is how buyers can earn points. */\nexport interface LoyaltyProgramAccrualRule {\n  /** The type of the accrual rule that defines how buyers can earn points. */\n  accrualType: string;\n  /**\n   * The number of points that\n   * buyers earn based on the `accrual_type`.\n   */\n  points?: number;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  visitMinimumAmountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  spendAmountMoney?: Money;\n  /**\n   * The ID of the [catalog object](#type-CatalogObject) to purchase to earn the number of points defined by the\n   * rule. This is either an item variation or a category, depending on the type. This is defined on\n   * `ITEM_VARIATION` rules and `CATEGORY` rules.\n   */\n  catalogObjectId?: string;\n}\n\nexport const loyaltyProgramAccrualRuleSchema: Schema<LoyaltyProgramAccrualRule> = object(\n  {\n    accrualType: ['accrual_type', string()],\n    points: ['points', optional(number())],\n    visitMinimumAmountMoney: [\n      'visit_minimum_amount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    spendAmountMoney: ['spend_amount_money', optional(lazy(() => moneySchema))],\n    catalogObjectId: ['catalog_object_id', optional(string())],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Describes when the loyalty program expires. */\nexport interface LoyaltyProgramExpirationPolicy {\n  /** The duration of time before points expire, in RFC 3339 format. */\n  expirationDuration: string;\n}\n\nexport const loyaltyProgramExpirationPolicySchema: Schema<LoyaltyProgramExpirationPolicy> = object(\n  { expirationDuration: ['expiration_duration', string()] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Provides details about the loyalty program reward tier definition. */\nexport interface LoyaltyProgramRewardDefinition {\n  /** Indicates the scope of the reward tier. */\n  scope: string;\n  /** The type of discount the reward tier offers. */\n  discountType: string;\n  /**\n   * Present if `discount_type` is `FIXED_PERCENTAGE`.\n   * For example, a 7.25% off discount will be represented as \"7.25\".\n   */\n  percentageDiscount?: string;\n  /** A list of [catalog object](#type-CatalogObject) ids to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field. */\n  catalogObjectIds?: string[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  fixedDiscountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  maxDiscountMoney?: Money;\n}\n\nexport const loyaltyProgramRewardDefinitionSchema: Schema<LoyaltyProgramRewardDefinition> = object(\n  {\n    scope: ['scope', string()],\n    discountType: ['discount_type', string()],\n    percentageDiscount: ['percentage_discount', optional(string())],\n    catalogObjectIds: ['catalog_object_ids', optional(array(string()))],\n    fixedDiscountMoney: [\n      'fixed_discount_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    maxDiscountMoney: ['max_discount_money', optional(lazy(() => moneySchema))],\n  }\n);\n","import { lazy, number, object, Schema, string } from '../schema';\nimport {\n  LoyaltyProgramRewardDefinition,\n  loyaltyProgramRewardDefinitionSchema,\n} from './loyaltyProgramRewardDefinition';\n\n/** Describes a loyalty program reward tier. */\nexport interface LoyaltyProgramRewardTier {\n  /** The Square-assigned ID of the reward tier. */\n  id: string;\n  /** The points exchanged for the reward tier. */\n  points: number;\n  /** The name of the reward tier. */\n  name: string;\n  /** Provides details about the loyalty program reward tier definition. */\n  definition: LoyaltyProgramRewardDefinition;\n  /** The timestamp when the reward tier was created, in RFC 3339 format. */\n  createdAt: string;\n}\n\nexport const loyaltyProgramRewardTierSchema: Schema<LoyaltyProgramRewardTier> = object(\n  {\n    id: ['id', string()],\n    points: ['points', number()],\n    name: ['name', string()],\n    definition: [\n      'definition',\n      lazy(() => loyaltyProgramRewardDefinitionSchema),\n    ],\n    createdAt: ['created_at', string()],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\nexport interface LoyaltyProgramTerminology {\n  /** A singular unit for a point (for example, 1 point is called 1 star). */\n  one: string;\n  /** A plural unit for point (for example, 10 points is called 10 stars). */\n  other: string;\n}\n\nexport const loyaltyProgramTerminologySchema: Schema<LoyaltyProgramTerminology> = object(\n  { one: ['one', string()], other: ['other', string()] }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyProgramAccrualRule,\n  loyaltyProgramAccrualRuleSchema,\n} from './loyaltyProgramAccrualRule';\nimport {\n  LoyaltyProgramExpirationPolicy,\n  loyaltyProgramExpirationPolicySchema,\n} from './loyaltyProgramExpirationPolicy';\nimport {\n  LoyaltyProgramRewardTier,\n  loyaltyProgramRewardTierSchema,\n} from './loyaltyProgramRewardTier';\nimport {\n  LoyaltyProgramTerminology,\n  loyaltyProgramTerminologySchema,\n} from './loyaltyProgramTerminology';\n\nexport interface LoyaltyProgram {\n  /**\n   * The Square-assigned ID of the loyalty program. Updates to\n   * the loyalty program do not modify the identifier.\n   */\n  id: string;\n  /** Whether the program is currently active. */\n  status: string;\n  /** The list of rewards for buyers, sorted by ascending points. */\n  rewardTiers: LoyaltyProgramRewardTier[];\n  /** Describes when the loyalty program expires. */\n  expirationPolicy?: LoyaltyProgramExpirationPolicy;\n  terminology: LoyaltyProgramTerminology;\n  /** The [locations](#type-Location) at which the program is active. */\n  locationIds: string[];\n  /** The timestamp when the program was created, in RFC 3339 format. */\n  createdAt: string;\n  /** The timestamp when the reward was last updated, in RFC 3339 format. */\n  updatedAt: string;\n  /** Defines how buyers can earn loyalty points. */\n  accrualRules: LoyaltyProgramAccrualRule[];\n}\n\nexport const loyaltyProgramSchema: Schema<LoyaltyProgram> = object({\n  id: ['id', string()],\n  status: ['status', string()],\n  rewardTiers: [\n    'reward_tiers',\n    array(lazy(() => loyaltyProgramRewardTierSchema)),\n  ],\n  expirationPolicy: [\n    'expiration_policy',\n    optional(lazy(() => loyaltyProgramExpirationPolicySchema)),\n  ],\n  terminology: ['terminology', lazy(() => loyaltyProgramTerminologySchema)],\n  locationIds: ['location_ids', array(string())],\n  createdAt: ['created_at', string()],\n  updatedAt: ['updated_at', string()],\n  accrualRules: [\n    'accrual_rules',\n    array(lazy(() => loyaltyProgramAccrualRuleSchema)),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyProgram, loyaltyProgramSchema } from './loyaltyProgram';\n\n/** A response that contains all loyalty programs. */\nexport interface ListLoyaltyProgramsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** A list of `LoyaltyProgram` for the merchant. */\n  programs?: LoyaltyProgram[];\n}\n\nexport const listLoyaltyProgramsResponseSchema: Schema<ListLoyaltyProgramsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    programs: ['programs', optional(array(lazy(() => loyaltyProgramSchema)))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** A request to redeem a loyalty reward. */\nexport interface RedeemLoyaltyRewardRequest {\n  /**\n   * A unique string that identifies this `RedeemLoyaltyReward` request.\n   * Keys can be any valid string, but must be unique for every request.\n   */\n  idempotencyKey: string;\n  /** The ID of the [location](#type-Location) where the reward is redeemed. */\n  locationId: string;\n}\n\nexport const redeemLoyaltyRewardRequestSchema: Schema<RedeemLoyaltyRewardRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    locationId: ['location_id', string()],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/** A response that includes the `LoyaltyEvent` published for redeeming the reward. */\nexport interface RedeemLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Provides information about a loyalty event.\n   * For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).\n   */\n  event?: LoyaltyEvent;\n}\n\nexport const redeemLoyaltyRewardResponseSchema: Schema<RedeemLoyaltyRewardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    event: ['event', optional(lazy(() => loyaltyEventSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A response that includes the loyalty account. */\nexport interface RetrieveLoyaltyAccountResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Describes a loyalty account. For more information, see\n   * [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).\n   */\n  loyaltyAccount?: LoyaltyAccount;\n}\n\nexport const retrieveLoyaltyAccountResponseSchema: Schema<RetrieveLoyaltyAccountResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    loyaltyAccount: [\n      'loyalty_account',\n      optional(lazy(() => loyaltyAccountSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A response that includes the loyalty reward. */\nexport interface RetrieveLoyaltyRewardResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  reward?: LoyaltyReward;\n}\n\nexport const retrieveLoyaltyRewardResponseSchema: Schema<RetrieveLoyaltyRewardResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    reward: ['reward', optional(lazy(() => loyaltyRewardSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyAccountMapping,\n  loyaltyAccountMappingSchema,\n} from './loyaltyAccountMapping';\n\n/** The search criteria for the loyalty accounts. */\nexport interface SearchLoyaltyAccountsRequestLoyaltyAccountQuery {\n  /**\n   * The set of mappings to use in the loyalty account search.\n   * This cannot be combined with `customer_ids`.\n   * Max: 30 mappings\n   */\n  mappings?: LoyaltyAccountMapping[];\n  /**\n   * The set of customer IDs to use in the loyalty account search.\n   * This cannot be combined with `mappings`.\n   * Max: 30 customer IDs\n   */\n  customerIds?: string[];\n}\n\nexport const searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema: Schema<SearchLoyaltyAccountsRequestLoyaltyAccountQuery> = object(\n  {\n    mappings: [\n      'mappings',\n      optional(array(lazy(() => loyaltyAccountMappingSchema))),\n    ],\n    customerIds: ['customer_ids', optional(array(string()))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchLoyaltyAccountsRequestLoyaltyAccountQuery,\n  searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema,\n} from './searchLoyaltyAccountsRequestLoyaltyAccountQuery';\n\n/** A request to search for loyalty accounts. */\nexport interface SearchLoyaltyAccountsRequest {\n  /** The search criteria for the loyalty accounts. */\n  query?: SearchLoyaltyAccountsRequestLoyaltyAccountQuery;\n  /** The maximum number of results to include in the response. */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to\n   * this endpoint. Provide this to retrieve the next set of\n   * results for the original query.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyAccountsRequestSchema: Schema<SearchLoyaltyAccountsRequest> = object(\n  {\n    query: [\n      'query',\n      optional(\n        lazy(() => searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema)\n      ),\n    ],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyAccount, loyaltyAccountSchema } from './loyaltyAccount';\n\n/** A response that includes loyalty accounts that satisfy the search criteria. */\nexport interface SearchLoyaltyAccountsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The loyalty accounts that met the search criteria,\n   * in order of creation date.\n   */\n  loyaltyAccounts?: LoyaltyAccount[];\n  /**\n   * The pagination cursor to use in a subsequent\n   * request. If empty, this is the final response.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyAccountsResponseSchema: Schema<SearchLoyaltyAccountsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    loyaltyAccounts: [\n      'loyalty_accounts',\n      optional(array(lazy(() => loyaltyAccountSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/** Filter events by date time range. */\nexport interface LoyaltyEventDateTimeFilter {\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt: TimeRange;\n}\n\nexport const loyaltyEventDateTimeFilterSchema: Schema<LoyaltyEventDateTimeFilter> = object(\n  { createdAt: ['created_at', lazy(() => timeRangeSchema)] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** Filter events by location. */\nexport interface LoyaltyEventLocationFilter {\n  /**\n   * The [location](#type-Location) IDs for loyalty events to query.\n   * If multiple values are specified, the endpoint uses\n   * a logical OR to combine them.\n   */\n  locationIds: string[];\n}\n\nexport const loyaltyEventLocationFilterSchema: Schema<LoyaltyEventLocationFilter> = object(\n  { locationIds: ['location_ids', array(string())] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Filter events by loyalty account. */\nexport interface LoyaltyEventLoyaltyAccountFilter {\n  /** The ID of the [loyalty account](#type-LoyaltyAccount) associated with loyalty events. */\n  loyaltyAccountId: string;\n}\n\nexport const loyaltyEventLoyaltyAccountFilterSchema: Schema<LoyaltyEventLoyaltyAccountFilter> = object(\n  { loyaltyAccountId: ['loyalty_account_id', string()] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Filter events by the order associated with the event. */\nexport interface LoyaltyEventOrderFilter {\n  /** The ID of the [order](#type-Order) associated with the event. */\n  orderId: string;\n}\n\nexport const loyaltyEventOrderFilterSchema: Schema<LoyaltyEventOrderFilter> = object(\n  { orderId: ['order_id', string()] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** Filter events by event type. */\nexport interface LoyaltyEventTypeFilter {\n  /**\n   * The loyalty event types used to filter the result.\n   * If multiple values are specified, the endpoint uses a\n   * logical OR to combine them.\n   * See [LoyaltyEventType](#type-loyaltyeventtype) for possible values\n   */\n  types: string[];\n}\n\nexport const loyaltyEventTypeFilterSchema: Schema<LoyaltyEventTypeFilter> = object(\n  { types: ['types', array(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  LoyaltyEventDateTimeFilter,\n  loyaltyEventDateTimeFilterSchema,\n} from './loyaltyEventDateTimeFilter';\nimport {\n  LoyaltyEventLocationFilter,\n  loyaltyEventLocationFilterSchema,\n} from './loyaltyEventLocationFilter';\nimport {\n  LoyaltyEventLoyaltyAccountFilter,\n  loyaltyEventLoyaltyAccountFilterSchema,\n} from './loyaltyEventLoyaltyAccountFilter';\nimport {\n  LoyaltyEventOrderFilter,\n  loyaltyEventOrderFilterSchema,\n} from './loyaltyEventOrderFilter';\nimport {\n  LoyaltyEventTypeFilter,\n  loyaltyEventTypeFilterSchema,\n} from './loyaltyEventTypeFilter';\n\n/**\n * The filtering criteria. If the request specifies multiple filters,\n * the endpoint uses a logical AND to evaluate them.\n */\nexport interface LoyaltyEventFilter {\n  /** Filter events by loyalty account. */\n  loyaltyAccountFilter?: LoyaltyEventLoyaltyAccountFilter;\n  /** Filter events by event type. */\n  typeFilter?: LoyaltyEventTypeFilter;\n  /** Filter events by date time range. */\n  dateTimeFilter?: LoyaltyEventDateTimeFilter;\n  /** Filter events by location. */\n  locationFilter?: LoyaltyEventLocationFilter;\n  /** Filter events by the order associated with the event. */\n  orderFilter?: LoyaltyEventOrderFilter;\n}\n\nexport const loyaltyEventFilterSchema: Schema<LoyaltyEventFilter> = object({\n  loyaltyAccountFilter: [\n    'loyalty_account_filter',\n    optional(lazy(() => loyaltyEventLoyaltyAccountFilterSchema)),\n  ],\n  typeFilter: [\n    'type_filter',\n    optional(lazy(() => loyaltyEventTypeFilterSchema)),\n  ],\n  dateTimeFilter: [\n    'date_time_filter',\n    optional(lazy(() => loyaltyEventDateTimeFilterSchema)),\n  ],\n  locationFilter: [\n    'location_filter',\n    optional(lazy(() => loyaltyEventLocationFilterSchema)),\n  ],\n  orderFilter: [\n    'order_filter',\n    optional(lazy(() => loyaltyEventOrderFilterSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  LoyaltyEventFilter,\n  loyaltyEventFilterSchema,\n} from './loyaltyEventFilter';\n\n/** Represents a query used to search for loyalty events. */\nexport interface LoyaltyEventQuery {\n  /**\n   * The filtering criteria. If the request specifies multiple filters,\n   * the endpoint uses a logical AND to evaluate them.\n   */\n  filter?: LoyaltyEventFilter;\n}\n\nexport const loyaltyEventQuerySchema: Schema<LoyaltyEventQuery> = object({\n  filter: ['filter', optional(lazy(() => loyaltyEventFilterSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  LoyaltyEventQuery,\n  loyaltyEventQuerySchema,\n} from './loyaltyEventQuery';\n\n/** A request to search for loyalty events. */\nexport interface SearchLoyaltyEventsRequest {\n  /** Represents a query used to search for loyalty events. */\n  query?: LoyaltyEventQuery;\n  /**\n   * The maximum number of results to include in the response.\n   * The last page might contain fewer events.\n   * The default is 30 events.\n   */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for your original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyEventsRequestSchema: Schema<SearchLoyaltyEventsRequest> = object(\n  {\n    query: ['query', optional(lazy(() => loyaltyEventQuerySchema))],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyEvent, loyaltyEventSchema } from './loyaltyEvent';\n\n/**\n * A response that contains loyalty events that satisfy the search\n * criteria, in order by the `created_at` date.\n */\nexport interface SearchLoyaltyEventsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The loyalty events that satisfy the search criteria. */\n  events?: LoyaltyEvent[];\n  /**\n   * The pagination cursor to be used in a subsequent\n   * request. If empty, this is the final response.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyEventsResponseSchema: Schema<SearchLoyaltyEventsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    events: ['events', optional(array(lazy(() => loyaltyEventSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** The set of search requirements. */\nexport interface SearchLoyaltyRewardsRequestLoyaltyRewardQuery {\n  /** The ID of the [loyalty account](#type-LoyaltyAccount) to which the loyalty reward belongs. */\n  loyaltyAccountId: string;\n  /** The status of the loyalty reward. */\n  status?: string;\n}\n\nexport const searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema: Schema<SearchLoyaltyRewardsRequestLoyaltyRewardQuery> = object(\n  {\n    loyaltyAccountId: ['loyalty_account_id', string()],\n    status: ['status', optional(string())],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchLoyaltyRewardsRequestLoyaltyRewardQuery,\n  searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema,\n} from './searchLoyaltyRewardsRequestLoyaltyRewardQuery';\n\n/** A request to search for loyalty rewards. */\nexport interface SearchLoyaltyRewardsRequest {\n  /** The set of search requirements. */\n  query?: SearchLoyaltyRewardsRequestLoyaltyRewardQuery;\n  /** The maximum number of results to return in the response. */\n  limit?: number;\n  /**\n   * A pagination cursor returned by a previous call to\n   * this endpoint. Provide this to retrieve the next set of\n   * results for the original query.\n   * For more information,\n   * see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyRewardsRequestSchema: Schema<SearchLoyaltyRewardsRequest> = object(\n  {\n    query: [\n      'query',\n      optional(lazy(() => searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema)),\n    ],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { LoyaltyReward, loyaltyRewardSchema } from './loyaltyReward';\n\n/** A response that includes the loyalty rewards satisfying the search criteria. */\nexport interface SearchLoyaltyRewardsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * The loyalty rewards that satisfy the search criteria.\n   * These are returned in descending order by `updated_at`.\n   */\n  rewards?: LoyaltyReward[];\n  /**\n   * The pagination cursor to be used in a subsequent\n   * request. If empty, this is the final response.\n   */\n  cursor?: string;\n}\n\nexport const searchLoyaltyRewardsResponseSchema: Schema<SearchLoyaltyRewardsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    rewards: ['rewards', optional(array(lazy(() => loyaltyRewardSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  AccumulateLoyaltyPointsRequest,\n  accumulateLoyaltyPointsRequestSchema,\n} from '../models/accumulateLoyaltyPointsRequest';\nimport {\n  AccumulateLoyaltyPointsResponse,\n  accumulateLoyaltyPointsResponseSchema,\n} from '../models/accumulateLoyaltyPointsResponse';\nimport {\n  AdjustLoyaltyPointsRequest,\n  adjustLoyaltyPointsRequestSchema,\n} from '../models/adjustLoyaltyPointsRequest';\nimport {\n  AdjustLoyaltyPointsResponse,\n  adjustLoyaltyPointsResponseSchema,\n} from '../models/adjustLoyaltyPointsResponse';\nimport {\n  CalculateLoyaltyPointsRequest,\n  calculateLoyaltyPointsRequestSchema,\n} from '../models/calculateLoyaltyPointsRequest';\nimport {\n  CalculateLoyaltyPointsResponse,\n  calculateLoyaltyPointsResponseSchema,\n} from '../models/calculateLoyaltyPointsResponse';\nimport {\n  CreateLoyaltyAccountRequest,\n  createLoyaltyAccountRequestSchema,\n} from '../models/createLoyaltyAccountRequest';\nimport {\n  CreateLoyaltyAccountResponse,\n  createLoyaltyAccountResponseSchema,\n} from '../models/createLoyaltyAccountResponse';\nimport {\n  CreateLoyaltyRewardRequest,\n  createLoyaltyRewardRequestSchema,\n} from '../models/createLoyaltyRewardRequest';\nimport {\n  CreateLoyaltyRewardResponse,\n  createLoyaltyRewardResponseSchema,\n} from '../models/createLoyaltyRewardResponse';\nimport {\n  DeleteLoyaltyRewardResponse,\n  deleteLoyaltyRewardResponseSchema,\n} from '../models/deleteLoyaltyRewardResponse';\nimport {\n  ListLoyaltyProgramsResponse,\n  listLoyaltyProgramsResponseSchema,\n} from '../models/listLoyaltyProgramsResponse';\nimport {\n  RedeemLoyaltyRewardRequest,\n  redeemLoyaltyRewardRequestSchema,\n} from '../models/redeemLoyaltyRewardRequest';\nimport {\n  RedeemLoyaltyRewardResponse,\n  redeemLoyaltyRewardResponseSchema,\n} from '../models/redeemLoyaltyRewardResponse';\nimport {\n  RetrieveLoyaltyAccountResponse,\n  retrieveLoyaltyAccountResponseSchema,\n} from '../models/retrieveLoyaltyAccountResponse';\nimport {\n  RetrieveLoyaltyRewardResponse,\n  retrieveLoyaltyRewardResponseSchema,\n} from '../models/retrieveLoyaltyRewardResponse';\nimport {\n  SearchLoyaltyAccountsRequest,\n  searchLoyaltyAccountsRequestSchema,\n} from '../models/searchLoyaltyAccountsRequest';\nimport {\n  SearchLoyaltyAccountsResponse,\n  searchLoyaltyAccountsResponseSchema,\n} from '../models/searchLoyaltyAccountsResponse';\nimport {\n  SearchLoyaltyEventsRequest,\n  searchLoyaltyEventsRequestSchema,\n} from '../models/searchLoyaltyEventsRequest';\nimport {\n  SearchLoyaltyEventsResponse,\n  searchLoyaltyEventsResponseSchema,\n} from '../models/searchLoyaltyEventsResponse';\nimport {\n  SearchLoyaltyRewardsRequest,\n  searchLoyaltyRewardsRequestSchema,\n} from '../models/searchLoyaltyRewardsRequest';\nimport {\n  SearchLoyaltyRewardsResponse,\n  searchLoyaltyRewardsResponseSchema,\n} from '../models/searchLoyaltyRewardsResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class LoyaltyApi extends BaseApi {\n  /**\n   * Creates a loyalty account.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createLoyaltyAccount(\n    body: CreateLoyaltyAccountRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateLoyaltyAccountResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/accounts');\n    const mapped = req.prepareArgs({\n      body: [body, createLoyaltyAccountRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createLoyaltyAccountResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for loyalty accounts in a loyalty program.\n   *\n   * You can search for a loyalty account using the phone number or customer ID associated with the\n   * account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.\n   *\n   * Search results are sorted by `created_at` in ascending order.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchLoyaltyAccounts(\n    body: SearchLoyaltyAccountsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchLoyaltyAccountsResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/accounts/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchLoyaltyAccountsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchLoyaltyAccountsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a loyalty account.\n   *\n   * @param accountId  The ID of the [loyalty account](#type-LoyaltyAccount) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveLoyaltyAccount(\n    accountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLoyaltyAccountResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ accountId: [accountId, string()] });\n    req.appendTemplatePath`/v2/loyalty/accounts/${mapped.accountId}`;\n    return req.callAsJson(retrieveLoyaltyAccountResponseSchema, requestOptions);\n  }\n\n  /**\n   * Adds points to a loyalty account.\n   *\n   * - If you are using the Orders API to manage orders, you only provide the `order_id`.\n   * The endpoint reads the order to compute points to add to the buyer's account.\n   * - If you are not using the Orders API to manage orders,\n   * you first perform a client-side computation to compute the points.\n   * For spend-based and visit-based programs, you can call\n   * [CalculateLoyaltyPoints](#endpoint-Loyalty-CalculateLoyaltyPoints) to compute the points. For more\n   * information,\n   * see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).\n   * You then provide the points in a request to this endpoint.\n   *\n   * @param accountId  The [loyalty account](#type-LoyaltyAccount) ID to\n   *                                                            which to add the points.\n   * @param body       An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async accumulateLoyaltyPoints(\n    accountId: string,\n    body: AccumulateLoyaltyPointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AccumulateLoyaltyPointsResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      body: [body, accumulateLoyaltyPointsRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/accounts/${mapped.accountId}/accumulate`;\n    return req.callAsJson(\n      accumulateLoyaltyPointsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Adds points to or subtracts points from a buyer's account.\n   *\n   * Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow,\n   * you call\n   * [AccumulateLoyaltyPoints](#endpoint-Loyalty-AccumulateLoyaltyPoints)\n   * to add points when a buyer pays for the purchase.\n   *\n   * @param accountId  The ID of the [loyalty account](#type-LoyaltyAccount) in\n   *                                                        which to adjust the points.\n   * @param body       An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async adjustLoyaltyPoints(\n    accountId: string,\n    body: AdjustLoyaltyPointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<AdjustLoyaltyPointsResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      body: [body, adjustLoyaltyPointsRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/accounts/${mapped.accountId}/adjust`;\n    return req.callAsJson(adjustLoyaltyPointsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for loyalty events.\n   *\n   * A Square loyalty program maintains a ledger of events that occur during the lifetime of a\n   * buyer's loyalty account. Each change in the point balance\n   * (for example, points earned, points redeemed, and points expired) is\n   * recorded in the ledger. Using this endpoint, you can search the ledger for events.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchLoyaltyEvents(\n    body: SearchLoyaltyEventsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchLoyaltyEventsResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/events/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchLoyaltyEventsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchLoyaltyEventsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a list of loyalty programs in the seller's account.\n   * Currently, a seller can only have one loyalty program.\n   *\n   * @return Response from the API call\n   */\n  async listLoyaltyPrograms(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListLoyaltyProgramsResponse>> {\n    const req = this.createRequest('GET', '/v2/loyalty/programs');\n    return req.callAsJson(listLoyaltyProgramsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Calculates the points a purchase earns.\n   *\n   * - If you are using the Orders API to manage orders, you provide `order_id` in the request. The\n   * endpoint calculates the points by reading the order.\n   * - If you are not using the Orders API to manage orders, you provide the purchase amount in\n   * the request for the endpoint to calculate the points.\n   *\n   * An application might call this endpoint to show the points that a buyer can earn with the\n   * specific purchase.\n   *\n   * @param programId  The [loyalty program](#type-LoyaltyProgram) ID, which\n   *                                                           defines the rules for accruing points.\n   * @param body       An object containing the fields to POST for the request.\n   *                                                           See the corresponding object definition for field\n   *                                                           details.\n   * @return Response from the API call\n   */\n  async calculateLoyaltyPoints(\n    programId: string,\n    body: CalculateLoyaltyPointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CalculateLoyaltyPointsResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      programId: [programId, string()],\n      body: [body, calculateLoyaltyPointsRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/programs/${mapped.programId}/calculate`;\n    return req.callAsJson(calculateLoyaltyPointsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a loyalty reward. In the process, the endpoint does following:\n   *\n   * - Uses the `reward_tier_id` in the request to determine the number of points\n   * to lock for this reward.\n   * - If the request includes `order_id`, it adds the reward and related discount to the order.\n   *\n   * After a reward is created, the points are locked and\n   * not available for the buyer to redeem another reward.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createLoyaltyReward(\n    body: CreateLoyaltyRewardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateLoyaltyRewardResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/rewards');\n    const mapped = req.prepareArgs({\n      body: [body, createLoyaltyRewardRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createLoyaltyRewardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for loyalty rewards in a loyalty account.\n   *\n   * In the current implementation, the endpoint supports search by the reward `status`.\n   *\n   * If you know a reward ID, use the\n   * [RetrieveLoyaltyReward](#endpoint-Loyalty-RetrieveLoyaltyReward) endpoint.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchLoyaltyRewards(\n    body: SearchLoyaltyRewardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchLoyaltyRewardsResponse>> {\n    const req = this.createRequest('POST', '/v2/loyalty/rewards/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchLoyaltyRewardsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchLoyaltyRewardsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a loyalty reward by doing the following:\n   *\n   * - Returns the loyalty points back to the loyalty account.\n   * - If an order ID was specified when the reward was created\n   * (see [CreateLoyaltyReward](#endpoint-Loyalty-CreateLoyaltyReward)),\n   * it updates the order by removing the reward and related\n   * discounts.\n   *\n   * You cannot delete a reward that has reached the terminal state (REDEEMED).\n   *\n   * @param rewardId  The ID of the [loyalty reward](#type-LoyaltyReward) to delete.\n   * @return Response from the API call\n   */\n  async deleteLoyaltyReward(\n    rewardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<DeleteLoyaltyRewardResponse>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ rewardId: [rewardId, string()] });\n    req.appendTemplatePath`/v2/loyalty/rewards/${mapped.rewardId}`;\n    return req.callAsJson(deleteLoyaltyRewardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a loyalty reward.\n   *\n   * @param rewardId  The ID of the [loyalty reward](#type-LoyaltyReward) to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveLoyaltyReward(\n    rewardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveLoyaltyRewardResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ rewardId: [rewardId, string()] });\n    req.appendTemplatePath`/v2/loyalty/rewards/${mapped.rewardId}`;\n    return req.callAsJson(retrieveLoyaltyRewardResponseSchema, requestOptions);\n  }\n\n  /**\n   * Redeems a loyalty reward.\n   *\n   * The endpoint sets the reward to the `REDEEMED` terminal state.\n   *\n   * If you are using your own order processing system (not using the\n   * Orders API), you call this endpoint after the buyer paid for the\n   * purchase.\n   *\n   * After the reward reaches the terminal state, it cannot be deleted.\n   * In other words, points used for the reward cannot be returned\n   * to the account.\n   *\n   * @param rewardId  The ID of the [loyalty reward](#type-LoyaltyReward) to\n   *                                                       redeem.\n   * @param body      An object containing the fields to POST for the request.\n   *                                                       See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async redeemLoyaltyReward(\n    rewardId: string,\n    body: RedeemLoyaltyRewardRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RedeemLoyaltyRewardResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      rewardId: [rewardId, string()],\n      body: [body, redeemLoyaltyRewardRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/loyalty/rewards/${mapped.rewardId}/redeem`;\n    return req.callAsJson(redeemLoyaltyRewardResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Represents a Square seller. */\nexport interface Merchant {\n  /** The Square-issued ID of the merchant. */\n  id?: string;\n  /** The business name of the merchant. */\n  businessName?: string;\n  /**\n   * Indicates the country associated with another entity, such as a business.\n   * Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).\n   */\n  country: string;\n  /** The language code associated with the merchant account, in BCP 47 format. */\n  languageCode?: string;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currency?: string;\n  status?: string;\n  /** The ID of the main `Location` for this merchant. */\n  mainLocationId?: string;\n}\n\nexport const merchantSchema: Schema<Merchant> = object({\n  id: ['id', optional(string())],\n  businessName: ['business_name', optional(string())],\n  country: ['country', string()],\n  languageCode: ['language_code', optional(string())],\n  currency: ['currency', optional(string())],\n  status: ['status', optional(string())],\n  mainLocationId: ['main_location_id', optional(string())],\n});\n","import { array, lazy, number, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Merchant, merchantSchema } from './merchant';\n\n/** The response object returned by the [ListMerchant](#endpoint-listmerchant) endpoint. */\nexport interface ListMerchantsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** The requested `Merchant` entities. */\n  merchant?: Merchant[];\n  /** If the  response is truncated, the cursor to use in next  request to fetch next set of objects. */\n  cursor?: number;\n}\n\nexport const listMerchantsResponseSchema: Schema<ListMerchantsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    merchant: ['merchant', optional(array(lazy(() => merchantSchema)))],\n    cursor: ['cursor', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Merchant, merchantSchema } from './merchant';\n\n/** The response object returned by the [RetrieveMerchant](#endpoint-retrieveMerchant) endpoint. */\nexport interface RetrieveMerchantResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a Square seller. */\n  merchant?: Merchant;\n}\n\nexport const retrieveMerchantResponseSchema: Schema<RetrieveMerchantResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    merchant: ['merchant', optional(lazy(() => merchantSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  ListMerchantsResponse,\n  listMerchantsResponseSchema,\n} from '../models/listMerchantsResponse';\nimport {\n  RetrieveMerchantResponse,\n  retrieveMerchantResponseSchema,\n} from '../models/retrieveMerchantResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class MerchantsApi extends BaseApi {\n  /**\n   * Returns `Merchant` information for a given access token.\n   *\n   * If you don't know a `Merchant` ID, you can use this endpoint to retrieve the merchant ID for an\n   * access token.\n   * You can specify your personal access token to get your own merchant information or specify an OAuth\n   * token\n   * to get the information for the  merchant that granted you access.\n   *\n   * If you know the merchant ID, you can also use the [RetrieveMerchant](#endpoint-merchants-\n   * retrievemerchant)\n   * endpoint to get the merchant information.\n   *\n   * @param cursor The cursor generated by the previous response.\n   * @return Response from the API call\n   */\n  async listMerchants(\n    cursor?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListMerchantsResponse>> {\n    const req = this.createRequest('GET', '/v2/merchants');\n    const mapped = req.prepareArgs({ cursor: [cursor, optional(number())] });\n    req.query('cursor', mapped.cursor);\n    return req.callAsJson(listMerchantsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieve a `Merchant` object for the given `merchant_id`.\n   *\n   * @param merchantId  The ID of the merchant to retrieve. If the string \"me\" is supplied as the ID, then\n   *                              retrieve the merchant that is currently accessible to this call.\n   * @return Response from the API call\n   */\n  async retrieveMerchant(\n    merchantId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveMerchantResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ merchantId: [merchantId, string()] });\n    req.appendTemplatePath`/v2/merchants/${mapped.merchantId}`;\n    return req.callAsJson(retrieveMerchantResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the body parameters that can be provided in a request to the\n * __CreateMobileAuthorizationCode__ endpoint.\n */\nexport interface CreateMobileAuthorizationCodeRequest {\n  /** The Square location ID the authorization code should be tied to. */\n  locationId?: string;\n}\n\nexport const createMobileAuthorizationCodeRequestSchema: Schema<CreateMobileAuthorizationCodeRequest> = object(\n  { locationId: ['location_id', optional(string())] }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the __CreateMobileAuthorizationCode__ endpoint.\n */\nexport interface CreateMobileAuthorizationCodeResponse {\n  /**\n   * Generated authorization code that connects a mobile application instance\n   * to a Square account.\n   */\n  authorizationCode?: string;\n  /**\n   * The timestamp when `authorization_code` expires in\n   * [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., \"2016-09-04T23:59:33.123Z\".\n   */\n  expiresAt?: string;\n  /**\n   * Represents an error encountered during a request to the Connect API.\n   * See [Handling errors](#handlingerrors) for more information.\n   */\n  error?: Error;\n}\n\nexport const createMobileAuthorizationCodeResponseSchema: Schema<CreateMobileAuthorizationCodeResponse> = object(\n  {\n    authorizationCode: ['authorization_code', optional(string())],\n    expiresAt: ['expires_at', optional(string())],\n    error: ['error', optional(lazy(() => errorSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CreateMobileAuthorizationCodeRequest,\n  createMobileAuthorizationCodeRequestSchema,\n} from '../models/createMobileAuthorizationCodeRequest';\nimport {\n  CreateMobileAuthorizationCodeResponse,\n  createMobileAuthorizationCodeResponseSchema,\n} from '../models/createMobileAuthorizationCodeResponse';\nimport { BaseApi } from './baseApi';\n\nexport class MobileAuthorizationApi extends BaseApi {\n  /**\n   * Generates code to authorize a mobile application to connect to a Square card reader\n   *\n   * Authorization codes are one-time-use and expire __60 minutes__ after being issued.\n   *\n   * __Important:__ The `Authorization` header you provide to this endpoint must have the following\n   * format:\n   *\n   * ```\n   * Authorization: Bearer ACCESS_TOKEN\n   * ```\n   *\n   * Replace `ACCESS_TOKEN` with a\n   * [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-\n   * tokens).\n   *\n   * @param body An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async createMobileAuthorizationCode(\n    body: CreateMobileAuthorizationCodeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateMobileAuthorizationCodeResponse>> {\n    const req = this.createRequest('POST', '/mobile/authorization-code');\n    const mapped = req.prepareArgs({\n      body: [body, createMobileAuthorizationCodeRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      createMobileAuthorizationCodeResponseSchema,\n      requestOptions\n    );\n  }\n}\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\nexport interface ObtainTokenRequest {\n  /**\n   * The Square-issued ID of your application, available from the\n   * [application dashboard](https://connect.squareup.com/apps).\n   */\n  clientId: string;\n  /**\n   * The Square-issued application secret for your application, available\n   * from the [application dashboard](https://connect.squareup.com/apps).\n   */\n  clientSecret: string;\n  /**\n   * The authorization code to exchange.\n   * This is required if `grant_type` is set to `authorization_code`, to indicate that\n   * the application wants to exchange an authorization code for an OAuth access token.\n   */\n  code?: string;\n  /** The redirect URL assigned in the [application dashboard](https://connect.squareup.com/apps). */\n  redirectUri?: string;\n  /**\n   * Specifies the method to request an OAuth access token.\n   * Valid values are: `authorization_code`, `refresh_token`, and `migration_token`\n   */\n  grantType: string;\n  /**\n   * A valid refresh token for generating a new OAuth access token.\n   * A valid refresh token is required if `grant_type` is set to `refresh_token` ,\n   * to indicate the application wants a replacement for an expired OAuth access token.\n   */\n  refreshToken?: string;\n  /**\n   * Legacy OAuth access token obtained using a Connect API version prior\n   * to 2019-03-13. This parameter is required if `grant_type` is set to\n   * `migration_token` to indicate that the application wants to get a replacement\n   * OAuth access token. The response also returns a refresh token.\n   * For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/authz/oauth/migration).\n   */\n  migrationToken?: string;\n  /**\n   * __OPTIONAL__\n   * A JSON list of strings representing the permissions the application is requesting.\n   * For example: \"`[\"MERCHANT_PROFILE_READ\",\"PAYMENTS_READ\",\"BANK_ACCOUNTS_READ\"]`\"\n   * The access token returned in the response is granted the permissions\n   * that comprise the intersection between the requested list of permissions, and those\n   * that belong to the provided refresh token.\n   */\n  scopes?: string[];\n  /**\n   * __OPTIONAL__\n   * A boolean indicating a request for a short-lived access token.\n   * The short-lived access token returned in the response will expire in 24 hours.\n   */\n  shortLived?: boolean;\n}\n\nexport const obtainTokenRequestSchema: Schema<ObtainTokenRequest> = object({\n  clientId: ['client_id', string()],\n  clientSecret: ['client_secret', string()],\n  code: ['code', optional(string())],\n  redirectUri: ['redirect_uri', optional(string())],\n  grantType: ['grant_type', string()],\n  refreshToken: ['refresh_token', optional(string())],\n  migrationToken: ['migration_token', optional(string())],\n  scopes: ['scopes', optional(array(string()))],\n  shortLived: ['short_lived', optional(boolean())],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\nexport interface ObtainTokenResponse {\n  /**\n   * A valid OAuth access token. OAuth access tokens are 64 bytes long.\n   * Provide the access token in a header with every request to Connect API\n   * endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough)\n   * for more information.\n   */\n  accessToken?: string;\n  /** This value is always _bearer_. */\n  tokenType?: string;\n  /** The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format. */\n  expiresAt?: string;\n  /** The ID of the authorizing merchant's business. */\n  merchantId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of a subscription plan the merchant signed up\n   * for. Only present if the merchant signed up for a subscription during authorization.\n   */\n  subscriptionId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of the subscription plan the merchant signed\n   * up for. Only present if the merchant signed up for a subscription during\n   * authorization.\n   */\n  planId?: string;\n  /**\n   * Then OpenID token belonging to this this person. Only present if the\n   * OPENID scope is included in the authorize request.\n   */\n  idToken?: string;\n  /**\n   * A refresh token. OAuth refresh tokens are 64 bytes long.\n   * For more information, see [OAuth access token management](https://developer.squareup.com/docs/authz/oauth/how-it-works#oauth-access-token-management).\n   */\n  refreshToken?: string;\n  /**\n   * A boolean indicating the access token is a short-lived access token.\n   * The short-lived access token returned in the response will expire in 24 hours.\n   */\n  shortLived?: boolean;\n}\n\nexport const obtainTokenResponseSchema: Schema<ObtainTokenResponse> = object({\n  accessToken: ['access_token', optional(string())],\n  tokenType: ['token_type', optional(string())],\n  expiresAt: ['expires_at', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  subscriptionId: ['subscription_id', optional(string())],\n  planId: ['plan_id', optional(string())],\n  idToken: ['id_token', optional(string())],\n  refreshToken: ['refresh_token', optional(string())],\n  shortLived: ['short_lived', optional(boolean())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface RenewTokenRequest {\n  /** The token you want to renew. */\n  accessToken?: string;\n}\n\nexport const renewTokenRequestSchema: Schema<RenewTokenRequest> = object({\n  accessToken: ['access_token', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface RenewTokenResponse {\n  /**\n   * The renewed access token.\n   * This value might be different from the `access_token` you provided in your request.\n   * You provide this token in a header with every request to Connect API endpoints.\n   * See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.\n   */\n  accessToken?: string;\n  /** This value is always _bearer_. */\n  tokenType?: string;\n  /** The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format. */\n  expiresAt?: string;\n  /** The ID of the authorizing merchant's business. */\n  merchantId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of the merchant subscription associated with\n   * the authorization. Only present if the merchant signed up for a subscription\n   * during authorization..\n   */\n  subscriptionId?: string;\n  /**\n   * __LEGACY FIELD__. The ID of the subscription plan the merchant signed\n   * up for. Only present if the merchant signed up for a subscription during\n   * authorization.\n   */\n  planId?: string;\n}\n\nexport const renewTokenResponseSchema: Schema<RenewTokenResponse> = object({\n  accessToken: ['access_token', optional(string())],\n  tokenType: ['token_type', optional(string())],\n  expiresAt: ['expires_at', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  subscriptionId: ['subscription_id', optional(string())],\n  planId: ['plan_id', optional(string())],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\nexport interface RevokeTokenRequest {\n  /**\n   * The Square issued ID for your application, available from the\n   * [application dashboard](https://connect.squareup.com/apps).\n   */\n  clientId?: string;\n  /**\n   * The access token of the merchant whose token you want to revoke.\n   * Do not provide a value for merchant_id if you provide this parameter.\n   */\n  accessToken?: string;\n  /**\n   * The ID of the merchant whose token you want to revoke.\n   * Do not provide a value for access_token if you provide this parameter.\n   */\n  merchantId?: string;\n  /**\n   * If `true`, terminate the given single access token, but do not\n   * terminate the entire authorization.\n   * Default: `false`\n   */\n  revokeOnlyAccessToken?: boolean;\n}\n\nexport const revokeTokenRequestSchema: Schema<RevokeTokenRequest> = object({\n  clientId: ['client_id', optional(string())],\n  accessToken: ['access_token', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  revokeOnlyAccessToken: ['revoke_only_access_token', optional(boolean())],\n});\n","import { boolean, object, optional, Schema } from '../schema';\n\nexport interface RevokeTokenResponse {\n  /** If the request is successful, this is true. */\n  success?: boolean;\n}\n\nexport const revokeTokenResponseSchema: Schema<RevokeTokenResponse> = object({\n  success: ['success', optional(boolean())],\n});\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  ObtainTokenRequest,\n  obtainTokenRequestSchema,\n} from '../models/obtainTokenRequest';\nimport {\n  ObtainTokenResponse,\n  obtainTokenResponseSchema,\n} from '../models/obtainTokenResponse';\nimport {\n  RenewTokenRequest,\n  renewTokenRequestSchema,\n} from '../models/renewTokenRequest';\nimport {\n  RenewTokenResponse,\n  renewTokenResponseSchema,\n} from '../models/renewTokenResponse';\nimport {\n  RevokeTokenRequest,\n  revokeTokenRequestSchema,\n} from '../models/revokeTokenRequest';\nimport {\n  RevokeTokenResponse,\n  revokeTokenResponseSchema,\n} from '../models/revokeTokenResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class OAuthApi extends BaseApi {\n  /**\n   * `RenewToken` is deprecated. For information about refreshing OAuth access tokens, see\n   * [Renew OAuth Token](https://developer.squareup.com/docs/oauth-api/cookbook/renew-oauth-tokens).\n   *\n   *\n   * Renews an OAuth access token before it expires.\n   *\n   * OAuth access tokens besides your application's personal access token expire after __30 days__.\n   * You can also renew expired tokens within __15 days__ of their expiration.\n   * You cannot renew an access token that has been expired for more than 15 days.\n   * Instead, the associated user must re-complete the OAuth flow from the beginning.\n   *\n   * __Important:__ The `Authorization` header for this endpoint must have the\n   * following format:\n   *\n   * ```\n   * Authorization: Client APPLICATION_SECRET\n   * ```\n   *\n   * Replace `APPLICATION_SECRET` with the application secret on the Credentials\n   * page in the [application dashboard](https://connect.squareup.com/apps).\n   *\n   * @param clientId      Your application ID, available from the [application\n   *                                                  dashboard](https://connect.squareup.com/apps).\n   * @param body          An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @param authorization Client APPLICATION_SECRET\n   * @return Response from the API call\n   * @deprecated\n   */\n  async renewToken(\n    clientId: string,\n    body: RenewTokenRequest,\n    authorization: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RenewTokenResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      clientId: [clientId, string()],\n      body: [body, renewTokenRequestSchema],\n      authorization: [authorization, string()],\n    });\n    req.header('Authorization', mapped.authorization);\n    req.json(mapped.body);\n    req.appendTemplatePath`/oauth2/clients/${mapped.clientId}/access-token/renew`;\n    req.deprecated('OAuthApi.renewToken');\n    req.authenticate(false);\n    return req.callAsJson(renewTokenResponseSchema, requestOptions);\n  }\n\n  /**\n   * Revokes an access token generated with the OAuth flow.\n   *\n   * If an account has more than one OAuth access token for your application, this\n   * endpoint revokes all of them, regardless of which token you specify. When an\n   * OAuth access token is revoked, all of the active subscriptions associated\n   * with that OAuth token are canceled immediately.\n   *\n   * __Important:__ The `Authorization` header for this endpoint must have the\n   * following format:\n   *\n   * ```\n   * Authorization: Client APPLICATION_SECRET\n   * ```\n   *\n   * Replace `APPLICATION_SECRET` with the application secret on the Credentials\n   * page in the [Developer Dashboard](https://developer.squareup.com/apps).\n   *\n   * @param body          An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @param authorization Client APPLICATION_SECRET\n   * @return Response from the API call\n   */\n  async revokeToken(\n    body: RevokeTokenRequest,\n    authorization: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RevokeTokenResponse>> {\n    const req = this.createRequest('POST', '/oauth2/revoke');\n    const mapped = req.prepareArgs({\n      body: [body, revokeTokenRequestSchema],\n      authorization: [authorization, string()],\n    });\n    req.header('Authorization', mapped.authorization);\n    req.json(mapped.body);\n    req.authenticate(false);\n    return req.callAsJson(revokeTokenResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns an OAuth access token.\n   *\n   * The endpoint supports distinct methods of obtaining OAuth access tokens.\n   * Applications specify a method by adding the `grant_type` parameter\n   * in the request and also provide relevant information.\n   *\n   * __Note:__ Regardless of the method application specified,\n   * the endpoint always returns two items; an OAuth access token and\n   * a refresh token in the response.\n   *\n   * __OAuth tokens should only live on secure servers. Application clients\n   * should never interact directly with OAuth tokens__.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                          corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async obtainToken(\n    body: ObtainTokenRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ObtainTokenResponse>> {\n    const req = this.createRequest('POST', '/oauth2/token');\n    const mapped = req.prepareArgs({ body: [body, obtainTokenRequestSchema] });\n    req.json(mapped.body);\n    req.authenticate(false);\n    return req.callAsJson(obtainTokenResponseSchema, requestOptions);\n  }\n}\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the fields that are included in requests to the\n * BatchRetrieveOrders endpoint.\n */\nexport interface BatchRetrieveOrdersRequest {\n  /**\n   * The ID of the location for these orders. This field is optional: omit it to retrieve\n   * orders within the scope of the current authorization's merchant ID.\n   */\n  locationId?: string;\n  /** The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request. */\n  orderIds: string[];\n}\n\nexport const batchRetrieveOrdersRequestSchema: Schema<BatchRetrieveOrdersRequest> = object(\n  {\n    locationId: ['location_id', optional(string())],\n    orderIds: ['order_ids', array(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the BatchRetrieveOrders endpoint.\n */\nexport interface BatchRetrieveOrdersResponse {\n  /** The requested orders. This will omit any requested orders that do not exist. */\n  orders?: Order[];\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const batchRetrieveOrdersResponseSchema: Schema<BatchRetrieveOrdersResponse> = object(\n  {\n    orders: ['orders', optional(array(lazy(() => orderSchema)))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Order, orderSchema } from './order';\nimport { OrderReward, orderRewardSchema } from './orderReward';\n\nexport interface CalculateOrderRequest {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order: Order;\n  /**\n   * Identifies one or more loyalty reward tiers to apply during order calculation.\n   * The discounts defined by the reward tiers are added to the order only to preview the\n   * effect of applying the specified reward(s). The reward(s) do not correspond to actual\n   * redemptions, that is, no `reward`s are created. Therefore, the reward `id`s are\n   * random strings used only to reference the reward tier.\n   */\n  proposedRewards?: OrderReward[];\n}\n\nexport const calculateOrderRequestSchema: Schema<CalculateOrderRequest> = object(\n  {\n    order: ['order', lazy(() => orderSchema)],\n    proposedRewards: [\n      'proposed_rewards',\n      optional(array(lazy(() => orderRewardSchema))),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\nexport interface CalculateOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const calculateOrderResponseSchema: Schema<CalculateOrderResponse> = object(\n  {\n    order: ['order', optional(lazy(() => orderSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the CreateOrder endpoint.\n * One of `errors` or `order` is present in a given response (never both).\n */\nexport interface CreateOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createOrderResponseSchema: Schema<CreateOrderResponse> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, number, object, optional, Schema, string } from '../schema';\n\n/**\n * Defines the fields that are included in requests to the\n * [PayOrder](#endpoint-payorder) endpoint.\n */\nexport interface PayOrderRequest {\n  /**\n   * A value you specify that uniquely identifies this request among requests you've sent. If\n   * you're unsure whether a particular payment request was completed successfully, you can reattempt\n   * it with the same idempotency key without worrying about duplicate payments.\n   * See [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  /** The version of the order being paid. If not supplied, the latest version will be paid. */\n  orderVersion?: number;\n  /**\n   * The IDs of the [payments](#type-payment) to collect.\n   * The payment total must match the order total.\n   */\n  paymentIds?: string[];\n}\n\nexport const payOrderRequestSchema: Schema<PayOrderRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  orderVersion: ['order_version', optional(number())],\n  paymentIds: ['payment_ids', optional(array(string()))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of a request to the\n * [PayOrder](#endpoint-payorder) endpoint.\n */\nexport interface PayOrderResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n}\n\nexport const payOrderResponseSchema: Schema<PayOrderResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  order: ['order', optional(lazy(() => orderSchema))],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\nexport interface RetrieveOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveOrderResponseSchema: Schema<RetrieveOrderResponse> = object(\n  {\n    order: ['order', optional(lazy(() => orderSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Filter based on Order `customer_id` and any Tender `customer_id`\n * associated with the Order. Does not filter based on the\n * [FulfillmentRecipient](#type-orderfulfillmentrecipient) `customer_id`.\n */\nexport interface SearchOrdersCustomerFilter {\n  /**\n   * List of customer IDs to filter by.\n   * Max: 10 customer IDs.\n   */\n  customerIds?: string[];\n}\n\nexport const searchOrdersCustomerFilterSchema: Schema<SearchOrdersCustomerFilter> = object(\n  { customerIds: ['customer_ids', optional(array(string()))] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\n/**\n * Filter for `Order` objects based on whether their `CREATED_AT`,\n * `CLOSED_AT` or `UPDATED_AT` timestamps fall within a specified time range.\n * You can specify the time range and which timestamp to filter for. You can filter\n * for only one time range at a time.\n * For each time range, the start time and end time are inclusive. If the end time\n * is absent, it defaults to the time of the first request for the cursor.\n * __Important:__ If you use the DateTimeFilter in a SearchOrders query,\n * you must also set the `sort_field` in [OrdersSort](#type-searchorderordersort)\n * to the same field you filter for. For example, if you set the `CLOSED_AT` field\n * in DateTimeFilter, you must also set the `sort_field` in SearchOrdersSort to\n * `CLOSED_AT`. Otherwise, SearchOrders will throw an error.\n * [Learn more about filtering orders by time range](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range).\n */\nexport interface SearchOrdersDateTimeFilter {\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  updatedAt?: TimeRange;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  closedAt?: TimeRange;\n}\n\nexport const searchOrdersDateTimeFilterSchema: Schema<SearchOrdersDateTimeFilter> = object(\n  {\n    createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n    updatedAt: ['updated_at', optional(lazy(() => timeRangeSchema))],\n    closedAt: ['closed_at', optional(lazy(() => timeRangeSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Filter based on [Order Fulfillment](#type-orderfulfillment) information. */\nexport interface SearchOrdersFulfillmentFilter {\n  /**\n   * List of [fulfillment types](#type-orderfulfillmenttype) to filter\n   * for. Will return orders if any of its fulfillments match any of the fulfillment types\n   * listed in this field.\n   * See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values\n   */\n  fulfillmentTypes?: string[];\n  /**\n   * List of [fulfillment states](#type-orderfulfillmentstate) to filter\n   * for. Will return orders if any of its fulfillments match any of the\n   * fulfillment states listed in this field.\n   * See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values\n   */\n  fulfillmentStates?: string[];\n}\n\nexport const searchOrdersFulfillmentFilterSchema: Schema<SearchOrdersFulfillmentFilter> = object(\n  {\n    fulfillmentTypes: ['fulfillment_types', optional(array(string()))],\n    fulfillmentStates: ['fulfillment_states', optional(array(string()))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Filter based on order `source` information. */\nexport interface SearchOrdersSourceFilter {\n  /**\n   * Filters by [Source](#type-ordersource) `name`. Will return any orders\n   * with with a `source.name` that matches any of the listed source names.\n   * Max: 10 source names.\n   */\n  sourceNames?: string[];\n}\n\nexport const searchOrdersSourceFilterSchema: Schema<SearchOrdersSourceFilter> = object(\n  { sourceNames: ['source_names', optional(array(string()))] }\n);\n","import { array, object, Schema, string } from '../schema';\n\n/** Filter by current Order `state`. */\nexport interface SearchOrdersStateFilter {\n  /**\n   * States to filter for.\n   * See [OrderState](#type-orderstate) for possible values\n   */\n  states: string[];\n}\n\nexport const searchOrdersStateFilterSchema: Schema<SearchOrdersStateFilter> = object(\n  { states: ['states', array(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchOrdersCustomerFilter,\n  searchOrdersCustomerFilterSchema,\n} from './searchOrdersCustomerFilter';\nimport {\n  SearchOrdersDateTimeFilter,\n  searchOrdersDateTimeFilterSchema,\n} from './searchOrdersDateTimeFilter';\nimport {\n  SearchOrdersFulfillmentFilter,\n  searchOrdersFulfillmentFilterSchema,\n} from './searchOrdersFulfillmentFilter';\nimport {\n  SearchOrdersSourceFilter,\n  searchOrdersSourceFilterSchema,\n} from './searchOrdersSourceFilter';\nimport {\n  SearchOrdersStateFilter,\n  searchOrdersStateFilterSchema,\n} from './searchOrdersStateFilter';\n\n/**\n * Filtering criteria to use for a SearchOrders request. Multiple filters\n * will be ANDed together.\n */\nexport interface SearchOrdersFilter {\n  /** Filter by current Order `state`. */\n  stateFilter?: SearchOrdersStateFilter;\n  /**\n   * Filter for `Order` objects based on whether their `CREATED_AT`,\n   * `CLOSED_AT` or `UPDATED_AT` timestamps fall within a specified time range.\n   * You can specify the time range and which timestamp to filter for. You can filter\n   * for only one time range at a time.\n   * For each time range, the start time and end time are inclusive. If the end time\n   * is absent, it defaults to the time of the first request for the cursor.\n   * __Important:__ If you use the DateTimeFilter in a SearchOrders query,\n   * you must also set the `sort_field` in [OrdersSort](#type-searchorderordersort)\n   * to the same field you filter for. For example, if you set the `CLOSED_AT` field\n   * in DateTimeFilter, you must also set the `sort_field` in SearchOrdersSort to\n   * `CLOSED_AT`. Otherwise, SearchOrders will throw an error.\n   * [Learn more about filtering orders by time range](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range).\n   */\n  dateTimeFilter?: SearchOrdersDateTimeFilter;\n  /** Filter based on [Order Fulfillment](#type-orderfulfillment) information. */\n  fulfillmentFilter?: SearchOrdersFulfillmentFilter;\n  /** Filter based on order `source` information. */\n  sourceFilter?: SearchOrdersSourceFilter;\n  /**\n   * Filter based on Order `customer_id` and any Tender `customer_id`\n   * associated with the Order. Does not filter based on the\n   * [FulfillmentRecipient](#type-orderfulfillmentrecipient) `customer_id`.\n   */\n  customerFilter?: SearchOrdersCustomerFilter;\n}\n\nexport const searchOrdersFilterSchema: Schema<SearchOrdersFilter> = object({\n  stateFilter: [\n    'state_filter',\n    optional(lazy(() => searchOrdersStateFilterSchema)),\n  ],\n  dateTimeFilter: [\n    'date_time_filter',\n    optional(lazy(() => searchOrdersDateTimeFilterSchema)),\n  ],\n  fulfillmentFilter: [\n    'fulfillment_filter',\n    optional(lazy(() => searchOrdersFulfillmentFilterSchema)),\n  ],\n  sourceFilter: [\n    'source_filter',\n    optional(lazy(() => searchOrdersSourceFilterSchema)),\n  ],\n  customerFilter: [\n    'customer_filter',\n    optional(lazy(() => searchOrdersCustomerFilterSchema)),\n  ],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Sorting criteria for a SearchOrders request. Results can only be sorted\n * by a timestamp field.\n */\nexport interface SearchOrdersSort {\n  /** Specifies which timestamp to use to sort SearchOrder results. */\n  sortField: string;\n  /** The order (e.g., chronological or alphabetical) in which results from a request are returned. */\n  sortOrder?: string;\n}\n\nexport const searchOrdersSortSchema: Schema<SearchOrdersSort> = object({\n  sortField: ['sort_field', string()],\n  sortOrder: ['sort_order', optional(string())],\n});\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchOrdersFilter,\n  searchOrdersFilterSchema,\n} from './searchOrdersFilter';\nimport { SearchOrdersSort, searchOrdersSortSchema } from './searchOrdersSort';\n\n/** Contains query criteria for the search. */\nexport interface SearchOrdersQuery {\n  /**\n   * Filtering criteria to use for a SearchOrders request. Multiple filters\n   * will be ANDed together.\n   */\n  filter?: SearchOrdersFilter;\n  /**\n   * Sorting criteria for a SearchOrders request. Results can only be sorted\n   * by a timestamp field.\n   */\n  sort?: SearchOrdersSort;\n}\n\nexport const searchOrdersQuerySchema: Schema<SearchOrdersQuery> = object({\n  filter: ['filter', optional(lazy(() => searchOrdersFilterSchema))],\n  sort: ['sort', optional(lazy(() => searchOrdersSortSchema))],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport {\n  SearchOrdersQuery,\n  searchOrdersQuerySchema,\n} from './searchOrdersQuery';\n\n/**\n * The request does not have any required fields. When given no query criteria,\n * SearchOrders will return all results for all of the merchant’s locations. When fetching additional\n * pages using a `cursor`, the `query` must be equal to the `query` used to fetch the first page of\n * results.\n */\nexport interface SearchOrdersRequest {\n  /**\n   * The location IDs for the orders to query. All locations must belong to\n   * the same merchant.\n   * Min: 1 location IDs.\n   * Max: 10 location IDs.\n   */\n  locationIds?: string[];\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for your original query.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** Contains query criteria for the search. */\n  query?: SearchOrdersQuery;\n  /**\n   * Maximum number of results to be returned in a single page. It is\n   * possible to receive fewer results than the specified limit on a given page.\n   * Default: `500`\n   */\n  limit?: number;\n  /**\n   * Boolean that controls the format of the search results. If `true`,\n   * SearchOrders will return [`OrderEntry`](#type-orderentry) objects. If `false`, SearchOrders\n   * will return complete Order objects.\n   * Default: `false`.\n   */\n  returnEntries?: boolean;\n}\n\nexport const searchOrdersRequestSchema: Schema<SearchOrdersRequest> = object({\n  locationIds: ['location_ids', optional(array(string()))],\n  cursor: ['cursor', optional(string())],\n  query: ['query', optional(lazy(() => searchOrdersQuerySchema))],\n  limit: ['limit', optional(number())],\n  returnEntries: ['return_entries', optional(boolean())],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/**\n * A lightweight description of an [Order](#type-order) that is returned when `returned_entries` is true on a\n * [SearchOrderRequest](#type-searchorderrequest)\n */\nexport interface OrderEntry {\n  /** The id of the Order */\n  orderId?: string;\n  /**\n   * Version number which is incremented each time an update is committed to the order.\n   * Orders that were not created through the API will not include a version and\n   * thus cannot be updated.\n   * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).\n   */\n  version?: number;\n  /** The location id the Order belongs to. */\n  locationId?: string;\n}\n\nexport const orderEntrySchema: Schema<OrderEntry> = object({\n  orderId: ['order_id', optional(string())],\n  version: ['version', optional(number())],\n  locationId: ['location_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\nimport { OrderEntry, orderEntrySchema } from './orderEntry';\n\n/**\n * Only one of `order_entries` or `orders` fields will be set, depending on whether\n * `return_entries` was set on the [SearchOrdersRequest](#type-searchorderrequest).\n */\nexport interface SearchOrdersResponse {\n  /**\n   * List of [OrderEntries](#type-orderentry) that fit the query\n   * conditions. Populated only if `return_entries` was set to `true` in the request.\n   */\n  orderEntries?: OrderEntry[];\n  /**\n   * List of\n   * [Order](#type-order) objects that match query conditions. Populated only if\n   * `return_entries` in the request is set to `false`.\n   */\n  orders?: Order[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If unset,\n   * this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** [Errors](#type-error) encountered during the search. */\n  errors?: Error[];\n}\n\nexport const searchOrdersResponseSchema: Schema<SearchOrdersResponse> = object({\n  orderEntries: [\n    'order_entries',\n    optional(array(lazy(() => orderEntrySchema))),\n  ],\n  orders: ['orders', optional(array(lazy(() => orderSchema)))],\n  cursor: ['cursor', optional(string())],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in requests to the\n * [UpdateOrder](#endpoint-orders-updateorder) endpoint.\n */\nexport interface UpdateOrderRequest {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /**\n   * The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)\n   * fields to clear. For example, `line_items[uid].note`\n   * [Read more about Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).\n   */\n  fieldsToClear?: string[];\n  /**\n   * A value you specify that uniquely identifies this update request\n   * If you're unsure whether a particular update was applied to an order successfully,\n   * you can reattempt it with the same idempotency key without\n   * worrying about creating duplicate updates to the order.\n   * The latest order version will be returned.\n   * See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey?: string;\n}\n\nexport const updateOrderRequestSchema: Schema<UpdateOrderRequest> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  fieldsToClear: ['fields_to_clear', optional(array(string()))],\n  idempotencyKey: ['idempotency_key', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Order, orderSchema } from './order';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [UpdateOrder](#endpoint-orders-updateorder) endpoint.\n */\nexport interface UpdateOrderResponse {\n  /**\n   * Contains all information related to a single order to process with Square,\n   * including line items that specify the products to purchase. Order objects also\n   * include information on any associated tenders, refunds, and returns.\n   * All Connect V2 Transactions have all been converted to Orders including all associated\n   * itemization data.\n   */\n  order?: Order;\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateOrderResponseSchema: Schema<UpdateOrderResponse> = object({\n  order: ['order', optional(lazy(() => orderSchema))],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  BatchRetrieveOrdersRequest,\n  batchRetrieveOrdersRequestSchema,\n} from '../models/batchRetrieveOrdersRequest';\nimport {\n  BatchRetrieveOrdersResponse,\n  batchRetrieveOrdersResponseSchema,\n} from '../models/batchRetrieveOrdersResponse';\nimport {\n  CalculateOrderRequest,\n  calculateOrderRequestSchema,\n} from '../models/calculateOrderRequest';\nimport {\n  CalculateOrderResponse,\n  calculateOrderResponseSchema,\n} from '../models/calculateOrderResponse';\nimport {\n  CreateOrderRequest,\n  createOrderRequestSchema,\n} from '../models/createOrderRequest';\nimport {\n  CreateOrderResponse,\n  createOrderResponseSchema,\n} from '../models/createOrderResponse';\nimport {\n  PayOrderRequest,\n  payOrderRequestSchema,\n} from '../models/payOrderRequest';\nimport {\n  PayOrderResponse,\n  payOrderResponseSchema,\n} from '../models/payOrderResponse';\nimport {\n  RetrieveOrderResponse,\n  retrieveOrderResponseSchema,\n} from '../models/retrieveOrderResponse';\nimport {\n  SearchOrdersRequest,\n  searchOrdersRequestSchema,\n} from '../models/searchOrdersRequest';\nimport {\n  SearchOrdersResponse,\n  searchOrdersResponseSchema,\n} from '../models/searchOrdersResponse';\nimport {\n  UpdateOrderRequest,\n  updateOrderRequestSchema,\n} from '../models/updateOrderRequest';\nimport {\n  UpdateOrderResponse,\n  updateOrderResponseSchema,\n} from '../models/updateOrderResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class OrdersApi extends BaseApi {\n  /**\n   * Creates a new [Order](#type-order) which can include information on products for\n   * purchase and settings to apply to the purchase.\n   *\n   * To pay for a created order, please refer to the [Pay for Orders](https://developer.squareup.\n   * com/docs/orders-api/pay-for-orders)\n   * guide.\n   *\n   * You can modify open orders using the [UpdateOrder](#endpoint-orders-updateorder) endpoint.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                          corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createOrder(\n    body: CreateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateOrderResponse>> {\n    const req = this.createRequest('POST', '/v2/orders');\n    const mapped = req.prepareArgs({ body: [body, createOrderRequestSchema] });\n    req.json(mapped.body);\n    return req.callAsJson(createOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a set of [Order](#type-order)s by their IDs.\n   *\n   * If a given Order ID does not exist, the ID is ignored instead of generating an error.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async batchRetrieveOrders(\n    body: BatchRetrieveOrdersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BatchRetrieveOrdersResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/batch-retrieve');\n    const mapped = req.prepareArgs({\n      body: [body, batchRetrieveOrdersRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(batchRetrieveOrdersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Calculates an [Order](#type-order).\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                             corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async calculateOrder(\n    body: CalculateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CalculateOrderResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/calculate');\n    const mapped = req.prepareArgs({\n      body: [body, calculateOrderRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(calculateOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Search all orders for one or more locations. Orders include all sales,\n   * returns, and exchanges regardless of how or when they entered the Square\n   * Ecosystem (e.g. Point of Sale, Invoices, Connect APIs, etc).\n   *\n   * SearchOrders requests need to specify which locations to search and define a\n   * [`SearchOrdersQuery`](#type-searchordersquery) object which controls\n   * how to sort or filter the results. Your SearchOrdersQuery can:\n   *\n   * Set filter criteria.\n   * Set sort order.\n   * Determine whether to return results as complete Order objects, or as\n   * [OrderEntry](#type-orderentry) objects.\n   *\n   * Note that details for orders processed with Square Point of Sale while in\n   * offline mode may not be transmitted to Square for up to 72 hours. Offline\n   * orders have a `created_at` value that reflects the time the order was created,\n   * not the time it was subsequently transmitted to Square.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                           corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchOrders(\n    body: SearchOrdersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchOrdersResponse>> {\n    const req = this.createRequest('POST', '/v2/orders/search');\n    const mapped = req.prepareArgs({ body: [body, searchOrdersRequestSchema] });\n    req.json(mapped.body);\n    return req.callAsJson(searchOrdersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves an [Order](#type-order) by ID.\n   *\n   * @param orderId  The ID of the order to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveOrder(\n    orderId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveOrderResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ orderId: [orderId, string()] });\n    req.appendTemplatePath`/v2/orders/${mapped.orderId}`;\n    return req.callAsJson(retrieveOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates an open [Order](#type-order) by adding, replacing, or deleting\n   * fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.\n   *\n   * An UpdateOrder request requires the following:\n   *\n   * - The `order_id` in the endpoint path, identifying the order to update.\n   * - The latest `version` of the order to update.\n   * - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-\n   * objects)\n   * containing only the fields to update and the version the update is\n   * being applied to.\n   * - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-\n   * orders#on-dot-notation)\n   * identifying fields to clear.\n   *\n   * To pay for an order, please refer to the [Pay for Orders](https://developer.squareup.com/docs/orders-\n   * api/pay-for-orders) guide.\n   *\n   * @param orderId  The ID of the order to update.\n   * @param body     An object containing the fields to POST for the request.  See the\n   *                                              corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateOrder(\n    orderId: string,\n    body: UpdateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateOrderResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      orderId: [orderId, string()],\n      body: [body, updateOrderRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/orders/${mapped.orderId}`;\n    return req.callAsJson(updateOrderResponseSchema, requestOptions);\n  }\n\n  /**\n   * Pay for an [order](#type-order) using one or more approved [payments](#type-payment),\n   * or settle an order with a total of `0`.\n   *\n   * The total of the `payment_ids` listed in the request must be equal to the order\n   * total. Orders with a total amount of `0` can be marked as paid by specifying an empty\n   * array of `payment_ids` in the request.\n   *\n   * To be used with PayOrder, a payment must:\n   *\n   * - Reference the order by specifying the `order_id` when [creating the payment](#endpoint-payments-\n   * createpayment).\n   * Any approved payments that reference the same `order_id` not specified in the\n   * `payment_ids` will be canceled.\n   * - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-\n   * payments#delayed-capture).\n   * Using a delayed capture payment with PayOrder will complete the approved payment.\n   *\n   * @param orderId  The ID of the order being paid.\n   * @param body     An object containing the fields to POST for the request.  See the\n   *                                           corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async payOrder(\n    orderId: string,\n    body: PayOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<PayOrderResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      orderId: [orderId, string()],\n      body: [body, payOrderRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/orders/${mapped.orderId}/pay`;\n    return req.callAsJson(payOrderResponseSchema, requestOptions);\n  }\n}\n","import { object, Schema, string } from '../schema';\n\n/** Specifies the idempotency key of a payment to cancel. */\nexport interface CancelPaymentByIdempotencyKeyRequest {\n  /** The `idempotency_key` identifying the payment to be canceled. */\n  idempotencyKey: string;\n}\n\nexport const cancelPaymentByIdempotencyKeyRequestSchema: Schema<CancelPaymentByIdempotencyKeyRequest> = object(\n  { idempotencyKey: ['idempotency_key', string()] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * The return value from the\n * [CancelPaymentByIdempotencyKey](#endpoint-payments-cancelpaymentbyidempotencykey) endpoint.\n * On success, `errors` is empty.\n */\nexport interface CancelPaymentByIdempotencyKeyResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const cancelPaymentByIdempotencyKeyResponseSchema: Schema<CancelPaymentByIdempotencyKeyResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** Details about the device that took the payment. */\nexport interface DeviceDetails {\n  /** The Square-issued ID of the device. */\n  deviceId?: string;\n  /** The Square-issued installation ID for the device. */\n  deviceInstallationId?: string;\n  /** The name of the device set by the seller. */\n  deviceName?: string;\n}\n\nexport const deviceDetailsSchema: Schema<DeviceDetails> = object({\n  deviceId: ['device_id', optional(string())],\n  deviceInstallationId: ['device_installation_id', optional(string())],\n  deviceName: ['device_name', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Card, cardSchema } from './card';\nimport { DeviceDetails, deviceDetailsSchema } from './deviceDetails';\nimport { Error, errorSchema } from './error';\n\n/** Reflects the current status of a card payment. */\nexport interface CardPaymentDetails {\n  /**\n   * The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or\n   * FAILED.\n   */\n  status?: string;\n  /**\n   * Represents the payment details of a card to be used for payments. These\n   * details are determined by the `card_nonce` generated by `SqPaymentForm`.\n   */\n  card?: Card;\n  /**\n   * The method used to enter the card's details for the payment. The method can be\n   * `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.\n   */\n  entryMethod?: string;\n  /**\n   * The status code returned from the Card Verification Value (CVV) check. The code can be\n   * `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.\n   */\n  cvvStatus?: string;\n  /**\n   * The status code returned from the Address Verification System (AVS) check. The code can be\n   * `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.\n   */\n  avsStatus?: string;\n  /**\n   * The status code returned by the card issuer that describes the payment's\n   * authorization status.\n   */\n  authResultCode?: string;\n  /** For EMV payments, the application ID identifies the EMV application used for the payment. */\n  applicationIdentifier?: string;\n  /** For EMV payments, the human-readable name of the EMV application used for the payment. */\n  applicationName?: string;\n  /** For EMV payments, the cryptogram generated for the payment. */\n  applicationCryptogram?: string;\n  /**\n   * For EMV payments, the method used to verify the cardholder's identity. The method can be\n   * `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.\n   */\n  verificationMethod?: string;\n  /**\n   * For EMV payments, the results of the cardholder verification. The result can be\n   * `SUCCESS`, `FAILURE`, or `UNKNOWN`.\n   */\n  verificationResults?: string;\n  /**\n   * The statement description sent to the card networks.\n   * Note: The actual statement description varies and is likely to be truncated and appended with\n   * additional information on a per issuer basis.\n   */\n  statementDescription?: string;\n  /** Details about the device that took the payment. */\n  deviceDetails?: DeviceDetails;\n  /**\n   * Whether the card must be physically present for the payment to\n   * be refunded.  If set to `true`, the card must be present.\n   */\n  refundRequiresCardPresence?: boolean;\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n}\n\nexport const cardPaymentDetailsSchema: Schema<CardPaymentDetails> = object({\n  status: ['status', optional(string())],\n  card: ['card', optional(lazy(() => cardSchema))],\n  entryMethod: ['entry_method', optional(string())],\n  cvvStatus: ['cvv_status', optional(string())],\n  avsStatus: ['avs_status', optional(string())],\n  authResultCode: ['auth_result_code', optional(string())],\n  applicationIdentifier: ['application_identifier', optional(string())],\n  applicationName: ['application_name', optional(string())],\n  applicationCryptogram: ['application_cryptogram', optional(string())],\n  verificationMethod: ['verification_method', optional(string())],\n  verificationResults: ['verification_results', optional(string())],\n  statementDescription: ['statement_description', optional(string())],\n  deviceDetails: ['device_details', optional(lazy(() => deviceDetailsSchema))],\n  refundRequiresCardPresence: [\n    'refund_requires_card_presence',\n    optional(boolean()),\n  ],\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Represents the Square processing fee. */\nexport interface ProcessingFee {\n  /** The timestamp of when the fee takes effect, in RFC 3339 format. */\n  effectiveAt?: string;\n  /** The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`. */\n  type?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n}\n\nexport const processingFeeSchema: Schema<ProcessingFee> = object({\n  effectiveAt: ['effective_at', optional(string())],\n  type: ['type', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/**\n * Represents fraud risk information for the associated payment.\n * When you take a payment through Square's Payments API (using the `CreatePayment`\n * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers\n * can use this information to determine the course of action (for example,\n * provide the goods/services or refund the payment).\n */\nexport interface RiskEvaluation {\n  /** The timestamp when payment risk was evaluated, in RFC3339 format. */\n  createdAt?: string;\n  riskLevel?: string;\n}\n\nexport const riskEvaluationSchema: Schema<RiskEvaluation> = object({\n  createdAt: ['created_at', optional(string())],\n  riskLevel: ['risk_level', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  CardPaymentDetails,\n  cardPaymentDetailsSchema,\n} from './cardPaymentDetails';\nimport { Money, moneySchema } from './money';\nimport { ProcessingFee, processingFeeSchema } from './processingFee';\nimport { RiskEvaluation, riskEvaluationSchema } from './riskEvaluation';\n\n/** Represents a payment processed by the Square API. */\nexport interface Payment {\n  /** A unique ID for the payment. */\n  id?: string;\n  /** The timestamp of when the payment was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the payment was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  totalMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /** The processing fees and fee adjustments assessed by Square for this payment. */\n  processingFee?: ProcessingFee[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  refundedMoney?: Money;\n  /** Indicates whether the payment is APPROVED, COMPLETED, CANCELED, or FAILED. */\n  status?: string;\n  /**\n   * The duration of time after the payment's creation when Square automatically applies the\n   * `delay_action` to the payment. This automatic `delay_action` applies only to payments that\n   * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`\n   * time period.\n   * This field is specified as a time duration, in RFC 3339 format.\n   * Notes:\n   * This feature is only supported for card payments.\n   * Default:\n   * - Card-present payments: \"PT36H\" (36 hours) from the creation time.\n   * - Card-not-present payments: \"P7D\" (7 days) from the creation time.\n   */\n  delayDuration?: string;\n  /**\n   * The action to be applied to the payment when the `delay_duration` has elapsed. This field\n   * is read-only.\n   * Current values include `CANCEL`.\n   */\n  delayAction?: string;\n  /**\n   * The read-only timestamp of when the `delay_action` is automatically applied,\n   * in RFC 3339 format.\n   * Note that this field is calculated by summing the payment's `delay_duration` and `created_at`\n   * fields. The `created_at` field is generated by Square and might not exactly match the\n   * time on your local machine.\n   */\n  delayedUntil?: string;\n  /**\n   * The source type for this payment.\n   * Current values include `CARD`.\n   */\n  sourceType?: string;\n  /** Reflects the current status of a card payment. */\n  cardDetails?: CardPaymentDetails;\n  /** The ID of the location associated with the payment. */\n  locationId?: string;\n  /** The ID of the order associated with the payment. */\n  orderId?: string;\n  /**\n   * An optional ID that associates the payment with an entity in\n   * another system.\n   */\n  referenceId?: string;\n  /** The [Customer](#type-customer) ID of the customer associated with the payment. */\n  customerId?: string;\n  /** An optional ID of the employee associated with taking the payment. */\n  employeeId?: string;\n  /** A list of `refund_id`s identifying refunds for the payment. */\n  refundIds?: string[];\n  /**\n   * Represents fraud risk information for the associated payment.\n   * When you take a payment through Square's Payments API (using the `CreatePayment`\n   * endpoint), Square evaluates it and assigns a risk level to the payment. Sellers\n   * can use this information to determine the course of action (for example,\n   * provide the goods/services or refund the payment).\n   */\n  riskEvaluation?: RiskEvaluation;\n  /** The buyer's email address. */\n  buyerEmailAddress?: string;\n  /** Represents a physical address. */\n  billingAddress?: Address;\n  /** Represents a physical address. */\n  shippingAddress?: Address;\n  /** An optional note to include when creating a payment. */\n  note?: string;\n  /**\n   * Additional payment information that gets added to the customer's card statement\n   * as part of the statement description.\n   * Note that the `statement_description_identifier` might get truncated on the statement description\n   * to fit the required information including the Square identifier (SQ *) and the name of the\n   * seller taking the payment.\n   */\n  statementDescriptionIdentifier?: string;\n  /**\n   * The payment's receipt number.\n   * The field is missing if a payment is canceled.\n   */\n  receiptNumber?: string;\n  /**\n   * The URL for the payment's receipt.\n   * The field is only populated for COMPLETED payments.\n   */\n  receiptUrl?: string;\n}\n\nexport const paymentSchema: Schema<Payment> = object({\n  id: ['id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => moneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  totalMoney: ['total_money', optional(lazy(() => moneySchema))],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  processingFee: [\n    'processing_fee',\n    optional(array(lazy(() => processingFeeSchema))),\n  ],\n  refundedMoney: ['refunded_money', optional(lazy(() => moneySchema))],\n  status: ['status', optional(string())],\n  delayDuration: ['delay_duration', optional(string())],\n  delayAction: ['delay_action', optional(string())],\n  delayedUntil: ['delayed_until', optional(string())],\n  sourceType: ['source_type', optional(string())],\n  cardDetails: ['card_details', optional(lazy(() => cardPaymentDetailsSchema))],\n  locationId: ['location_id', optional(string())],\n  orderId: ['order_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  refundIds: ['refund_ids', optional(array(string()))],\n  riskEvaluation: [\n    'risk_evaluation',\n    optional(lazy(() => riskEvaluationSchema)),\n  ],\n  buyerEmailAddress: ['buyer_email_address', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  note: ['note', optional(string())],\n  statementDescriptionIdentifier: [\n    'statement_description_identifier',\n    optional(string()),\n  ],\n  receiptNumber: ['receipt_number', optional(string())],\n  receiptUrl: ['receipt_url', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/** The return value from the [CancelPayment](#endpoint-payments-cancelpayment) endpoint. */\nexport interface CancelPaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const cancelPaymentResponseSchema: Schema<CancelPaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/** The return value from a [CompletePayment](#endpoint-payments-completepayment) call. */\nexport interface CompletePaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const completePaymentResponseSchema: Schema<CompletePaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Money, moneySchema } from './money';\n\n/**\n * Creates a payment from a provided source (such as a nonce or a card on file).\n * The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required\n * to enable application fees.\n * For more information, see [Payments and Refunds APIs Overview](https://developer.squareup.com/docs/payments-api/overview).\n * For information about application fees in a payment, see\n * [Take Payments and Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).\n */\nexport interface CreatePaymentRequest {\n  /**\n   * The ID for the source of funds for this payment. This can be a nonce\n   * generated by the Square payment form or a card on file made with the Customers API.\n   */\n  sourceId: string;\n  /**\n   * A unique string that identifies this `CreatePayment` request. Keys can be any valid string\n   * but must be unique for every `CreatePayment` request.\n   * Max: 45 characters\n   * Note: The number of allowed characters might be less than the stated maximum, if multi-byte\n   * characters are used.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  tipMoney?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /**\n   * The duration of time after the payment's creation when Square automatically cancels the\n   * payment. This automatic cancellation applies only to payments that do not reach a terminal state\n   * (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.\n   * This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value\n   * of 1 minute.\n   * Note: This feature is only supported for card payments. This parameter can only be set for a delayed\n   * capture payment (`autocomplete=false`).\n   * Default:\n   * - Card-present payments: \"PT36H\" (36 hours) from the creation time.\n   * - Card-not-present payments: \"P7D\" (7 days) from the creation time.\n   */\n  delayDuration?: string;\n  /**\n   * If set to `true`, this payment will be completed when possible. If\n   * set to `false`, this payment is held in an approved state until either\n   * explicitly completed (captured) or canceled (voided). For more information, see\n   * [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments#delayed-payments).\n   * Default: true\n   */\n  autocomplete?: boolean;\n  /** Associates a previously created order with this payment. */\n  orderId?: string;\n  /**\n   * The [Customer](#type-customer) ID of the customer associated with the payment.\n   * This is required if the `source_id` refers to a card on file created using the Customers API.\n   */\n  customerId?: string;\n  /**\n   * The location ID to associate with the payment. If not specified, the default location is\n   * used.\n   */\n  locationId?: string;\n  /**\n   * A user-defined ID to associate with the payment.\n   * You can use this field to associate the payment to an entity in an external system\n   * (for example, you might specify an order ID that is generated by a third-party shopping cart).\n   * Limit 40 characters.\n   */\n  referenceId?: string;\n  /**\n   * An identifying token generated by `SqPaymentForm.verifyBuyer()`.\n   * Verification tokens encapsulate customer device information and 3-D Secure\n   * challenge results to indicate that Square has verified the buyer identity.\n   * For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).\n   */\n  verificationToken?: string;\n  /**\n   * If set to `true` and charging a Square Gift Card, a payment might be returned with\n   * `amount_money` equal to less than what was requested. For example, a request for $20 when charging\n   * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose\n   * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card\n   * payment. This field cannot be `true` when `autocomplete = true`.\n   * For more information, see\n   * [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).\n   * Default: false\n   */\n  acceptPartialAuthorization?: boolean;\n  /** The buyer's email address. */\n  buyerEmailAddress?: string;\n  /** Represents a physical address. */\n  billingAddress?: Address;\n  /** Represents a physical address. */\n  shippingAddress?: Address;\n  /**\n   * An optional note to be entered by the developer when creating a payment.\n   * Limit 500 characters.\n   */\n  note?: string;\n  /**\n   * Optional additional payment information to include on the customer's card statement\n   * as part of the statement description. This can be, for example, an invoice number, ticket number,\n   * or short description that uniquely identifies the purchase.\n   * Note that the `statement_description_identifier` might get truncated on the statement description\n   * to fit the required information including the Square identifier (SQ *) and name of the\n   * seller taking the payment.\n   */\n  statementDescriptionIdentifier?: string;\n}\n\nexport const createPaymentRequestSchema: Schema<CreatePaymentRequest> = object({\n  sourceId: ['source_id', string()],\n  idempotencyKey: ['idempotency_key', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  tipMoney: ['tip_money', optional(lazy(() => moneySchema))],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  delayDuration: ['delay_duration', optional(string())],\n  autocomplete: ['autocomplete', optional(boolean())],\n  orderId: ['order_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  verificationToken: ['verification_token', optional(string())],\n  acceptPartialAuthorization: [\n    'accept_partial_authorization',\n    optional(boolean()),\n  ],\n  buyerEmailAddress: ['buyer_email_address', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  note: ['note', optional(string())],\n  statementDescriptionIdentifier: [\n    'statement_description_identifier',\n    optional(string()),\n  ],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CreatePayment](#endpoint-payments-createpayment) endpoint.\n * Note: If there are errors processing the request, the payment field might not be\n * present, or it might be present with a status of `FAILED`.\n */\nexport interface CreatePaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const createPaymentResponseSchema: Schema<CreatePaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    payment: ['payment', optional(lazy(() => paymentSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [GetPayment](#endpoint-payments-getpayment) endpoint.\n */\nexport interface GetPaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** Represents a payment processed by the Square API. */\n  payment?: Payment;\n}\n\nexport const getPaymentResponseSchema: Schema<GetPaymentResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  payment: ['payment', optional(lazy(() => paymentSchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Payment, paymentSchema } from './payment';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListPayments](#endpoint-payments-listpayments) endpoint.\n */\nexport interface ListPaymentsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The requested list of payments. */\n  payments?: Payment[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listPaymentsResponseSchema: Schema<ListPaymentsResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  payments: ['payments', optional(array(lazy(() => paymentSchema)))],\n  cursor: ['cursor', optional(string())],\n});\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CancelPaymentByIdempotencyKeyRequest,\n  cancelPaymentByIdempotencyKeyRequestSchema,\n} from '../models/cancelPaymentByIdempotencyKeyRequest';\nimport {\n  CancelPaymentByIdempotencyKeyResponse,\n  cancelPaymentByIdempotencyKeyResponseSchema,\n} from '../models/cancelPaymentByIdempotencyKeyResponse';\nimport {\n  CancelPaymentResponse,\n  cancelPaymentResponseSchema,\n} from '../models/cancelPaymentResponse';\nimport {\n  CompletePaymentResponse,\n  completePaymentResponseSchema,\n} from '../models/completePaymentResponse';\nimport {\n  CreatePaymentRequest,\n  createPaymentRequestSchema,\n} from '../models/createPaymentRequest';\nimport {\n  CreatePaymentResponse,\n  createPaymentResponseSchema,\n} from '../models/createPaymentResponse';\nimport {\n  GetPaymentResponse,\n  getPaymentResponseSchema,\n} from '../models/getPaymentResponse';\nimport {\n  ListPaymentsResponse,\n  listPaymentsResponseSchema,\n} from '../models/listPaymentsResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class PaymentsApi extends BaseApi {\n  /**\n   * Retrieves a list of payments taken by the account making the request.\n   *\n   * The maximum results per page is 100.\n   *\n   * @param beginTime   The timestamp for the beginning of the reporting period, in RFC 3339 format.\n   *                              Inclusive. Default: The current time minus one year.\n   * @param endTime     The timestamp for the end of the reporting period, in RFC 3339 format.  Default: The\n   *                              current time.\n   * @param sortOrder   The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest\n   *                              to oldest (default).\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query.  For more\n   *                              information, see [Pagination](https://developer.squareup.\n   *                              com/docs/basics/api101/pagination).\n   * @param locationId  Limit results to the location supplied. By default, results are returned for the\n   *                              default (main) location associated with the seller.\n   * @param total       The exact amount in the `total_money` for a payment.\n   * @param last4       The last four digits of a payment card.\n   * @param cardBrand   The brand of the payment card (for example, VISA).\n   * @param limit       The maximum number of results to be returned in a single page. It is possible to\n   *                              receive fewer results than the specified limit on a given page.  The default value of\n   *                              100 is also the maximum allowed value. If the provided value is  greater than 100, it\n   *                              is ignored and the default value is used instead.  Default: `100`\n   * @return Response from the API call\n   */\n  async listPayments(\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    locationId?: string,\n    total?: number,\n    last4?: string,\n    cardBrand?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListPaymentsResponse>> {\n    const req = this.createRequest('GET', '/v2/payments');\n    const mapped = req.prepareArgs({\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n      total: [total, optional(number())],\n      last4: [last4, optional(string())],\n      cardBrand: [cardBrand, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    req.query('total', mapped.total);\n    req.query('last_4', mapped.last4);\n    req.query('card_brand', mapped.cardBrand);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listPaymentsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Charges a payment source (for example, a card\n   * represented by customer's card on file or a card nonce). In addition\n   * to the payment source, the request must include the\n   * amount to accept for the payment.\n   *\n   * There are several optional parameters that you can include in the request\n   * (for example, tip money, whether to autocomplete the payment, or a reference ID\n   * to correlate this payment with another system).\n   *\n   * The `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required\n   * to enable application fees.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                            corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createPayment(\n    body: CreatePaymentRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreatePaymentResponse>> {\n    const req = this.createRequest('POST', '/v2/payments');\n    const mapped = req.prepareArgs({\n      body: [body, createPaymentRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels (voids) a payment identified by the idempotency key that is specified in the\n   * request.\n   *\n   * Use this method when the status of a `CreatePayment` request is unknown (for example, after you send\n   * a\n   * `CreatePayment` request, a network error occurs and you do not get a response). In this case, you\n   * can\n   * direct Square to cancel the payment using this endpoint. In the request, you provide the same\n   * idempotency key that you provided in your `CreatePayment` request that you want to cancel. After\n   * canceling the payment, you can submit your `CreatePayment` request again.\n   *\n   * Note that if no payment with the specified idempotency key is found, no action is taken and the\n   * endpoint\n   * returns successfully.\n   *\n   * @param body An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async cancelPaymentByIdempotencyKey(\n    body: CancelPaymentByIdempotencyKeyRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelPaymentByIdempotencyKeyResponse>> {\n    const req = this.createRequest('POST', '/v2/payments/cancel');\n    const mapped = req.prepareArgs({\n      body: [body, cancelPaymentByIdempotencyKeyRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      cancelPaymentByIdempotencyKeyResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves details for a specific payment.\n   *\n   * @param paymentId  A unique ID for the desired payment.\n   * @return Response from the API call\n   */\n  async getPayment(\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetPaymentResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ paymentId: [paymentId, string()] });\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}`;\n    return req.callAsJson(getPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels (voids) a payment. If you set `autocomplete` to `false` when creating a payment,\n   * you can cancel the payment using this endpoint.\n   *\n   * @param paymentId  The `payment_id` identifying the payment to be canceled.\n   * @return Response from the API call\n   */\n  async cancelPayment(\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelPaymentResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ paymentId: [paymentId, string()] });\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}/cancel`;\n    return req.callAsJson(cancelPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Completes (captures) a payment.\n   *\n   * By default, payments are set to complete immediately after they are created.\n   * If you set `autocomplete` to `false` when creating a payment, you can complete (capture)\n   * the payment using this endpoint.\n   *\n   * @param paymentId  The unique ID identifying the payment to be completed.\n   * @return Response from the API call\n   */\n  async completePayment(\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CompletePaymentResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ paymentId: [paymentId, string()] });\n    req.appendTemplatePath`/v2/payments/${mapped.paymentId}/complete`;\n    return req.callAsJson(completePaymentResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\nimport { ProcessingFee, processingFeeSchema } from './processingFee';\n\n/**\n * Represents a refund of a payment made using Square. Contains information about\n * the original payment and the amount of money refunded.\n */\nexport interface PaymentRefund {\n  /** The unique ID for this refund, generated by Square. */\n  id: string;\n  /**\n   * The refund's status:\n   * - `PENDING` - Awaiting approval.\n   * - `COMPLETED` - Successfully completed.\n   * - `REJECTED` - The refund was rejected.\n   * - `FAILED` - An error occurred.\n   */\n  status?: string;\n  /** The location ID associated with the payment this refund is attached to. */\n  locationId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /** Processing fees and fee adjustments assessed by Square for this refund. */\n  processingFee?: ProcessingFee[];\n  /** The ID of the payment assocated with this refund. */\n  paymentId?: string;\n  /** The ID of the order associated with the refund. */\n  orderId?: string;\n  /** The reason for the refund. */\n  reason?: string;\n  /** The timestamp of when the refund was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The timestamp of when the refund was last updated, in RFC 3339 format. */\n  updatedAt?: string;\n}\n\nexport const paymentRefundSchema: Schema<PaymentRefund> = object({\n  id: ['id', string()],\n  status: ['status', optional(string())],\n  locationId: ['location_id', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  processingFee: [\n    'processing_fee',\n    optional(array(lazy(() => processingFeeSchema))),\n  ],\n  paymentId: ['payment_id', optional(string())],\n  orderId: ['order_id', optional(string())],\n  reason: ['reason', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PaymentRefund, paymentRefundSchema } from './paymentRefund';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [GetRefund](#endpoint-refunds-getpaymentrefund) endpoint.\n * Note: If there are errors processing the request, the refund field might not be\n * present or it might be present in a FAILED state.\n */\nexport interface GetPaymentRefundResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a refund of a payment made using Square. Contains information about\n   * the original payment and the amount of money refunded.\n   */\n  refund?: PaymentRefund;\n}\n\nexport const getPaymentRefundResponseSchema: Schema<GetPaymentRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => paymentRefundSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PaymentRefund, paymentRefundSchema } from './paymentRefund';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListPaymentRefunds](#endpoint-refunds-listpaymentrefunds) endpoint.\n * Either `errors` or `refunds` is present in a given response (never both).\n */\nexport interface ListPaymentRefundsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The list of requested refunds. */\n  refunds?: PaymentRefund[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listPaymentRefundsResponseSchema: Schema<ListPaymentRefundsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refunds: ['refunds', optional(array(lazy(() => paymentRefundSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** Refunds a payment. */\nexport interface RefundPaymentRequest {\n  /**\n   * A unique string that identifies this `RefundPayment` request. The key can be any valid string\n   * but must be unique for every `RefundPayment` request.\n   * For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  appFeeMoney?: Money;\n  /** The unique ID of the payment being refunded. */\n  paymentId: string;\n  /** A description of the reason for the refund. */\n  reason?: string;\n}\n\nexport const refundPaymentRequestSchema: Schema<RefundPaymentRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  appFeeMoney: ['app_fee_money', optional(lazy(() => moneySchema))],\n  paymentId: ['payment_id', string()],\n  reason: ['reason', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { PaymentRefund, paymentRefundSchema } from './paymentRefund';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RefundPayment](#endpoint-refunds-refundpayment) endpoint.\n * Note: If there are errors processing the request, the refund field might not be\n * present or it might be present in a FAILED state.\n */\nexport interface RefundPaymentResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a refund of a payment made using Square. Contains information about\n   * the original payment and the amount of money refunded.\n   */\n  refund?: PaymentRefund;\n}\n\nexport const refundPaymentResponseSchema: Schema<RefundPaymentResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => paymentRefundSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  GetPaymentRefundResponse,\n  getPaymentRefundResponseSchema,\n} from '../models/getPaymentRefundResponse';\nimport {\n  ListPaymentRefundsResponse,\n  listPaymentRefundsResponseSchema,\n} from '../models/listPaymentRefundsResponse';\nimport {\n  RefundPaymentRequest,\n  refundPaymentRequestSchema,\n} from '../models/refundPaymentRequest';\nimport {\n  RefundPaymentResponse,\n  refundPaymentResponseSchema,\n} from '../models/refundPaymentResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class RefundsApi extends BaseApi {\n  /**\n   * Retrieves a list of refunds for the account making the request.\n   *\n   * The maximum results per page is 100.\n   *\n   * @param beginTime   The timestamp for the beginning of the requested reporting period, in RFC 3339\n   *                              format.  Default: The current time minus one year.\n   * @param endTime     The timestamp for the end of the requested reporting period, in RFC 3339 format.\n   *                              Default: The current time.\n   * @param sortOrder   The order in which results are listed: - `ASC` - Oldest to newest. - `DESC` - Newest\n   *                              to oldest (default).\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                              cursor to retrieve the next set of results for the original query.  For more\n   *                              information, see [Pagination](https://developer.squareup.\n   *                              com/docs/basics/api101/pagination).\n   * @param locationId  Limit results to the location supplied. By default, results are returned for all\n   *                              locations associated with the seller.\n   * @param status      If provided, only refunds with the given status are returned. For a list of refund\n   *                              status values, see [PaymentRefund](#type-paymentrefund).  Default: If omitted,\n   *                              refunds are returned regardless of their status.\n   * @param sourceType  If provided, only refunds with the given source type are returned. - `CARD` - List\n   *                              refunds only for payments where `CARD` was specified as the payment source.  Default:\n   *                              If omitted, refunds are returned regardless of the source type.\n   * @param limit       The maximum number of results to be returned in a single page.  It is possible to\n   *                              receive fewer results than the specified limit on a given page.  If the supplied\n   *                              value is greater than 100, no more than 100 results are returned.  Default: 100\n   * @return Response from the API call\n   */\n  async listPaymentRefunds(\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    locationId?: string,\n    status?: string,\n    sourceType?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListPaymentRefundsResponse>> {\n    const req = this.createRequest('GET', '/v2/refunds');\n    const mapped = req.prepareArgs({\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n      locationId: [locationId, optional(string())],\n      status: [status, optional(string())],\n      sourceType: [sourceType, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.query('location_id', mapped.locationId);\n    req.query('status', mapped.status);\n    req.query('source_type', mapped.sourceType);\n    req.query('limit', mapped.limit);\n    return req.callAsJson(listPaymentRefundsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Refunds a payment. You can refund the entire payment amount or a\n   * portion of it.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                            corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async refundPayment(\n    body: RefundPaymentRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RefundPaymentResponse>> {\n    const req = this.createRequest('POST', '/v2/refunds');\n    const mapped = req.prepareArgs({\n      body: [body, refundPaymentRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(refundPaymentResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a specific refund using the `refund_id`.\n   *\n   * @param refundId  The unique ID for the desired `PaymentRefund`.\n   * @return Response from the API call\n   */\n  async getPaymentRefund(\n    refundId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetPaymentRefundResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ refundId: [refundId, string()] });\n    req.appendTemplatePath`/v2/refunds/${mapped.refundId}`;\n    return req.callAsJson(getPaymentRefundResponseSchema, requestOptions);\n  }\n}\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Represents a customer subscription to a subscription plan.\n * For an overview of the `Subscription` type, see\n * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n */\nexport interface Subscription {\n  /** The Square-assigned ID of the subscription. */\n  id?: string;\n  /** The ID of the location associated with the subscription. */\n  locationId?: string;\n  /** The ID of the associated [subscription plan](#type-catalogsubscriptionplan). */\n  planId?: string;\n  /** The ID of the associated [customer](#type-customer) profile. */\n  customerId?: string;\n  /**\n   * The start date of the subscription, in YYYY-MM-DD format (for example,\n   * 2013-01-15).\n   */\n  startDate?: string;\n  /**\n   * The subscription cancellation date, in YYYY-MM-DD format (for\n   * example, 2013-01-15). On this date, the subscription status changes\n   * to `CANCELED` and the subscription billing stops.\n   * If you don't set this field, the subscription plan dictates if and\n   * when subscription ends.\n   * You cannot update this field, you can only clear it.\n   */\n  canceledDate?: string;\n  /** Possible subscription status values. */\n  status?: string;\n  /**\n   * The tax amount applied when billing the subscription. The\n   * percentage is expressed in decimal form, using a `'.'` as the decimal\n   * separator and without a `'%'` sign. For example, a value of `7.5`\n   * corresponds to 7.5%.\n   */\n  taxPercentage?: string;\n  /**\n   * The IDs of the [invoices](#type-invoice) created for the\n   * subscription, listed in order when the invoices were created\n   * (oldest invoices appear first).\n   */\n  invoiceIds?: string[];\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceOverrideMoney?: Money;\n  /**\n   * The version of the object. When updating an object, the version\n   * supplied must match the version in the database, otherwise the write will\n   * be rejected as conflicting.\n   */\n  version?: number;\n  /** The timestamp when the subscription was created, in RFC 3339 format. */\n  createdAt?: string;\n  /**\n   * The ID of the [customer](#type-customer) [card](#type-card)\n   * that is charged for the subscription.\n   */\n  cardId?: string;\n  /**\n   * The date up to which the customer is invoiced for the\n   * subscription, in YYYY-MM-DD format (for example, 2013-01-15).\n   * After the invoice is paid for a given billing period,\n   * this date will be the last day of the billing period.\n   * For example,\n   * suppose for the month of May a customer gets an invoice\n   * (or charged the card) on May 1. For the monthly billing scenario,\n   * this date is then set to May 31.\n   */\n  paidUntilDate?: string;\n  /**\n   * Timezone that will be used in date calculations for the subscription.\n   * Defaults to the timezone of the location based on `location_id`.\n   * Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).\n   */\n  timezone?: string;\n}\n\nexport const subscriptionSchema: Schema<Subscription> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  planId: ['plan_id', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  startDate: ['start_date', optional(string())],\n  canceledDate: ['canceled_date', optional(string())],\n  status: ['status', optional(string())],\n  taxPercentage: ['tax_percentage', optional(string())],\n  invoiceIds: ['invoice_ids', optional(array(string()))],\n  priceOverrideMoney: [\n    'price_override_money',\n    optional(lazy(() => moneySchema)),\n  ],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  cardId: ['card_id', optional(string())],\n  paidUntilDate: ['paid_until_date', optional(string())],\n  timezone: ['timezone', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines fields that are included in a\n * [CancelSubscription](#endpoint-subscriptions-cancelsubscription) response.\n */\nexport interface CancelSubscriptionResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a customer subscription to a subscription plan.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const cancelSubscriptionResponseSchema: Schema<CancelSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Defines parameters in a\n * [CreateSubscription](#endpoint-subscriptions-createsubscription) endpoint request.\n */\nexport interface CreateSubscriptionRequest {\n  /**\n   * A unique string that identifies this `CreateSubscription` request.\n   * If you do not provide a unique string (or provide an empty string as the value),\n   * the endpoint treats each request as independent.\n   * For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).\n   */\n  idempotencyKey: string;\n  /** The ID of the location the subscription is associated with. */\n  locationId: string;\n  /**\n   * The ID of the subscription plan. For more information, see\n   * [Subscription Plan Overview](https://developer.squareup.com/docs/subscriptions/overview).\n   */\n  planId: string;\n  /** The ID of the [customer](#type-customer) profile. */\n  customerId: string;\n  /**\n   * The start date of the subscription, in YYYY-MM-DD format. For example,\n   * 2013-01-15. If the start date is left empty, the subscription begins\n   * immediately.\n   */\n  startDate?: string;\n  /**\n   * The date when the subscription should be canceled, in\n   * YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration\n   * if it comes before the date the subscription would otherwise end.\n   */\n  canceledDate?: string;\n  /**\n   * The tax to add when billing the subscription.\n   * The percentage is expressed in decimal form, using a `'.'` as the decimal\n   * separator and without a `'%'` sign. For example, a value of 7.5\n   * corresponds to 7.5%.\n   */\n  taxPercentage?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  priceOverrideMoney?: Money;\n  /**\n   * The ID of the [customer](#type-customer) [card](#type-card) to charge.\n   * If not specified, Square sends an invoice via email. For an example to\n   * create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).\n   */\n  cardId?: string;\n  /**\n   * The timezone that is used in date calculations for the subscription. If unset, defaults to\n   * the location timezone. If a timezone is not configured for the location, defaults to \"America/New_York\".\n   * Format: the IANA Timezone Database identifier for the location timezone. For\n   * a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n   */\n  timezone?: string;\n}\n\nexport const createSubscriptionRequestSchema: Schema<CreateSubscriptionRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    locationId: ['location_id', string()],\n    planId: ['plan_id', string()],\n    customerId: ['customer_id', string()],\n    startDate: ['start_date', optional(string())],\n    canceledDate: ['canceled_date', optional(string())],\n    taxPercentage: ['tax_percentage', optional(string())],\n    priceOverrideMoney: [\n      'price_override_money',\n      optional(lazy(() => moneySchema)),\n    ],\n    cardId: ['card_id', optional(string())],\n    timezone: ['timezone', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines the fields that are included in the response from the\n * [CreateSubscription](#endpoint-subscriptions-createsubscription) endpoint.\n */\nexport interface CreateSubscriptionResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a customer subscription to a subscription plan.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const createSubscriptionResponseSchema: Schema<CreateSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Describes changes to subscription and billing states. */\nexport interface SubscriptionEvent {\n  /** The ID of the subscription event. */\n  id: string;\n  /** The possible subscription event types. */\n  subscriptionEventType: string;\n  /**\n   * The date, in YYYY-MM-DD format (for\n   * example, 2013-01-15), when the subscription event went into effect.\n   */\n  effectiveDate: string;\n  /** The ID of the subscription plan associated with the subscription. */\n  planId: string;\n}\n\nexport const subscriptionEventSchema: Schema<SubscriptionEvent> = object({\n  id: ['id', string()],\n  subscriptionEventType: ['subscription_event_type', string()],\n  effectiveDate: ['effective_date', string()],\n  planId: ['plan_id', string()],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  SubscriptionEvent,\n  subscriptionEventSchema,\n} from './subscriptionEvent';\n\n/**\n * Defines the fields that are included in the response from the\n * [ListSubscriptionEvents](#endpoint-subscriptions-listsubscriptionevents)\n * endpoint.\n */\nexport interface ListSubscriptionEventsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The `SubscriptionEvents` retrieved. */\n  subscriptionEvents?: SubscriptionEvent[];\n  /**\n   * When a response is truncated, it includes a cursor that you can\n   * use in a subsequent request to fetch the next set of events.\n   * If empty, this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const listSubscriptionEventsResponseSchema: Schema<ListSubscriptionEventsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscriptionEvents: [\n      'subscription_events',\n      optional(array(lazy(() => subscriptionEventSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines the fields that are included in the response from the\n * [RetrieveSubscription](#endpoint-subscriptions-retrievesubscription) endpoint.\n */\nexport interface RetrieveSubscriptionResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a customer subscription to a subscription plan.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const retrieveSubscriptionResponseSchema: Schema<RetrieveSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions. */\nexport interface SearchSubscriptionsFilter {\n  /** A filter to select subscriptions based on the customer. */\n  customerIds?: string[];\n  /** A filter to select subscriptions based the location. */\n  locationIds?: string[];\n}\n\nexport const searchSubscriptionsFilterSchema: Schema<SearchSubscriptionsFilter> = object(\n  {\n    customerIds: ['customer_ids', optional(array(string()))],\n    locationIds: ['location_ids', optional(array(string()))],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchSubscriptionsFilter,\n  searchSubscriptionsFilterSchema,\n} from './searchSubscriptionsFilter';\n\n/** Represents a query (including filtering criteria) used to search for subscriptions. */\nexport interface SearchSubscriptionsQuery {\n  /** Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions. */\n  filter?: SearchSubscriptionsFilter;\n}\n\nexport const searchSubscriptionsQuerySchema: Schema<SearchSubscriptionsQuery> = object(\n  { filter: ['filter', optional(lazy(() => searchSubscriptionsFilterSchema))] }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchSubscriptionsQuery,\n  searchSubscriptionsQuerySchema,\n} from './searchSubscriptionsQuery';\n\n/**\n * Defines parameters in a\n * [SearchSubscriptions](#endpoint-subscriptions-searchsubscriptions) endpoint\n * request.\n */\nexport interface SearchSubscriptionsRequest {\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n  /**\n   * The upper limit on the number of subscriptions to return\n   * in the response.\n   * Default: `200`\n   */\n  limit?: number;\n  /** Represents a query (including filtering criteria) used to search for subscriptions. */\n  query?: SearchSubscriptionsQuery;\n}\n\nexport const searchSubscriptionsRequestSchema: Schema<SearchSubscriptionsRequest> = object(\n  {\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n    query: ['query', optional(lazy(() => searchSubscriptionsQuerySchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines the fields that are included in the response from the\n * [SearchSubscriptions](#endpoint-subscriptions-searchsubscriptions) endpoint.\n */\nexport interface SearchSubscriptionsResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /** The search result. */\n  subscriptions?: Subscription[];\n  /**\n   * When a response is truncated, it includes a cursor that you can\n   * use in a subsequent request to fetch the next set of subscriptions.\n   * If empty, this is the final response.\n   * For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).\n   */\n  cursor?: string;\n}\n\nexport const searchSubscriptionsResponseSchema: Schema<SearchSubscriptionsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscriptions: [\n      'subscriptions',\n      optional(array(lazy(() => subscriptionSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines parameters in a\n * [UpdateSubscription](#endpoint-subscriptions-updatesubscription) endpoint\n * request.\n */\nexport interface UpdateSubscriptionRequest {\n  /**\n   * Represents a customer subscription to a subscription plan.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const updateSubscriptionRequestSchema: Schema<UpdateSubscriptionRequest> = object(\n  { subscription: ['subscription', optional(lazy(() => subscriptionSchema))] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Subscription, subscriptionSchema } from './subscription';\n\n/**\n * Defines the fields that are included in the response from the\n * [UpdateSubscription](#endpoint-subscriptions-updatesubscription) endpoint.\n */\nexport interface UpdateSubscriptionResponse {\n  /** Information about errors encountered during the request. */\n  errors?: Error[];\n  /**\n   * Represents a customer subscription to a subscription plan.\n   * For an overview of the `Subscription` type, see\n   * [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).\n   */\n  subscription?: Subscription;\n}\n\nexport const updateSubscriptionResponseSchema: Schema<UpdateSubscriptionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    subscription: ['subscription', optional(lazy(() => subscriptionSchema))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CancelSubscriptionResponse,\n  cancelSubscriptionResponseSchema,\n} from '../models/cancelSubscriptionResponse';\nimport {\n  CreateSubscriptionRequest,\n  createSubscriptionRequestSchema,\n} from '../models/createSubscriptionRequest';\nimport {\n  CreateSubscriptionResponse,\n  createSubscriptionResponseSchema,\n} from '../models/createSubscriptionResponse';\nimport {\n  ListSubscriptionEventsResponse,\n  listSubscriptionEventsResponseSchema,\n} from '../models/listSubscriptionEventsResponse';\nimport {\n  RetrieveSubscriptionResponse,\n  retrieveSubscriptionResponseSchema,\n} from '../models/retrieveSubscriptionResponse';\nimport {\n  SearchSubscriptionsRequest,\n  searchSubscriptionsRequestSchema,\n} from '../models/searchSubscriptionsRequest';\nimport {\n  SearchSubscriptionsResponse,\n  searchSubscriptionsResponseSchema,\n} from '../models/searchSubscriptionsResponse';\nimport {\n  UpdateSubscriptionRequest,\n  updateSubscriptionRequestSchema,\n} from '../models/updateSubscriptionRequest';\nimport {\n  UpdateSubscriptionResponse,\n  updateSubscriptionResponseSchema,\n} from '../models/updateSubscriptionResponse';\nimport { number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class SubscriptionsApi extends BaseApi {\n  /**\n   * Creates a subscription for a customer to a subscription plan.\n   *\n   * If you provide a card on file in the request, Square charges the card for\n   * the subscription. Otherwise, Square bills an invoice to the customer's email\n   * address. The subscription starts immediately, unless the request includes\n   * the optional `start_date`. Each individual subscription is associated with a particular location.\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                                 corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createSubscription(\n    body: CreateSubscriptionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateSubscriptionResponse>> {\n    const req = this.createRequest('POST', '/v2/subscriptions');\n    const mapped = req.prepareArgs({\n      body: [body, createSubscriptionRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Searches for subscriptions.\n   * Results are ordered chronologically by subscription creation date. If\n   * the request specifies more than one location ID,\n   * the endpoint orders the result\n   * by location ID, and then by creation date within each location. If no locations are given\n   * in the query, all locations are searched.\n   *\n   * You can also optionally specify `customer_ids` to search by customer.\n   * If left unset, all customers\n   * associated with the specified locations are returned.\n   * If the request specifies customer IDs, the endpoint orders results\n   * first by location, within location by customer ID, and within\n   * customer by subscription creation date.\n   *\n   * For more information, see\n   * [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-\n   * subscriptions).\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                  the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchSubscriptions(\n    body: SearchSubscriptionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchSubscriptionsResponse>> {\n    const req = this.createRequest('POST', '/v2/subscriptions/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchSubscriptionsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchSubscriptionsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a subscription.\n   *\n   * @param subscriptionId  The ID of the subscription to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveSubscription(\n    subscriptionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveSubscriptionResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n    });\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}`;\n    return req.callAsJson(retrieveSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a subscription. You can set, modify, and clear the\n   * `subscription` field values.\n   *\n   * @param subscriptionId  The ID for the subscription to update.\n   * @param body            An object containing the fields to POST for the\n   *                                                            request.  See the corresponding object definition for\n   *                                                            field details.\n   * @return Response from the API call\n   */\n  async updateSubscription(\n    subscriptionId: string,\n    body: UpdateSubscriptionRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateSubscriptionResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      body: [body, updateSubscriptionRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}`;\n    return req.callAsJson(updateSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Sets the `canceled_date` field to the end of the active billing period.\n   * After this date, the status changes from ACTIVE to CANCELED.\n   *\n   * @param subscriptionId  The ID of the subscription to cancel.\n   * @return Response from the API call\n   */\n  async cancelSubscription(\n    subscriptionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelSubscriptionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n    });\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/cancel`;\n    return req.callAsJson(cancelSubscriptionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Lists all events for a specific subscription.\n   * In the current implementation, only `START_SUBSCRIPTION` and `STOP_SUBSCRIPTION` (when the\n   * subscription was canceled) events are returned.\n   *\n   * @param subscriptionId  The ID of the subscription to retrieve the events for.\n   * @param cursor          A pagination cursor returned by a previous call to this endpoint. Provide this\n   *                                  to retrieve the next set of results for the original query.  For more information,\n   *                                  see [Pagination](https://developer.squareup.com/docs/working-with-\n   *                                  apis/pagination).\n   * @param limit           The upper limit on the number of subscription events to return  in the response.\n   *                                  Default: `200`\n   * @return Response from the API call\n   */\n  async listSubscriptionEvents(\n    subscriptionId: string,\n    cursor?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListSubscriptionEventsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      subscriptionId: [subscriptionId, string()],\n      cursor: [cursor, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('cursor', mapped.cursor);\n    req.query('limit', mapped.limit);\n    req.appendTemplatePath`/v2/subscriptions/${mapped.subscriptionId}/events`;\n    return req.callAsJson(listSubscriptionEventsResponseSchema, requestOptions);\n  }\n}\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** An object that represents a team member's assignment to locations. */\nexport interface TeamMemberAssignedLocations {\n  /** Enumerates the possible assignment types the team member can have */\n  assignmentType?: string;\n  /** The locations that the team member is assigned to. */\n  locationIds?: string[];\n}\n\nexport const teamMemberAssignedLocationsSchema: Schema<TeamMemberAssignedLocations> = object(\n  {\n    assignmentType: ['assignment_type', optional(string())],\n    locationIds: ['location_ids', optional(array(string()))],\n  }\n);\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  TeamMemberAssignedLocations,\n  teamMemberAssignedLocationsSchema,\n} from './teamMemberAssignedLocations';\n\n/** A record representing an individual team member for a business. */\nexport interface TeamMember {\n  /** The unique ID for the team member. */\n  id?: string;\n  /** A second ID used to associate the team member with an entity in another system. */\n  referenceId?: string;\n  /** Whether the team member is the owner of the Square account. */\n  isOwner?: boolean;\n  /** Enumerates the possible statuses the team member can have within a business. */\n  status?: string;\n  /** The given (i.e., first) name associated with the team member. */\n  givenName?: string;\n  /** The family (i.e., last) name associated with the team member. */\n  familyName?: string;\n  /** The email address associated with the team member. */\n  emailAddress?: string;\n  /**\n   * The team member's phone number in E.164 format. Examples:\n   * +14155552671 - the country code is 1 for US\n   * +551155256325 - the country code is 55 for BR\n   */\n  phoneNumber?: string;\n  /**\n   * The timestamp in RFC 3339 format describing when the team member was created.\n   * Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"\n   */\n  createdAt?: string;\n  /**\n   * The timestamp in RFC 3339 format describing when the team member was last updated.\n   * Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"\n   */\n  updatedAt?: string;\n  /** An object that represents a team member's assignment to locations. */\n  assignedLocations?: TeamMemberAssignedLocations;\n}\n\nexport const teamMemberSchema: Schema<TeamMember> = object({\n  id: ['id', optional(string())],\n  referenceId: ['reference_id', optional(string())],\n  isOwner: ['is_owner', optional(boolean())],\n  status: ['status', optional(string())],\n  givenName: ['given_name', optional(string())],\n  familyName: ['family_name', optional(string())],\n  emailAddress: ['email_address', optional(string())],\n  phoneNumber: ['phone_number', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  assignedLocations: [\n    'assigned_locations',\n    optional(lazy(() => teamMemberAssignedLocationsSchema)),\n  ],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a create request for a `TeamMember` object. */\nexport interface CreateTeamMemberRequest {\n  /**\n   * A unique string that identifies this CreateTeamMember request.\n   * Keys can be any valid string but must be unique for every request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   * <br>\n   * <b>Min Length 1    Max Length 45</b>\n   */\n  idempotencyKey?: string;\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n}\n\nexport const createTeamMemberRequestSchema: Schema<CreateTeamMemberRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', optional(string())],\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n  }\n);\n","import { dict, lazy, object, Schema } from '../schema';\nimport {\n  CreateTeamMemberRequest,\n  createTeamMemberRequestSchema,\n} from './createTeamMemberRequest';\n\n/** Represents a bulk create request for `TeamMember` objects. */\nexport interface BulkCreateTeamMembersRequest {\n  /** The data which will be used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`. */\n  teamMembers: Record<string, CreateTeamMemberRequest>;\n}\n\nexport const bulkCreateTeamMembersRequestSchema: Schema<BulkCreateTeamMembersRequest> = object(\n  {\n    teamMembers: [\n      'team_members',\n      dict(lazy(() => createTeamMemberRequestSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from a create request, containing the created `TeamMember` object or error messages. */\nexport interface CreateTeamMemberResponse {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const createTeamMemberResponseSchema: Schema<CreateTeamMemberResponse> = object(\n  {\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport {\n  CreateTeamMemberResponse,\n  createTeamMemberResponseSchema,\n} from './createTeamMemberResponse';\nimport { Error, errorSchema } from './error';\n\n/** Represents a response from a bulk create request, containing the created `TeamMember` objects or error messages. */\nexport interface BulkCreateTeamMembersResponse {\n  /** The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`. */\n  teamMembers?: Record<string, CreateTeamMemberResponse>;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const bulkCreateTeamMembersResponseSchema: Schema<BulkCreateTeamMembersResponse> = object(\n  {\n    teamMembers: [\n      'team_members',\n      optional(dict(lazy(() => createTeamMemberResponseSchema))),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents an update request for a `TeamMember` object. */\nexport interface UpdateTeamMemberRequest {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n}\n\nexport const updateTeamMemberRequestSchema: Schema<UpdateTeamMemberRequest> = object(\n  { teamMember: ['team_member', optional(lazy(() => teamMemberSchema))] }\n);\n","import { dict, lazy, object, Schema } from '../schema';\nimport {\n  UpdateTeamMemberRequest,\n  updateTeamMemberRequestSchema,\n} from './updateTeamMemberRequest';\n\n/** Represents a bulk update request for `TeamMember` objects. */\nexport interface BulkUpdateTeamMembersRequest {\n  /** The data which will be used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`. */\n  teamMembers: Record<string, UpdateTeamMemberRequest>;\n}\n\nexport const bulkUpdateTeamMembersRequestSchema: Schema<BulkUpdateTeamMembersRequest> = object(\n  {\n    teamMembers: [\n      'team_members',\n      dict(lazy(() => updateTeamMemberRequestSchema)),\n    ],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from an update request, containing the updated `TeamMember` object or error messages. */\nexport interface UpdateTeamMemberResponse {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateTeamMemberResponseSchema: Schema<UpdateTeamMemberResponse> = object(\n  {\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, dict, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport {\n  UpdateTeamMemberResponse,\n  updateTeamMemberResponseSchema,\n} from './updateTeamMemberResponse';\n\n/** Represents a response from a bulk update request, containing the updated `TeamMember` objects or error messages. */\nexport interface BulkUpdateTeamMembersResponse {\n  /** The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`. */\n  teamMembers?: Record<string, UpdateTeamMemberResponse>;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const bulkUpdateTeamMembersResponseSchema: Schema<BulkUpdateTeamMembersResponse> = object(\n  {\n    teamMembers: [\n      'team_members',\n      optional(dict(lazy(() => updateTeamMemberResponseSchema))),\n    ],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from a retrieve request, containing a `TeamMember` object or error messages. */\nexport interface RetrieveTeamMemberResponse {\n  /** A record representing an individual team member for a business. */\n  teamMember?: TeamMember;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveTeamMemberResponseSchema: Schema<RetrieveTeamMemberResponse> = object(\n  {\n    teamMember: ['team_member', optional(lazy(() => teamMemberSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/** An object describing a job that a team member is assigned to. */\nexport interface JobAssignment {\n  /** The title of the job. */\n  jobTitle: string;\n  /** Enumerates the possible pay types that a job can be assigned. */\n  payType: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  hourlyRate?: Money;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  annualRate?: Money;\n  /** The planned hours per week for the job. Set if the job `PayType` is `SALARY`. */\n  weeklyHours?: number;\n}\n\nexport const jobAssignmentSchema: Schema<JobAssignment> = object({\n  jobTitle: ['job_title', string()],\n  payType: ['pay_type', string()],\n  hourlyRate: ['hourly_rate', optional(lazy(() => moneySchema))],\n  annualRate: ['annual_rate', optional(lazy(() => moneySchema))],\n  weeklyHours: ['weekly_hours', optional(number())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { JobAssignment, jobAssignmentSchema } from './jobAssignment';\n\n/** An object representing a team member's wage information. */\nexport interface WageSetting {\n  /** The unique ID of the `TeamMember` whom this wage setting describes. */\n  teamMemberId?: string;\n  /**\n   * <b>Required</b> The ordered list of jobs that the team member is assigned to.\n   * The first job assignment is considered the team member's \"Primary Job\".\n   * <br>\n   * <b>Min Length 1    Max Length 12</b>\n   */\n  jobAssignments?: JobAssignment[];\n  /** Whether the team member is exempt from the overtime rules of the seller country. */\n  isOvertimeExempt?: boolean;\n  /**\n   * Used for resolving concurrency issues; request will fail if version\n   * provided does not match server version at time of request. If not provided,\n   * Square executes a blind write, potentially overwriting data from another write. Read\n   * about [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency)\n   * in Square APIs for more information.\n   */\n  version?: number;\n  /**\n   * The timestamp in RFC 3339 format describing when the wage setting object was created.\n   * Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"\n   */\n  createdAt?: string;\n  /**\n   * The timestamp in RFC 3339 format describing when the wage setting object was last updated.\n   * Ex: \"2018-10-04T04:00:00-07:00\" or \"2019-02-05T12:00:00Z\"\n   */\n  updatedAt?: string;\n}\n\nexport const wageSettingSchema: Schema<WageSetting> = object({\n  teamMemberId: ['team_member_id', optional(string())],\n  jobAssignments: [\n    'job_assignments',\n    optional(array(lazy(() => jobAssignmentSchema))),\n  ],\n  isOvertimeExempt: ['is_overtime_exempt', optional(boolean())],\n  version: ['version', optional(number())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WageSetting, wageSettingSchema } from './wageSetting';\n\n/** Represents a response from a retrieve request, containing the specified `WageSetting` object or error messages. */\nexport interface RetrieveWageSettingResponse {\n  /** An object representing a team member's wage information. */\n  wageSetting?: WageSetting;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const retrieveWageSettingResponseSchema: Schema<RetrieveWageSettingResponse> = object(\n  {\n    wageSetting: ['wage_setting', optional(lazy(() => wageSettingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { array, object, optional, Schema, string } from '../schema';\n\n/**\n * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied\n * between the individual fields, and `OR` logic is applied within list-based fields.\n * For example, setting this filter value,\n * ```\n * filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE)\n * ```\n * returns only active team members assigned to either location \"A\" or \"B\".\n */\nexport interface SearchTeamMembersFilter {\n  /**\n   * When present, filter by team members assigned to the specified locations.\n   * When empty, include team members assigned to any location.\n   */\n  locationIds?: string[];\n  /** Enumerates the possible statuses the team member can have within a business. */\n  status?: string;\n}\n\nexport const searchTeamMembersFilterSchema: Schema<SearchTeamMembersFilter> = object(\n  {\n    locationIds: ['location_ids', optional(array(string()))],\n    status: ['status', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  SearchTeamMembersFilter,\n  searchTeamMembersFilterSchema,\n} from './searchTeamMembersFilter';\n\n/** Represents the parameters in a search for `TeamMember` objects. */\nexport interface SearchTeamMembersQuery {\n  /**\n   * Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied\n   * between the individual fields, and `OR` logic is applied within list-based fields.\n   * For example, setting this filter value,\n   * ```\n   * filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE)\n   * ```\n   * returns only active team members assigned to either location \"A\" or \"B\".\n   */\n  filter?: SearchTeamMembersFilter;\n}\n\nexport const searchTeamMembersQuerySchema: Schema<SearchTeamMembersQuery> = object(\n  { filter: ['filter', optional(lazy(() => searchTeamMembersFilterSchema))] }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  SearchTeamMembersQuery,\n  searchTeamMembersQuerySchema,\n} from './searchTeamMembersQuery';\n\n/** Represents a search request for a filtered list of `TeamMember` objects. */\nexport interface SearchTeamMembersRequest {\n  /** Represents the parameters in a search for `TeamMember` objects. */\n  query?: SearchTeamMembersQuery;\n  /** The maximum number of `TeamMember` objects in a page (25 by default). */\n  limit?: number;\n  /**\n   * The opaque cursor for fetching the next page. Read about\n   * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination) with Square APIs for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchTeamMembersRequestSchema: Schema<SearchTeamMembersRequest> = object(\n  {\n    query: ['query', optional(lazy(() => searchTeamMembersQuerySchema))],\n    limit: ['limit', optional(number())],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TeamMember, teamMemberSchema } from './teamMember';\n\n/** Represents a response from a search request, containing a filtered list of `TeamMember` objects. */\nexport interface SearchTeamMembersResponse {\n  /** The filtered list of `TeamMember` objects. */\n  teamMembers?: TeamMember[];\n  /**\n   * The opaque cursor for fetching the next page. Read about\n   * [pagination](https://developer.squareup.com/docs/working-with-apis/pagination) with Square APIs for more information.\n   */\n  cursor?: string;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const searchTeamMembersResponseSchema: Schema<SearchTeamMembersResponse> = object(\n  {\n    teamMembers: [\n      'team_members',\n      optional(array(lazy(() => teamMemberSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { lazy, object, Schema } from '../schema';\nimport { WageSetting, wageSettingSchema } from './wageSetting';\n\n/** Represents an update request for the `WageSetting` object describing a `TeamMember`. */\nexport interface UpdateWageSettingRequest {\n  /** An object representing a team member's wage information. */\n  wageSetting: WageSetting;\n}\n\nexport const updateWageSettingRequestSchema: Schema<UpdateWageSettingRequest> = object(\n  { wageSetting: ['wage_setting', lazy(() => wageSettingSchema)] }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { WageSetting, wageSettingSchema } from './wageSetting';\n\n/**\n * Represents a response from an update request, containing the updated `WageSetting` object\n * or error messages.\n */\nexport interface UpdateWageSettingResponse {\n  /** An object representing a team member's wage information. */\n  wageSetting?: WageSetting;\n  /** The errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const updateWageSettingResponseSchema: Schema<UpdateWageSettingResponse> = object(\n  {\n    wageSetting: ['wage_setting', optional(lazy(() => wageSettingSchema))],\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  BulkCreateTeamMembersRequest,\n  bulkCreateTeamMembersRequestSchema,\n} from '../models/bulkCreateTeamMembersRequest';\nimport {\n  BulkCreateTeamMembersResponse,\n  bulkCreateTeamMembersResponseSchema,\n} from '../models/bulkCreateTeamMembersResponse';\nimport {\n  BulkUpdateTeamMembersRequest,\n  bulkUpdateTeamMembersRequestSchema,\n} from '../models/bulkUpdateTeamMembersRequest';\nimport {\n  BulkUpdateTeamMembersResponse,\n  bulkUpdateTeamMembersResponseSchema,\n} from '../models/bulkUpdateTeamMembersResponse';\nimport {\n  CreateTeamMemberRequest,\n  createTeamMemberRequestSchema,\n} from '../models/createTeamMemberRequest';\nimport {\n  CreateTeamMemberResponse,\n  createTeamMemberResponseSchema,\n} from '../models/createTeamMemberResponse';\nimport {\n  RetrieveTeamMemberResponse,\n  retrieveTeamMemberResponseSchema,\n} from '../models/retrieveTeamMemberResponse';\nimport {\n  RetrieveWageSettingResponse,\n  retrieveWageSettingResponseSchema,\n} from '../models/retrieveWageSettingResponse';\nimport {\n  SearchTeamMembersRequest,\n  searchTeamMembersRequestSchema,\n} from '../models/searchTeamMembersRequest';\nimport {\n  SearchTeamMembersResponse,\n  searchTeamMembersResponseSchema,\n} from '../models/searchTeamMembersResponse';\nimport {\n  UpdateTeamMemberRequest,\n  updateTeamMemberRequestSchema,\n} from '../models/updateTeamMemberRequest';\nimport {\n  UpdateTeamMemberResponse,\n  updateTeamMemberResponseSchema,\n} from '../models/updateTeamMemberResponse';\nimport {\n  UpdateWageSettingRequest,\n  updateWageSettingRequestSchema,\n} from '../models/updateWageSettingRequest';\nimport {\n  UpdateWageSettingResponse,\n  updateWageSettingResponseSchema,\n} from '../models/updateWageSettingResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class TeamApi extends BaseApi {\n  /**\n   * Creates a single `TeamMember` object. The `TeamMember` will be returned on successful creates.\n   * You must provide the following values in your request to this endpoint:\n   * - `given_name`\n   * - `family_name`\n   *\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#createteammember).\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                               corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createTeamMember(\n    body: CreateTeamMemberRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateTeamMemberResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members');\n    const mapped = req.prepareArgs({\n      body: [body, createTeamMemberRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createTeamMemberResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates multiple `TeamMember` objects. The created `TeamMember` objects will be returned on\n   * successful creates.\n   * This process is non-transactional and will process as much of the request as is possible. If one of\n   * the creates in\n   * the request cannot be successfully processed, the request will NOT be marked as failed, but the body\n   * of the response\n   * will contain explicit error information for this particular create.\n   *\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#bulkcreateteammembers).\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async bulkCreateTeamMembers(\n    body: BulkCreateTeamMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkCreateTeamMembersResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members/bulk-create');\n    const mapped = req.prepareArgs({\n      body: [body, bulkCreateTeamMembersRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(bulkCreateTeamMembersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates multiple `TeamMember` objects. The updated `TeamMember` objects will be returned on\n   * successful updates.\n   * This process is non-transactional and will process as much of the request as is possible. If one of\n   * the updates in\n   * the request cannot be successfully processed, the request will NOT be marked as failed, but the body\n   * of the response\n   * will contain explicit error information for this particular update.\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#bulkupdateteammembers).\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async bulkUpdateTeamMembers(\n    body: BulkUpdateTeamMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BulkUpdateTeamMembersResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members/bulk-update');\n    const mapped = req.prepareArgs({\n      body: [body, bulkUpdateTeamMembersRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(bulkUpdateTeamMembersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Returns a paginated list of `TeamMember` objects for a business.\n   * The list to be returned can be filtered by:\n   * - location IDs **and**\n   * - `status`\n   *\n   * @param body An object containing the fields to POST for the request.  See the\n   *                                                corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchTeamMembers(\n    body: SearchTeamMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchTeamMembersResponse>> {\n    const req = this.createRequest('POST', '/v2/team-members/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchTeamMembersRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchTeamMembersResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieve a `TeamMember` object for the given `TeamMember.id`.\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#retrieveteammember).\n   *\n   * @param teamMemberId   The ID of the team member to retrieve.\n   * @return Response from the API call\n   */\n  async retrieveTeamMember(\n    teamMemberId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveTeamMemberResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ teamMemberId: [teamMemberId, string()] });\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}`;\n    return req.callAsJson(retrieveTeamMemberResponseSchema, requestOptions);\n  }\n\n  /**\n   * Updates a single `TeamMember` object. The `TeamMember` will be returned on successful updates.\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#updateteammember).\n   *\n   * @param teamMemberId   The ID of the team member to update.\n   * @param body           An object containing the fields to POST for the request.\n   *                                                         See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateTeamMember(\n    teamMemberId: string,\n    body: UpdateTeamMemberRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateTeamMemberResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      teamMemberId: [teamMemberId, string()],\n      body: [body, updateTeamMemberRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}`;\n    return req.callAsJson(updateTeamMemberResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieve a `WageSetting` object for a team member specified\n   * by `TeamMember.id`.\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#retrievewagesetting).\n   *\n   * @param teamMemberId   The ID of the team member to retrieve wage setting for\n   * @return Response from the API call\n   */\n  async retrieveWageSetting(\n    teamMemberId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveWageSettingResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ teamMemberId: [teamMemberId, string()] });\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}/wage-setting`;\n    return req.callAsJson(retrieveWageSettingResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates or updates a `WageSetting` object. The object is created if a\n   * `WageSetting` with the specified `team_member_id` does not exist. Otherwise,\n   * it fully replaces the `WageSetting` object for the team member.\n   * The `WageSetting` will be returned upon successful update.\n   * Learn about [Troubleshooting the Teams API](https://developer.squareup.\n   * com/docs/team/troubleshooting#updatewagesetting).\n   *\n   * @param teamMemberId   The ID of the team member to update the `WageSetting`\n   *                                                          object for.\n   * @param body           An object containing the fields to POST for the request.\n   *                                                          See the corresponding object definition for field\n   *                                                          details.\n   * @return Response from the API call\n   */\n  async updateWageSetting(\n    teamMemberId: string,\n    body: UpdateWageSettingRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<UpdateWageSettingResponse>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      teamMemberId: [teamMemberId, string()],\n      body: [body, updateWageSettingRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/team-members/${mapped.teamMemberId}/wage-setting`;\n    return req.callAsJson(updateWageSettingResponseSchema, requestOptions);\n  }\n}\n","import { array, boolean, number, object, optional, Schema } from '../schema';\n\nexport interface TipSettings {\n  /** Indicates whether tipping is enabled for this checkout. Defaults to false. */\n  allowTipping?: boolean;\n  /**\n   * Indicates whether tip options should be presented on their own screen before presenting\n   * the signature screen during card payment. Defaults to false.\n   */\n  separateTipScreen?: boolean;\n  /** Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false. */\n  customTipField?: boolean;\n  /**\n   * A list of tip percentages that should be presented during the checkout flow. Specified as\n   * up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to [15, 20, 25]\n   */\n  tipPercentages?: number[];\n  /**\n   * Enables the \"Smart Tip Amounts\" behavior described in https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app.\n   * Exact tipping options depend on the region the Square seller is active in.\n   * In the United States and Canada, tipping options will be presented in whole dollar amounts for\n   * payments under 10 USD/CAD respectively.\n   * If set to true, the tip_percentages settings is ignored.\n   * Defaults to false.\n   */\n  smartTipping?: boolean;\n}\n\nexport const tipSettingsSchema: Schema<TipSettings> = object({\n  allowTipping: ['allow_tipping', optional(boolean())],\n  separateTipScreen: ['separate_tip_screen', optional(boolean())],\n  customTipField: ['custom_tip_field', optional(boolean())],\n  tipPercentages: ['tip_percentages', optional(array(number()))],\n  smartTipping: ['smart_tipping', optional(boolean())],\n});\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { TipSettings, tipSettingsSchema } from './tipSettings';\n\nexport interface DeviceCheckoutOptions {\n  /**\n   * The unique ID of the device intended for this `TerminalCheckout`.\n   * A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint.\n   * Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.\n   */\n  deviceId: string;\n  /** Instruct the device to skip the receipt screen. Defaults to false. */\n  skipReceiptScreen?: boolean;\n  tipSettings?: TipSettings;\n}\n\nexport const deviceCheckoutOptionsSchema: Schema<DeviceCheckoutOptions> = object(\n  {\n    deviceId: ['device_id', string()],\n    skipReceiptScreen: ['skip_receipt_screen', optional(boolean())],\n    tipSettings: ['tip_settings', optional(lazy(() => tipSettingsSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport {\n  DeviceCheckoutOptions,\n  deviceCheckoutOptionsSchema,\n} from './deviceCheckoutOptions';\nimport { Money, moneySchema } from './money';\n\nexport interface TerminalCheckout {\n  /** A unique ID for this `TerminalCheckout` */\n  id?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * An optional user-defined reference ID which can be used to associate\n   * this `TerminalCheckout` to another entity in an external system. For example, an order\n   * ID generated by a third-party shopping cart. Will also be associated with any payments\n   * used to complete the checkout.\n   */\n  referenceId?: string;\n  /** An optional note to associate with the checkout, as well any payments used to complete the checkout. */\n  note?: string;\n  deviceOptions: DeviceCheckoutOptions;\n  /**\n   * The duration as an RFC 3339 duration, after which the checkout will be automatically canceled.\n   * TerminalCheckouts that are `PENDING` will be automatically `CANCELED` and have a cancellation reason\n   * of `TIMED_OUT`.\n   * Default: 5 minutes from creation\n   * Maximum: 5 minutes\n   */\n  deadlineDuration?: string;\n  /**\n   * The status of the `TerminalCheckout`.\n   * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`\n   */\n  status?: string;\n  cancelReason?: string;\n  /** A list of ids for payments created by this `TerminalCheckout`. */\n  paymentIds?: string[];\n  /** The time when the `TerminalCheckout` was created as an RFC 3339 timestamp. */\n  createdAt?: string;\n  /** The time when the `TerminalCheckout` was last updated as an RFC 3339 timestamp. */\n  updatedAt?: string;\n}\n\nexport const terminalCheckoutSchema: Schema<TerminalCheckout> = object({\n  id: ['id', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  referenceId: ['reference_id', optional(string())],\n  note: ['note', optional(string())],\n  deviceOptions: ['device_options', lazy(() => deviceCheckoutOptionsSchema)],\n  deadlineDuration: ['deadline_duration', optional(string())],\n  status: ['status', optional(string())],\n  cancelReason: ['cancel_reason', optional(string())],\n  paymentIds: ['payment_ids', optional(array(string()))],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface CancelTerminalCheckoutResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  checkout?: TerminalCheckout;\n}\n\nexport const cancelTerminalCheckoutResponseSchema: Schema<CancelTerminalCheckoutResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkout: ['checkout', optional(lazy(() => terminalCheckoutSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\nexport interface TerminalRefund {\n  /** A unique ID for this `TerminalRefund` */\n  id?: string;\n  /** The reference to the payment refund created by completing this `TerminalRefund`. */\n  refundId?: string;\n  /** Unique ID of the payment being refunded. */\n  paymentId: string;\n  /** The reference to the Square order id for the payment identified by the `payment_id`. */\n  orderId?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * A description of the reason for the refund.\n   * Note: maximum 192 characters\n   */\n  reason?: string;\n  /**\n   * The unique Id of the device intended for this `TerminalRefund`.\n   * The Id can be retrieved from /v2/devices api.\n   */\n  deviceId?: string;\n  /**\n   * The duration as an RFC 3339 duration, after which the refund will be automatically canceled.\n   * TerminalRefunds that are `PENDING` will be automatically `CANCELED` and have a cancellation reason\n   * of `TIMED_OUT`\n   * Default: 5 minutes from creation\n   * Maximum: 5 minutes\n   */\n  deadlineDuration?: string;\n  /**\n   * The status of the `TerminalRefund`.\n   * Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, `COMPLETED`\n   */\n  status?: string;\n  cancelReason?: string;\n  /** The time when the `TerminalRefund` was created as an RFC 3339 timestamp. */\n  createdAt?: string;\n  /** The time when the `TerminalRefund` was last updated as an RFC 3339 timestamp. */\n  updatedAt?: string;\n}\n\nexport const terminalRefundSchema: Schema<TerminalRefund> = object({\n  id: ['id', optional(string())],\n  refundId: ['refund_id', optional(string())],\n  paymentId: ['payment_id', string()],\n  orderId: ['order_id', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  reason: ['reason', optional(string())],\n  deviceId: ['device_id', optional(string())],\n  deadlineDuration: ['deadline_duration', optional(string())],\n  status: ['status', optional(string())],\n  cancelReason: ['cancel_reason', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface CancelTerminalRefundResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  refund?: TerminalRefund;\n}\n\nexport const cancelTerminalRefundResponseSchema: Schema<CancelTerminalRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { lazy, object, Schema, string } from '../schema';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface CreateTerminalCheckoutRequest {\n  /**\n   * A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but\n   * must be unique for every `CreateCheckout` request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  checkout: TerminalCheckout;\n}\n\nexport const createTerminalCheckoutRequestSchema: Schema<CreateTerminalCheckoutRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    checkout: ['checkout', lazy(() => terminalCheckoutSchema)],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface CreateTerminalCheckoutResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  checkout?: TerminalCheckout;\n}\n\nexport const createTerminalCheckoutResponseSchema: Schema<CreateTerminalCheckoutResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkout: ['checkout', optional(lazy(() => terminalCheckoutSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface CreateTerminalRefundRequest {\n  /**\n   * A unique string that identifies this `CreateRefund` request. Keys can be any valid string but\n   * must be unique for every `CreateRefund` request.\n   * See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.\n   */\n  idempotencyKey: string;\n  refund?: TerminalRefund;\n}\n\nexport const createTerminalRefundRequestSchema: Schema<CreateTerminalRefundRequest> = object(\n  {\n    idempotencyKey: ['idempotency_key', string()],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface CreateTerminalRefundResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  refund?: TerminalRefund;\n}\n\nexport const createTerminalRefundResponseSchema: Schema<CreateTerminalRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface GetTerminalCheckoutResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  checkout?: TerminalCheckout;\n}\n\nexport const getTerminalCheckoutResponseSchema: Schema<GetTerminalCheckoutResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkout: ['checkout', optional(lazy(() => terminalCheckoutSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface GetTerminalRefundResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  refund?: TerminalRefund;\n}\n\nexport const getTerminalRefundResponseSchema: Schema<GetTerminalRefundResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refund: ['refund', optional(lazy(() => terminalRefundSchema))],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\nexport interface TerminalCheckoutQueryFilter {\n  /**\n   * `TerminalCheckout`s associated with a specific device. If no device is specified then all\n   * `TerminalCheckout`s for the merchant will be displayed.\n   */\n  deviceId?: string;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Filtered results with the desired status of the `TerminalCheckout`\n   * Options: PENDING, IN_PROGRESS, CANCELED, COMPLETED\n   */\n  status?: string;\n}\n\nexport const terminalCheckoutQueryFilterSchema: Schema<TerminalCheckoutQueryFilter> = object(\n  {\n    deviceId: ['device_id', optional(string())],\n    createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n    status: ['status', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface TerminalCheckoutQuerySort {\n  /**\n   * The order in which results are listed.\n   * - `ASC` - oldest to newest\n   * - `DESC` - newest to oldest (default).\n   */\n  sortOrder?: string;\n}\n\nexport const terminalCheckoutQuerySortSchema: Schema<TerminalCheckoutQuerySort> = object(\n  { sortOrder: ['sort_order', optional(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  TerminalCheckoutQueryFilter,\n  terminalCheckoutQueryFilterSchema,\n} from './terminalCheckoutQueryFilter';\nimport {\n  TerminalCheckoutQuerySort,\n  terminalCheckoutQuerySortSchema,\n} from './terminalCheckoutQuerySort';\n\nexport interface TerminalCheckoutQuery {\n  filter?: TerminalCheckoutQueryFilter;\n  sort?: TerminalCheckoutQuerySort;\n}\n\nexport const terminalCheckoutQuerySchema: Schema<TerminalCheckoutQuery> = object(\n  {\n    filter: ['filter', optional(lazy(() => terminalCheckoutQueryFilterSchema))],\n    sort: ['sort', optional(lazy(() => terminalCheckoutQuerySortSchema))],\n  }\n);\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  TerminalCheckoutQuery,\n  terminalCheckoutQuerySchema,\n} from './terminalCheckoutQuery';\n\nexport interface SearchTerminalCheckoutsRequest {\n  query?: TerminalCheckoutQuery;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n  /** Limit the number of results returned for a single request. */\n  limit?: number;\n}\n\nexport const searchTerminalCheckoutsRequestSchema: Schema<SearchTerminalCheckoutsRequest> = object(\n  {\n    query: ['query', optional(lazy(() => terminalCheckoutQuerySchema))],\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalCheckout, terminalCheckoutSchema } from './terminalCheckout';\n\nexport interface SearchTerminalCheckoutsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** The requested search result of `TerminalCheckout`s. */\n  checkouts?: TerminalCheckout[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchTerminalCheckoutsResponseSchema: Schema<SearchTerminalCheckoutsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    checkouts: [\n      'checkouts',\n      optional(array(lazy(() => terminalCheckoutSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { TimeRange, timeRangeSchema } from './timeRange';\n\nexport interface TerminalRefundQueryFilter {\n  /**\n   * `TerminalRefund`s associated with a specific device. If no device is specified then all\n   * `TerminalRefund`s for the signed in account will be displayed.\n   */\n  deviceId?: string;\n  /**\n   * Represents a generic time range. The start and end values are\n   * represented in RFC 3339 format. Time ranges are customized to be\n   * inclusive or exclusive based on the needs of a particular endpoint.\n   * Refer to the relevant endpoint-specific documentation to determine\n   * how time ranges are handled.\n   */\n  createdAt?: TimeRange;\n  /**\n   * Filtered results with the desired status of the `TerminalRefund`\n   * Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`\n   */\n  status?: string;\n}\n\nexport const terminalRefundQueryFilterSchema: Schema<TerminalRefundQueryFilter> = object(\n  {\n    deviceId: ['device_id', optional(string())],\n    createdAt: ['created_at', optional(lazy(() => timeRangeSchema))],\n    status: ['status', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface TerminalRefundQuerySort {\n  /**\n   * The order in which results are listed.\n   * - `ASC` - oldest to newest\n   * - `DESC` - newest to oldest (default).\n   */\n  sortOrder?: string;\n}\n\nexport const terminalRefundQuerySortSchema: Schema<TerminalRefundQuerySort> = object(\n  { sortOrder: ['sort_order', optional(string())] }\n);\n","import { lazy, object, optional, Schema } from '../schema';\nimport {\n  TerminalRefundQueryFilter,\n  terminalRefundQueryFilterSchema,\n} from './terminalRefundQueryFilter';\nimport {\n  TerminalRefundQuerySort,\n  terminalRefundQuerySortSchema,\n} from './terminalRefundQuerySort';\n\nexport interface TerminalRefundQuery {\n  filter?: TerminalRefundQueryFilter;\n  sort?: TerminalRefundQuerySort;\n}\n\nexport const terminalRefundQuerySchema: Schema<TerminalRefundQuery> = object({\n  filter: ['filter', optional(lazy(() => terminalRefundQueryFilterSchema))],\n  sort: ['sort', optional(lazy(() => terminalRefundQuerySortSchema))],\n});\n","import { lazy, number, object, optional, Schema, string } from '../schema';\nimport {\n  TerminalRefundQuery,\n  terminalRefundQuerySchema,\n} from './terminalRefundQuery';\n\nexport interface SearchTerminalRefundsRequest {\n  query?: TerminalRefundQuery;\n  /**\n   * A pagination cursor returned by a previous call to this endpoint.\n   * Provide this to retrieve the next set of results for the original query.\n   */\n  cursor?: string;\n  /** Limit the number of results returned for a single request. */\n  limit?: number;\n}\n\nexport const searchTerminalRefundsRequestSchema: Schema<SearchTerminalRefundsRequest> = object(\n  {\n    query: ['query', optional(lazy(() => terminalRefundQuerySchema))],\n    cursor: ['cursor', optional(string())],\n    limit: ['limit', optional(number())],\n  }\n);\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { TerminalRefund, terminalRefundSchema } from './terminalRefund';\n\nexport interface SearchTerminalRefundsResponse {\n  /** Information on errors encountered during the request. */\n  errors?: Error[];\n  /** The requested search result of `TerminalRefund`s. */\n  refunds?: TerminalRefund[];\n  /**\n   * The pagination cursor to be used in a subsequent request. If empty,\n   * this is the final response.\n   * See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.\n   */\n  cursor?: string;\n}\n\nexport const searchTerminalRefundsResponseSchema: Schema<SearchTerminalRefundsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    refunds: ['refunds', optional(array(lazy(() => terminalRefundSchema)))],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CancelTerminalCheckoutResponse,\n  cancelTerminalCheckoutResponseSchema,\n} from '../models/cancelTerminalCheckoutResponse';\nimport {\n  CancelTerminalRefundResponse,\n  cancelTerminalRefundResponseSchema,\n} from '../models/cancelTerminalRefundResponse';\nimport {\n  CreateTerminalCheckoutRequest,\n  createTerminalCheckoutRequestSchema,\n} from '../models/createTerminalCheckoutRequest';\nimport {\n  CreateTerminalCheckoutResponse,\n  createTerminalCheckoutResponseSchema,\n} from '../models/createTerminalCheckoutResponse';\nimport {\n  CreateTerminalRefundRequest,\n  createTerminalRefundRequestSchema,\n} from '../models/createTerminalRefundRequest';\nimport {\n  CreateTerminalRefundResponse,\n  createTerminalRefundResponseSchema,\n} from '../models/createTerminalRefundResponse';\nimport {\n  GetTerminalCheckoutResponse,\n  getTerminalCheckoutResponseSchema,\n} from '../models/getTerminalCheckoutResponse';\nimport {\n  GetTerminalRefundResponse,\n  getTerminalRefundResponseSchema,\n} from '../models/getTerminalRefundResponse';\nimport {\n  SearchTerminalCheckoutsRequest,\n  searchTerminalCheckoutsRequestSchema,\n} from '../models/searchTerminalCheckoutsRequest';\nimport {\n  SearchTerminalCheckoutsResponse,\n  searchTerminalCheckoutsResponseSchema,\n} from '../models/searchTerminalCheckoutsResponse';\nimport {\n  SearchTerminalRefundsRequest,\n  searchTerminalRefundsRequestSchema,\n} from '../models/searchTerminalRefundsRequest';\nimport {\n  SearchTerminalRefundsResponse,\n  searchTerminalRefundsResponseSchema,\n} from '../models/searchTerminalRefundsResponse';\nimport { string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class TerminalApi extends BaseApi {\n  /**\n   * Creates a new Terminal checkout request and sends it to the specified device to take a payment for\n   * the requested amount.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createTerminalCheckout(\n    body: CreateTerminalCheckoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateTerminalCheckoutResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/checkouts');\n    const mapped = req.prepareArgs({\n      body: [body, createTerminalCheckoutRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createTerminalCheckoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a filtered list of Terminal checkout requests created by the account making the request.\n   *\n   * @param body An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchTerminalCheckouts(\n    body: SearchTerminalCheckoutsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchTerminalCheckoutsResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/checkouts/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchTerminalCheckoutsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(\n      searchTerminalCheckoutsResponseSchema,\n      requestOptions\n    );\n  }\n\n  /**\n   * Retrieves a Terminal checkout request by checkout_id.\n   *\n   * @param checkoutId  Unique ID for the desired `TerminalCheckout`\n   * @return Response from the API call\n   */\n  async getTerminalCheckout(\n    checkoutId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetTerminalCheckoutResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ checkoutId: [checkoutId, string()] });\n    req.appendTemplatePath`/v2/terminals/checkouts/${mapped.checkoutId}`;\n    return req.callAsJson(getTerminalCheckoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels a Terminal checkout request if the status of the request permits it.\n   *\n   * @param checkoutId  Unique ID for the desired `TerminalCheckout`\n   * @return Response from the API call\n   */\n  async cancelTerminalCheckout(\n    checkoutId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelTerminalCheckoutResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({ checkoutId: [checkoutId, string()] });\n    req.appendTemplatePath`/v2/terminals/checkouts/${mapped.checkoutId}/cancel`;\n    return req.callAsJson(cancelTerminalCheckoutResponseSchema, requestOptions);\n  }\n\n  /**\n   * Creates a request to refund an Interac payment completed on a Square Terminal.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createTerminalRefund(\n    body: CreateTerminalRefundRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateTerminalRefundResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/refunds');\n    const mapped = req.prepareArgs({\n      body: [body, createTerminalRefundRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(createTerminalRefundResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves a filtered list of Terminal Interac refund requests created by the seller making the\n   * request.\n   *\n   * @param body An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async searchTerminalRefunds(\n    body: SearchTerminalRefundsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<SearchTerminalRefundsResponse>> {\n    const req = this.createRequest('POST', '/v2/terminals/refunds/search');\n    const mapped = req.prepareArgs({\n      body: [body, searchTerminalRefundsRequestSchema],\n    });\n    req.json(mapped.body);\n    return req.callAsJson(searchTerminalRefundsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves an Interac terminal refund object by ID.\n   *\n   * @param terminalRefundId   Unique ID for the desired `TerminalRefund`\n   * @return Response from the API call\n   */\n  async getTerminalRefund(\n    terminalRefundId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<GetTerminalRefundResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      terminalRefundId: [terminalRefundId, string()],\n    });\n    req.appendTemplatePath`/v2/terminals/refunds/${mapped.terminalRefundId}`;\n    return req.callAsJson(getTerminalRefundResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels an Interac terminal refund request by refund request ID if the status of the request permits\n   * it.\n   *\n   * @param terminalRefundId   Unique ID for the desired `TerminalRefund`\n   * @return Response from the API call\n   */\n  async cancelTerminalRefund(\n    terminalRefundId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CancelTerminalRefundResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      terminalRefundId: [terminalRefundId, string()],\n    });\n    req.appendTemplatePath`/v2/terminals/refunds/${mapped.terminalRefundId}/cancel`;\n    return req.callAsJson(cancelTerminalRefundResponseSchema, requestOptions);\n  }\n}\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CaptureTransaction](#endpoint-capturetransaction) endpoint.\n */\nexport interface CaptureTransactionResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const captureTransactionResponseSchema: Schema<CaptureTransactionResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  ChargeRequestAdditionalRecipient,\n  chargeRequestAdditionalRecipientSchema,\n} from './chargeRequestAdditionalRecipient';\nimport { Money, moneySchema } from './money';\n\n/**\n * Defines the parameters that can be included in the body of\n * a request to the [Charge](#endpoint-charge) endpoint.\n * Deprecated - recommend using [CreatePayment](#endpoint-payments-createpayment)\n */\nexport interface ChargeRequest {\n  /**\n   * A value you specify that uniquely identifies this\n   * transaction among transactions you've created.\n   * If you're unsure whether a particular transaction succeeded,\n   * you can reattempt it with the same idempotency key without\n   * worrying about double-charging the buyer.\n   * See [Idempotency keys](#idempotencykeys) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n  /**\n   * A nonce generated from the `SqPaymentForm` that represents the card\n   * to charge.\n   * The application that provides a nonce to this endpoint must be the\n   * _same application_ that generated the nonce with the `SqPaymentForm`.\n   * Otherwise, the nonce is invalid.\n   * Do not provide a value for this field if you provide a value for\n   * `customer_card_id`.\n   */\n  cardNonce?: string;\n  /**\n   * The ID of the customer card on file to charge. Do\n   * not provide a value for this field if you provide a value for `card_nonce`.\n   * If you provide this value, you _must_ also provide a value for\n   * `customer_id`.\n   */\n  customerCardId?: string;\n  /**\n   * If `true`, the request will only perform an Auth on the provided\n   * card. You can then later perform either a Capture (with the\n   * [CaptureTransaction](#endpoint-capturetransaction) endpoint) or a Void\n   * (with the [VoidTransaction](#endpoint-voidtransaction) endpoint).\n   * Default value: `false`\n   */\n  delayCapture?: boolean;\n  /**\n   * An optional ID you can associate with the transaction for your own\n   * purposes (such as to associate the transaction with an entity ID in your\n   * own database).\n   * This value cannot exceed 40 characters.\n   */\n  referenceId?: string;\n  /**\n   * An optional note to associate with the transaction.\n   * This value cannot exceed 60 characters.\n   */\n  note?: string;\n  /**\n   * The ID of the customer to associate this transaction with. This field\n   * is required if you provide a value for `customer_card_id`, and optional\n   * otherwise.\n   */\n  customerId?: string;\n  /** Represents a physical address. */\n  billingAddress?: Address;\n  /** Represents a physical address. */\n  shippingAddress?: Address;\n  /**\n   * The buyer's email address, if available. This value is optional,\n   * but this transaction is ineligible for chargeback protection if it is not\n   * provided.\n   */\n  buyerEmailAddress?: string;\n  /**\n   * The ID of the order to associate with this transaction.\n   * If you provide this value, the `amount_money` value of your request must\n   * __exactly match__ the value of the order's `total_money` field.\n   */\n  orderId?: string;\n  /**\n   * The basic primitive of multi-party transaction. The value is optional.\n   * The transaction facilitated by you can be split from here.\n   * If you provide this value, the `amount_money` value in your additional_recipients\n   * must not be more than 90% of the `amount_money` value in the charge request.\n   * The `location_id` must be the valid location of the app owner merchant.\n   * This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.\n   * This field is currently not supported in sandbox.\n   */\n  additionalRecipients?: ChargeRequestAdditionalRecipient[];\n  /**\n   * A token generated by SqPaymentForm's verifyBuyer() that represents\n   * customer's device info and 3ds challenge result.\n   */\n  verificationToken?: string;\n}\n\nexport const chargeRequestSchema: Schema<ChargeRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n  cardNonce: ['card_nonce', optional(string())],\n  customerCardId: ['customer_card_id', optional(string())],\n  delayCapture: ['delay_capture', optional(boolean())],\n  referenceId: ['reference_id', optional(string())],\n  note: ['note', optional(string())],\n  customerId: ['customer_id', optional(string())],\n  billingAddress: ['billing_address', optional(lazy(() => addressSchema))],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  buyerEmailAddress: ['buyer_email_address', optional(string())],\n  orderId: ['order_id', optional(string())],\n  additionalRecipients: [\n    'additional_recipients',\n    optional(array(lazy(() => chargeRequestAdditionalRecipientSchema))),\n  ],\n  verificationToken: ['verification_token', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Refund, refundSchema } from './refund';\nimport { Tender, tenderSchema } from './tender';\n\n/**\n * Represents a transaction processed with Square, either with the\n * Connect API or with Square Point of Sale.\n * The `tenders` field of this object lists all methods of payment used to pay in\n * the transaction.\n */\nexport interface Transaction {\n  /** The transaction's unique ID, issued by Square payments servers. */\n  id?: string;\n  /** The ID of the transaction's associated location. */\n  locationId?: string;\n  /** The timestamp for when the transaction was created, in RFC 3339 format. */\n  createdAt?: string;\n  /** The tenders used to pay in the transaction. */\n  tenders?: Tender[];\n  /** Refunds that have been applied to any tender in the transaction. */\n  refunds?: Refund[];\n  /**\n   * If the transaction was created with the [Charge](#endpoint-charge)\n   * endpoint, this value is the same as the value provided for the `reference_id`\n   * parameter in the request to that endpoint. Otherwise, it is not set.\n   */\n  referenceId?: string;\n  /** Indicates the Square product used to process a transaction. */\n  product?: string;\n  /**\n   * If the transaction was created in the Square Point of Sale app, this value\n   * is the ID generated for the transaction by Square Point of Sale.\n   * This ID has no relationship to the transaction's canonical `id`, which is\n   * generated by Square's backend servers. This value is generated for bookkeeping\n   * purposes, in case the transaction cannot immediately be completed (for example,\n   * if the transaction is processed in offline mode).\n   * It is not currently possible with the Connect API to perform a transaction\n   * lookup by this value.\n   */\n  clientId?: string;\n  /** Represents a physical address. */\n  shippingAddress?: Address;\n  /** The order_id is an identifier for the order associated with this transaction, if any. */\n  orderId?: string;\n}\n\nexport const transactionSchema: Schema<Transaction> = object({\n  id: ['id', optional(string())],\n  locationId: ['location_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  tenders: ['tenders', optional(array(lazy(() => tenderSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => refundSchema)))],\n  referenceId: ['reference_id', optional(string())],\n  product: ['product', optional(string())],\n  clientId: ['client_id', optional(string())],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  orderId: ['order_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Transaction, transactionSchema } from './transaction';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [Charge](#endpoint-charge) endpoint.\n * One of `errors` or `transaction` is present in a given response (never both).\n */\nexport interface ChargeResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a transaction processed with Square, either with the\n   * Connect API or with Square Point of Sale.\n   * The `tenders` field of this object lists all methods of payment used to pay in\n   * the transaction.\n   */\n  transaction?: Transaction;\n}\n\nexport const chargeResponseSchema: Schema<ChargeResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  transaction: ['transaction', optional(lazy(() => transactionSchema))],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { Money, moneySchema } from './money';\n\n/**\n * Defines the body parameters that can be included in\n * a request to the [CreateRefund](#endpoint-createrefund) endpoint.\n * Deprecated - recommend using [RefundPayment](#endpoint-refunds-refundpayment)\n */\nexport interface CreateRefundRequest {\n  /**\n   * A value you specify that uniquely identifies this\n   * refund among refunds you've created for the tender.\n   * If you're unsure whether a particular refund succeeded,\n   * you can reattempt it with the same idempotency key without\n   * worrying about duplicating the refund.\n   * See [Idempotency keys](#idempotencykeys) for more information.\n   */\n  idempotencyKey: string;\n  /**\n   * The ID of the tender to refund.\n   * A [`Transaction`](#type-transaction) has one or more `tenders` (i.e., methods\n   * of payment) associated with it, and you refund each tender separately with\n   * the Connect API.\n   */\n  tenderId: string;\n  /**\n   * A description of the reason for the refund.\n   * Default value: `Refund via API`\n   */\n  reason?: string;\n  /**\n   * Represents an amount of money. `Money` fields can be signed or unsigned.\n   * Fields that do not explicitly define whether they are signed or unsigned are\n   * considered unsigned and can only hold positive amounts. For signed fields, the\n   * sign of the value indicates the purpose of the money transfer. See\n   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)\n   * for more information.\n   */\n  amountMoney: Money;\n}\n\nexport const createRefundRequestSchema: Schema<CreateRefundRequest> = object({\n  idempotencyKey: ['idempotency_key', string()],\n  tenderId: ['tender_id', string()],\n  reason: ['reason', optional(string())],\n  amountMoney: ['amount_money', lazy(() => moneySchema)],\n});\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Refund, refundSchema } from './refund';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [CreateRefund](#endpoint-createrefund) endpoint.\n * One of `errors` or `refund` is present in a given response (never both).\n */\nexport interface CreateRefundResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** Represents a refund processed for a Square transaction. */\n  refund?: Refund;\n}\n\nexport const createRefundResponseSchema: Schema<CreateRefundResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  refund: ['refund', optional(lazy(() => refundSchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Refund, refundSchema } from './refund';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListRefunds](#endpoint-listrefunds) endpoint.\n * One of `errors` or `refunds` is present in a given response (never both).\n */\nexport interface ListRefundsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of refunds that match your query. */\n  refunds?: Refund[];\n  /**\n   * A pagination cursor for retrieving the next set of results,\n   * if any remain. Provide this value as the `cursor` parameter in a subsequent\n   * request to this endpoint.\n   * See [Paginating results](#paginatingresults) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listRefundsResponseSchema: Schema<ListRefundsResponse> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => refundSchema)))],\n  cursor: ['cursor', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Transaction, transactionSchema } from './transaction';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [ListTransactions](#endpoint-listtransactions) endpoint.\n * One of `errors` or `transactions` is present in a given response (never both).\n */\nexport interface ListTransactionsResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** An array of transactions that match your query. */\n  transactions?: Transaction[];\n  /**\n   * A pagination cursor for retrieving the next set of results,\n   * if any remain. Provide this value as the `cursor` parameter in a subsequent\n   * request to this endpoint.\n   * See [Paginating results](#paginatingresults) for more information.\n   */\n  cursor?: string;\n}\n\nexport const listTransactionsResponseSchema: Schema<ListTransactionsResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    transactions: [\n      'transactions',\n      optional(array(lazy(() => transactionSchema))),\n    ],\n    cursor: ['cursor', optional(string())],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { Transaction, transactionSchema } from './transaction';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [RetrieveTransaction](#endpont-retrievetransaction) endpoint.\n * One of `errors` or `transaction` is present in a given response (never both).\n */\nexport interface RetrieveTransactionResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /**\n   * Represents a transaction processed with Square, either with the\n   * Connect API or with Square Point of Sale.\n   * The `tenders` field of this object lists all methods of payment used to pay in\n   * the transaction.\n   */\n  transaction?: Transaction;\n}\n\nexport const retrieveTransactionResponseSchema: Schema<RetrieveTransactionResponse> = object(\n  {\n    errors: ['errors', optional(array(lazy(() => errorSchema)))],\n    transaction: ['transaction', optional(lazy(() => transactionSchema))],\n  }\n);\n","import { array, lazy, object, optional, Schema } from '../schema';\nimport { Error, errorSchema } from './error';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the [VoidTransaction](#endpoint-voidtransaction) endpoint.\n */\nexport interface VoidTransactionResponse {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n}\n\nexport const voidTransactionResponseSchema: Schema<VoidTransactionResponse> = object(\n  { errors: ['errors', optional(array(lazy(() => errorSchema)))] }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  CaptureTransactionResponse,\n  captureTransactionResponseSchema,\n} from '../models/captureTransactionResponse';\nimport { ChargeRequest, chargeRequestSchema } from '../models/chargeRequest';\nimport { ChargeResponse, chargeResponseSchema } from '../models/chargeResponse';\nimport {\n  CreateRefundRequest,\n  createRefundRequestSchema,\n} from '../models/createRefundRequest';\nimport {\n  CreateRefundResponse,\n  createRefundResponseSchema,\n} from '../models/createRefundResponse';\nimport {\n  ListRefundsResponse,\n  listRefundsResponseSchema,\n} from '../models/listRefundsResponse';\nimport {\n  ListTransactionsResponse,\n  listTransactionsResponseSchema,\n} from '../models/listTransactionsResponse';\nimport {\n  RetrieveTransactionResponse,\n  retrieveTransactionResponseSchema,\n} from '../models/retrieveTransactionResponse';\nimport {\n  VoidTransactionResponse,\n  voidTransactionResponseSchema,\n} from '../models/voidTransactionResponse';\nimport { optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class TransactionsApi extends BaseApi {\n  /**\n   * Lists refunds for one of a business's locations.\n   *\n   * In addition to full or partial tender refunds processed through Square APIs,\n   * refunds may result from itemized returns or exchanges through Square's\n   * Point of Sale applications.\n   *\n   * Refunds with a `status` of `PENDING` are not currently included in this\n   * endpoint's response.\n   *\n   * Max results per [page](#paginatingresults): 50\n   *\n   * @param locationId  The ID of the location to list refunds for.\n   * @param beginTime   The beginning of the requested reporting period, in RFC 3339 format.  See [Date\n   *                              ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The\n   *                              current time minus one year.\n   * @param endTime     The end of the requested reporting period, in RFC 3339 format.  See [Date\n   *                              ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The\n   *                              current time.\n   * @param sortOrder   The order in which results are listed in the response (`ASC` for oldest first,\n   *                              `DESC` for newest first).  Default value: `DESC`\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                              retrieve the next set of results for your original query.  See [Paginating\n   *                              results](#paginatingresults) for more information.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listRefunds(\n    locationId: string,\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListRefundsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/refunds`;\n    req.deprecated('TransactionsApi.listRefunds');\n    return req.callAsJson(listRefundsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Lists transactions for a particular location.\n   *\n   * Transactions include payment information from sales and exchanges and refund\n   * information from returns and exchanges.\n   *\n   * Max results per [page](#paginatingresults): 50\n   *\n   * @param locationId  The ID of the location to list transactions for.\n   * @param beginTime   The beginning of the requested reporting period, in RFC 3339 format.  See [Date\n   *                              ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The\n   *                              current time minus one year.\n   * @param endTime     The end of the requested reporting period, in RFC 3339 format.  See [Date\n   *                              ranges](#dateranges) for details on date inclusivity/exclusivity.  Default value: The\n   *                              current time.\n   * @param sortOrder   The order in which results are listed in the response (`ASC` for oldest first,\n   *                              `DESC` for newest first).  Default value: `DESC`\n   * @param cursor      A pagination cursor returned by a previous call to this endpoint. Provide this to\n   *                              retrieve the next set of results for your original query.  See [Paginating\n   *                              results](#paginatingresults) for more information.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listTransactions(\n    locationId: string,\n    beginTime?: string,\n    endTime?: string,\n    sortOrder?: string,\n    cursor?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ListTransactionsResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      sortOrder: [sortOrder, optional(string())],\n      cursor: [cursor, optional(string())],\n    });\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('sort_order', mapped.sortOrder);\n    req.query('cursor', mapped.cursor);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions`;\n    req.deprecated('TransactionsApi.listTransactions');\n    return req.callAsJson(listTransactionsResponseSchema, requestOptions);\n  }\n\n  /**\n   * Charges a card represented by a card nonce or a customer's card on file.\n   *\n   * Your request to this endpoint must include _either_:\n   *\n   * - A value for the `card_nonce` parameter (to charge a card nonce generated\n   * with the `SqPaymentForm`)\n   * - Values for the `customer_card_id` and `customer_id` parameters (to charge\n   * a customer's card on file)\n   *\n   * In order for an eCommerce payment to potentially qualify for\n   * [Square chargeback protection](https://squareup.com/help/article/5394), you\n   * _must_ provide values for the following parameters in your request:\n   *\n   * - `buyer_email_address`\n   * - At least one of `billing_address` or `shipping_address`\n   *\n   * When this response is returned, the amount of Square's processing fee might not yet be\n   * calculated. To obtain the processing fee, wait about ten seconds and call\n   * [RetrieveTransaction](#endpoint-retrievetransaction). See the `processing_fee_money`\n   * field of each [Tender included](#type-tender) in the transaction.\n   *\n   * @param locationId  The ID of the location to associate the created transaction with.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                            corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async charge(\n    locationId: string,\n    body: ChargeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<ChargeResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, chargeRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions`;\n    req.deprecated('TransactionsApi.charge');\n    return req.callAsJson(chargeResponseSchema, requestOptions);\n  }\n\n  /**\n   * Retrieves details for a single transaction.\n   *\n   * @param locationId     The ID of the transaction's associated location.\n   * @param transactionId  The ID of the transaction to retrieve.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveTransaction(\n    locationId: string,\n    transactionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<RetrieveTransactionResponse>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n    });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}`;\n    req.deprecated('TransactionsApi.retrieveTransaction');\n    return req.callAsJson(retrieveTransactionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Captures a transaction that was created with the [Charge](#endpoint-charge)\n   * endpoint with a `delay_capture` value of `true`.\n   *\n   *\n   * See [Delayed capture transactions](https://developer.squareup.\n   * com/docs/payments/transactions/overview#delayed-capture)\n   * for more information.\n   *\n   * @param locationId\n   * @param transactionId\n   * @return Response from the API call\n   * @deprecated\n   */\n  async captureTransaction(\n    locationId: string,\n    transactionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CaptureTransactionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n    });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}/capture`;\n    req.deprecated('TransactionsApi.captureTransaction');\n    return req.callAsJson(captureTransactionResponseSchema, requestOptions);\n  }\n\n  /**\n   * Initiates a refund for a previously charged tender.\n   *\n   * You must issue a refund within 120 days of the associated payment. See\n   * [this article](https://squareup.com/help/us/en/article/5060) for more information\n   * on refund behavior.\n   *\n   * NOTE: Card-present transactions with Interac credit cards **cannot be\n   * refunded using the Connect API**. Interac transactions must refunded\n   * in-person (e.g., dipping the card using POS app).\n   *\n   * @param locationId     The ID of the original transaction's associated location.\n   * @param transactionId  The ID of the original transaction that includes the tender\n   *                                                     to refund.\n   * @param body           An object containing the fields to POST for the request.  See\n   *                                                     the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createRefund(\n    locationId: string,\n    transactionId: string,\n    body: CreateRefundRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<CreateRefundResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n      body: [body, createRefundRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}/refund`;\n    req.deprecated('TransactionsApi.createRefund');\n    return req.callAsJson(createRefundResponseSchema, requestOptions);\n  }\n\n  /**\n   * Cancels a transaction that was created with the [Charge](#endpoint-charge)\n   * endpoint with a `delay_capture` value of `true`.\n   *\n   *\n   * See [Delayed capture transactions](https://developer.squareup.\n   * com/docs/payments/transactions/overview#delayed-capture)\n   * for more information.\n   *\n   * @param locationId\n   * @param transactionId\n   * @return Response from the API call\n   * @deprecated\n   */\n  async voidTransaction(\n    locationId: string,\n    transactionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<VoidTransactionResponse>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      transactionId: [transactionId, string()],\n    });\n    req.appendTemplatePath`/v2/locations/${mapped.locationId}/transactions/${mapped.transactionId}/void`;\n    req.deprecated('TransactionsApi.voidTransaction');\n    return req.callAsJson(voidTransactionResponseSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\nexport interface Device {\n  /** The device's Square-issued ID. */\n  id?: string;\n  /** The device's merchant-specified name. */\n  name?: string;\n}\n\nexport const deviceSchema: Schema<Device> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\nexport interface V1Money {\n  /**\n   * Amount in the lowest denominated value of this Currency. E.g. in USD\n   * these are cents, in JPY they are Yen (which do not have a 'cent' concept).\n   */\n  amount?: number;\n  /**\n   * Indicates the associated currency for an amount of money. Values correspond\n   * to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).\n   */\n  currencyCode?: string;\n}\n\nexport const v1MoneySchema: Schema<V1Money> = object({\n  amount: ['amount', optional(number())],\n  currencyCode: ['currency_code', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1CashDrawerEvent */\nexport interface V1CashDrawerEvent {\n  /** The event's unique ID. */\n  id?: string;\n  /** The ID of the employee that created the event. */\n  employeeId?: string;\n  eventType?: string;\n  eventMoney?: V1Money;\n  /** The time when the event occurred, in ISO 8601 format. */\n  createdAt?: string;\n  /** An optional description of the event, entered by the employee that created it. */\n  description?: string;\n}\n\nexport const v1CashDrawerEventSchema: Schema<V1CashDrawerEvent> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  eventType: ['event_type', optional(string())],\n  eventMoney: ['event_money', optional(lazy(() => v1MoneySchema))],\n  createdAt: ['created_at', optional(string())],\n  description: ['description', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Device, deviceSchema } from './device';\nimport {\n  V1CashDrawerEvent,\n  v1CashDrawerEventSchema,\n} from './v1CashDrawerEvent';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** Contains details for a single cash drawer shift. */\nexport interface V1CashDrawerShift {\n  /** The shift's unique ID. */\n  id?: string;\n  eventType?: string;\n  /** The time when the shift began, in ISO 8601 format. */\n  openedAt?: string;\n  /** The time when the shift ended, in ISO 8601 format. */\n  endedAt?: string;\n  /** The time when the shift was closed, in ISO 8601 format. */\n  closedAt?: string;\n  /** The IDs of all employees that were logged into Square Register at some point during the cash drawer shift. */\n  employeeIds?: string[];\n  /** The ID of the employee that started the cash drawer shift. */\n  openingEmployeeId?: string;\n  /** The ID of the employee that ended the cash drawer shift. */\n  endingEmployeeId?: string;\n  /** The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents. */\n  closingEmployeeId?: string;\n  /** A description of the cash drawer shift. */\n  description?: string;\n  startingCashMoney?: V1Money;\n  cashPaymentMoney?: V1Money;\n  cashRefundsMoney?: V1Money;\n  cashPaidInMoney?: V1Money;\n  cashPaidOutMoney?: V1Money;\n  expectedCashMoney?: V1Money;\n  closedCashMoney?: V1Money;\n  device?: Device;\n  /** All of the events (payments, refunds, and so on) that involved the cash drawer during the shift. */\n  events?: V1CashDrawerEvent[];\n}\n\nexport const v1CashDrawerShiftSchema: Schema<V1CashDrawerShift> = object({\n  id: ['id', optional(string())],\n  eventType: ['event_type', optional(string())],\n  openedAt: ['opened_at', optional(string())],\n  endedAt: ['ended_at', optional(string())],\n  closedAt: ['closed_at', optional(string())],\n  employeeIds: ['employee_ids', optional(array(string()))],\n  openingEmployeeId: ['opening_employee_id', optional(string())],\n  endingEmployeeId: ['ending_employee_id', optional(string())],\n  closingEmployeeId: ['closing_employee_id', optional(string())],\n  description: ['description', optional(string())],\n  startingCashMoney: [\n    'starting_cash_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  cashPaymentMoney: ['cash_payment_money', optional(lazy(() => v1MoneySchema))],\n  cashRefundsMoney: ['cash_refunds_money', optional(lazy(() => v1MoneySchema))],\n  cashPaidInMoney: ['cash_paid_in_money', optional(lazy(() => v1MoneySchema))],\n  cashPaidOutMoney: [\n    'cash_paid_out_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  expectedCashMoney: [\n    'expected_cash_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  closedCashMoney: ['closed_cash_money', optional(lazy(() => v1MoneySchema))],\n  device: ['device', optional(lazy(() => deviceSchema))],\n  events: ['events', optional(array(lazy(() => v1CashDrawerEventSchema)))],\n});\n","import { array, object, optional, Schema, string } from '../schema';\n\n/** Represents one of a business's employees. */\nexport interface V1Employee {\n  /** The employee's unique ID. */\n  id?: string;\n  /** The employee's first name. */\n  firstName: string;\n  /** The employee's last name. */\n  lastName: string;\n  /** The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee. */\n  roleIds?: string[];\n  /** The IDs of the locations the employee is allowed to clock in at. */\n  authorizedLocationIds?: string[];\n  /** The employee's email address. */\n  email?: string;\n  status?: string;\n  /** An ID the merchant can set to associate the employee with an entity in another system. */\n  externalId?: string;\n  /** The time when the employee entity was created, in ISO 8601 format. */\n  createdAt?: string;\n  /** The time when the employee entity was most recently updated, in ISO 8601 format. */\n  updatedAt?: string;\n}\n\nexport const v1EmployeeSchema: Schema<V1Employee> = object({\n  id: ['id', optional(string())],\n  firstName: ['first_name', string()],\n  lastName: ['last_name', string()],\n  roleIds: ['role_ids', optional(array(string()))],\n  authorizedLocationIds: ['authorized_location_ids', optional(array(string()))],\n  email: ['email', optional(string())],\n  status: ['status', optional(string())],\n  externalId: ['external_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { array, boolean, object, optional, Schema, string } from '../schema';\n\n/** V1EmployeeRole */\nexport interface V1EmployeeRole {\n  /** The role's unique ID, Can only be set by Square. */\n  id?: string;\n  /** The role's merchant-defined name. */\n  name: string;\n  /**\n   * The role's permissions.\n   * See [V1EmployeeRolePermissions](#type-v1employeerolepermissions) for possible values\n   */\n  permissions: string[];\n  /** If true, employees with this role have all permissions, regardless of the values indicated in permissions. */\n  isOwner?: boolean;\n  /** The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created. */\n  createdAt?: string;\n  /** The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated. */\n  updatedAt?: string;\n}\n\nexport const v1EmployeeRoleSchema: Schema<V1EmployeeRole> = object({\n  id: ['id', optional(string())],\n  name: ['name', string()],\n  permissions: ['permissions', array(string())],\n  isOwner: ['is_owner', optional(boolean())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n});\n","import { boolean, number, object, optional, Schema, string } from '../schema';\n\n/** Represents a timecard for an employee. */\nexport interface V1Timecard {\n  /** The timecard's unique ID. */\n  id?: string;\n  /** The ID of the employee the timecard is associated with. */\n  employeeId: string;\n  /** If true, the timecard was deleted by the merchant, and it is no longer valid. */\n  deleted?: boolean;\n  /** The clock-in time for the timecard, in ISO 8601 format. */\n  clockinTime?: string;\n  /** The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system. */\n  clockoutTime?: string;\n  /** The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecard’s timezone and overtime rules. */\n  clockinLocationId?: string;\n  /** The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system. */\n  clockoutLocationId?: string;\n  /** The time when the timecard was created, in ISO 8601 format. */\n  createdAt?: string;\n  /** The time when the timecard was most recently updated, in ISO 8601 format. */\n  updatedAt?: string;\n  /** The total number of regular (non-overtime) seconds worked in the timecard. */\n  regularSecondsWorked?: number;\n  /** The total number of overtime seconds worked in the timecard. */\n  overtimeSecondsWorked?: number;\n  /** The total number of doubletime seconds worked in the timecard. */\n  doubletimeSecondsWorked?: number;\n}\n\nexport const v1TimecardSchema: Schema<V1Timecard> = object({\n  id: ['id', optional(string())],\n  employeeId: ['employee_id', string()],\n  deleted: ['deleted', optional(boolean())],\n  clockinTime: ['clockin_time', optional(string())],\n  clockoutTime: ['clockout_time', optional(string())],\n  clockinLocationId: ['clockin_location_id', optional(string())],\n  clockoutLocationId: ['clockout_location_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  regularSecondsWorked: ['regular_seconds_worked', optional(number())],\n  overtimeSecondsWorked: ['overtime_seconds_worked', optional(number())],\n  doubletimeSecondsWorked: ['doubletime_seconds_worked', optional(number())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1TimecardEvent */\nexport interface V1TimecardEvent {\n  /** The event's unique ID. */\n  id?: string;\n  /**\n   * Actions that resulted in a change to a timecard. All timecard\n   * events created with the Connect API have an event type that begins with\n   * `API`.\n   */\n  eventType?: string;\n  /** The time the employee clocked in, in ISO 8601 format. */\n  clockinTime?: string;\n  /** The time the employee clocked out, in ISO 8601 format. */\n  clockoutTime?: string;\n  /** The time when the event was created, in ISO 8601 format. */\n  createdAt?: string;\n}\n\nexport const v1TimecardEventSchema: Schema<V1TimecardEvent> = object({\n  id: ['id', optional(string())],\n  eventType: ['event_type', optional(string())],\n  clockinTime: ['clockin_time', optional(string())],\n  clockoutTime: ['clockout_time', optional(string())],\n  createdAt: ['created_at', optional(string())],\n});\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  V1CashDrawerShift,\n  v1CashDrawerShiftSchema,\n} from '../models/v1CashDrawerShift';\nimport { V1Employee, v1EmployeeSchema } from '../models/v1Employee';\nimport { V1EmployeeRole, v1EmployeeRoleSchema } from '../models/v1EmployeeRole';\nimport { V1Timecard, v1TimecardSchema } from '../models/v1Timecard';\nimport {\n  V1TimecardEvent,\n  v1TimecardEventSchema,\n} from '../models/v1TimecardEvent';\nimport { array, boolean, number, optional, string, unknown } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class V1EmployeesApi extends BaseApi {\n  /**\n   * Provides summary information for all of a business's employees.\n   *\n   * @param order            The order in which employees are listed in the response, based on their\n   *                                   created_at field.      Default value: ASC\n   * @param beginUpdatedAt   If filtering results by their updated_at field, the beginning of the requested\n   *                                   reporting period, in ISO 8601 format\n   * @param endUpdatedAt     If filtering results by there updated_at field, the end of the requested\n   *                                   reporting period, in ISO 8601 format.\n   * @param beginCreatedAt   If filtering results by their created_at field, the beginning of the requested\n   *                                   reporting period, in ISO 8601 format.\n   * @param endCreatedAt     If filtering results by their created_at field, the end of the requested\n   *                                   reporting period, in ISO 8601 format.\n   * @param status           If provided, the endpoint returns only employee entities with the specified\n   *                                   status (ACTIVE or INACTIVE).\n   * @param externalId       If provided, the endpoint returns only employee entities with the specified\n   *                                   external_id.\n   * @param limit            The maximum integer number of employee entities to return in a single response.\n   *                                   Default 100, maximum 200.\n   * @param batchToken       A pagination cursor to retrieve the next set of results for your original query\n   *                                   to the endpoint.\n   * @return Response from the API call\n   */\n  async listEmployees(\n    order?: string,\n    beginUpdatedAt?: string,\n    endUpdatedAt?: string,\n    beginCreatedAt?: string,\n    endCreatedAt?: string,\n    status?: string,\n    externalId?: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Employee[]>> {\n    const req = this.createRequest('GET', '/v1/me/employees');\n    const mapped = req.prepareArgs({\n      order: [order, optional(string())],\n      beginUpdatedAt: [beginUpdatedAt, optional(string())],\n      endUpdatedAt: [endUpdatedAt, optional(string())],\n      beginCreatedAt: [beginCreatedAt, optional(string())],\n      endCreatedAt: [endCreatedAt, optional(string())],\n      status: [status, optional(string())],\n      externalId: [externalId, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_updated_at', mapped.beginUpdatedAt);\n    req.query('end_updated_at', mapped.endUpdatedAt);\n    req.query('begin_created_at', mapped.beginCreatedAt);\n    req.query('end_created_at', mapped.endCreatedAt);\n    req.query('status', mapped.status);\n    req.query('external_id', mapped.externalId);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    return req.callAsJson(array(v1EmployeeSchema), requestOptions);\n  }\n\n  /**\n   * Use the CreateEmployee endpoint to add an employee to a Square\n   * account. Employees created with the Connect API have an initial status\n   * of `INACTIVE`. Inactive employees cannot sign in to Square Point of Sale\n   * until they are activated from the Square Dashboard. Employee status\n   * cannot be changed with the Connect API.\n   *\n   * <aside class=\"important\">\n   * Employee entities cannot be deleted. To disable employee profiles,\n   * set the employee's status to <code>INACTIVE</code>\n   * </aside>\n   *\n   * @param body An object containing the fields to POST for the request.  See the corresponding\n   *                                  object definition for field details.\n   * @return Response from the API call\n   */\n  async createEmployee(\n    body: V1Employee,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Employee>> {\n    const req = this.createRequest('POST', '/v1/me/employees');\n    const mapped = req.prepareArgs({ body: [body, v1EmployeeSchema] });\n    req.json(mapped.body);\n    return req.callAsJson(v1EmployeeSchema, requestOptions);\n  }\n\n  /**\n   * Provides the details for a single employee.\n   *\n   * @param employeeId  The employee's ID.\n   * @return Response from the API call\n   */\n  async retrieveEmployee(\n    employeeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Employee>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ employeeId: [employeeId, string()] });\n    req.appendTemplatePath`/v1/me/employees/${mapped.employeeId}`;\n    return req.callAsJson(v1EmployeeSchema, requestOptions);\n  }\n\n  /**\n   * UpdateEmployee\n   *\n   * @param employeeId  The ID of the role to modify.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateEmployee(\n    employeeId: string,\n    body: V1Employee,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Employee>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      employeeId: [employeeId, string()],\n      body: [body, v1EmployeeSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/me/employees/${mapped.employeeId}`;\n    return req.callAsJson(v1EmployeeSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all of a business's employee roles.\n   *\n   * @param order       The order in which employees are listed in the response, based on their created_at\n   *                              field.Default value: ASC\n   * @param limit       The maximum integer number of employee entities to return in a single response.\n   *                              Default 100, maximum 200.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   */\n  async listEmployeeRoles(\n    order?: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1EmployeeRole[]>> {\n    const req = this.createRequest('GET', '/v1/me/roles');\n    const mapped = req.prepareArgs({\n      order: [order, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    return req.callAsJson(array(v1EmployeeRoleSchema), requestOptions);\n  }\n\n  /**\n   * Creates an employee role you can then assign to employees.\n   *\n   * Square accounts can include any number of roles that can be assigned to\n   * employees. These roles define the actions and permissions granted to an\n   * employee with that role. For example, an employee with a \"Shift Manager\"\n   * role might be able to issue refunds in Square Point of Sale, whereas an\n   * employee with a \"Clerk\" role might not.\n   *\n   * Roles are assigned with the [V1UpdateEmployee](#endpoint-v1updateemployee)\n   * endpoint. An employee can have only one role at a time.\n   *\n   * If an employee has no role, they have none of the permissions associated\n   * with roles. All employees can accept payments with Square Point of Sale.\n   *\n   * @param body An EmployeeRole object with a name and permissions, and an optional owner\n   *                                      flag.\n   * @return Response from the API call\n   */\n  async createEmployeeRole(\n    body: V1EmployeeRole,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1EmployeeRole>> {\n    const req = this.createRequest('POST', '/v1/me/roles');\n    const mapped = req.prepareArgs({ body: [body, v1EmployeeRoleSchema] });\n    req.json(mapped.body);\n    return req.callAsJson(v1EmployeeRoleSchema, requestOptions);\n  }\n\n  /**\n   * Provides the details for a single employee role.\n   *\n   * @param roleId  The role's ID.\n   * @return Response from the API call\n   */\n  async retrieveEmployeeRole(\n    roleId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1EmployeeRole>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ roleId: [roleId, string()] });\n    req.appendTemplatePath`/v1/me/roles/${mapped.roleId}`;\n    return req.callAsJson(v1EmployeeRoleSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an employee role.\n   *\n   * @param roleId  The ID of the role to modify.\n   * @param body    An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateEmployeeRole(\n    roleId: string,\n    body: V1EmployeeRole,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1EmployeeRole>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      roleId: [roleId, string()],\n      body: [body, v1EmployeeRoleSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/me/roles/${mapped.roleId}`;\n    return req.callAsJson(v1EmployeeRoleSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all of a business's employee timecards.\n   *\n   * @param order               The order in which timecards are listed in the response, based on their\n   *                                       created_at field.\n   * @param employeeId          If provided, the endpoint returns only timecards for the employee with the\n   *                                       specified ID.\n   * @param beginClockinTime    If filtering results by their clockin_time field, the beginning of the\n   *                                       requested reporting period, in ISO 8601 format.\n   * @param endClockinTime      If filtering results by their clockin_time field, the end of the requested\n   *                                       reporting period, in ISO 8601 format.\n   * @param beginClockoutTime   If filtering results by their clockout_time field, the beginning of the\n   *                                       requested reporting period, in ISO 8601 format.\n   * @param endClockoutTime     If filtering results by their clockout_time field, the end of the requested\n   *                                       reporting period, in ISO 8601 format.\n   * @param beginUpdatedAt      If filtering results by their updated_at field, the beginning of the\n   *                                       requested reporting period, in ISO 8601 format.\n   * @param endUpdatedAt        If filtering results by their updated_at field, the end of the requested\n   *                                       reporting period, in ISO 8601 format.\n   * @param deleted             If true, only deleted timecards are returned. If false, only valid\n   *                                       timecards are returned.If you don't provide this parameter, both valid and\n   *                                       deleted timecards are returned.\n   * @param limit               The maximum integer number of employee entities to return in a single\n   *                                       response. Default 100, maximum 200.\n   * @param batchToken          A pagination cursor to retrieve the next set of results for your original\n   *                                       query to the endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listTimecards(\n    order?: string,\n    employeeId?: string,\n    beginClockinTime?: string,\n    endClockinTime?: string,\n    beginClockoutTime?: string,\n    endClockoutTime?: string,\n    beginUpdatedAt?: string,\n    endUpdatedAt?: string,\n    deleted?: boolean,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Timecard[]>> {\n    const req = this.createRequest('GET', '/v1/me/timecards');\n    const mapped = req.prepareArgs({\n      order: [order, optional(string())],\n      employeeId: [employeeId, optional(string())],\n      beginClockinTime: [beginClockinTime, optional(string())],\n      endClockinTime: [endClockinTime, optional(string())],\n      beginClockoutTime: [beginClockoutTime, optional(string())],\n      endClockoutTime: [endClockoutTime, optional(string())],\n      beginUpdatedAt: [beginUpdatedAt, optional(string())],\n      endUpdatedAt: [endUpdatedAt, optional(string())],\n      deleted: [deleted, optional(boolean())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('employee_id', mapped.employeeId);\n    req.query('begin_clockin_time', mapped.beginClockinTime);\n    req.query('end_clockin_time', mapped.endClockinTime);\n    req.query('begin_clockout_time', mapped.beginClockoutTime);\n    req.query('end_clockout_time', mapped.endClockoutTime);\n    req.query('begin_updated_at', mapped.beginUpdatedAt);\n    req.query('end_updated_at', mapped.endUpdatedAt);\n    req.query('deleted', mapped.deleted);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.deprecated('V1EmployeesApi.listTimecards');\n    return req.callAsJson(array(v1TimecardSchema), requestOptions);\n  }\n\n  /**\n   * Creates a timecard for an employee and clocks them in with an\n   * `API_CREATE` event and a `clockin_time` set to the current time unless\n   * the request provides a different value.\n   *\n   * To import timecards from another\n   * system (rather than clocking someone in). Specify the `clockin_time`\n   * and* `clockout_time` in the request.\n   *\n   * Timecards correspond to exactly one shift for a given employee, bounded\n   * by the `clockin_time` and `clockout_time` fields. An employee is\n   * considered clocked in if they have a timecard that doesn't have a\n   * `clockout_time` set. An employee that is currently clocked in cannot\n   * be clocked in a second time.\n   *\n   * @param body An object containing the fields to POST for the request.  See the corresponding\n   *                                  object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createTimecard(\n    body: V1Timecard,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Timecard>> {\n    const req = this.createRequest('POST', '/v1/me/timecards');\n    const mapped = req.prepareArgs({ body: [body, v1TimecardSchema] });\n    req.json(mapped.body);\n    req.deprecated('V1EmployeesApi.createTimecard');\n    return req.callAsJson(v1TimecardSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a timecard. Timecards can also be deleted through the\n   * Square Dashboard. Deleted timecards are still accessible through\n   * Connect API endpoints, but cannot be modified. The `deleted` field of\n   * the `Timecard` object indicates whether the timecard has been deleted.\n   *\n   *\n   * __Note__: By default, deleted timecards appear alongside valid timecards in\n   * results returned by the [ListTimecards](#endpoint-v1employees-listtimecards)\n   * endpoint. To filter deleted timecards, include the `deleted` query\n   * parameter in the list request.\n   *\n   * Only approved accounts can manage their employees with Square.\n   * Unapproved accounts cannot use employee management features with the\n   * API.\n   *\n   * @param timecardId  The ID of the timecard to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteTimecard(\n    timecardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<unknown>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({ timecardId: [timecardId, string()] });\n    req.appendTemplatePath`/v1/me/timecards/${mapped.timecardId}`;\n    req.deprecated('V1EmployeesApi.deleteTimecard');\n    return req.callAsJson(unknown(), requestOptions);\n  }\n\n  /**\n   * Provides the details for a single timecard.\n   *\n   *\n   * <aside>\n   * Only approved accounts can manage their employees with Square.\n   * Unapproved accounts cannot use employee management features with the\n   * API.\n   * </aside>\n   *\n   * @param timecardId  The timecard's ID.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveTimecard(\n    timecardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Timecard>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ timecardId: [timecardId, string()] });\n    req.appendTemplatePath`/v1/me/timecards/${mapped.timecardId}`;\n    req.deprecated('V1EmployeesApi.retrieveTimecard');\n    return req.callAsJson(v1TimecardSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of a timecard with an `API_EDIT` event for\n   * the timecard. Updating an active timecard with a `clockout_time`\n   * clocks the employee out.\n   *\n   * @param timecardId  TThe ID of the timecard to modify.\n   * @param body        An object containing the fields to POST for the request. See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateTimecard(\n    timecardId: string,\n    body: V1Timecard,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Timecard>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      timecardId: [timecardId, string()],\n      body: [body, v1TimecardSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/me/timecards/${mapped.timecardId}`;\n    req.deprecated('V1EmployeesApi.updateTimecard');\n    return req.callAsJson(v1TimecardSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all events associated with a\n   * particular timecard.\n   *\n   *\n   * <aside>\n   * Only approved accounts can manage their employees with Square.\n   * Unapproved accounts cannot use employee management features with the\n   * API.\n   * </aside>\n   *\n   * @param timecardId  The ID of the timecard to list events for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listTimecardEvents(\n    timecardId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1TimecardEvent[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ timecardId: [timecardId, string()] });\n    req.appendTemplatePath`/v1/me/timecards/${mapped.timecardId}/events`;\n    req.deprecated('V1EmployeesApi.listTimecardEvents');\n    return req.callAsJson(array(v1TimecardEventSchema), requestOptions);\n  }\n\n  /**\n   * Provides the details for all of a location's cash drawer shifts during a date range. The date range\n   * you specify cannot exceed 90 days.\n   *\n   * @param locationId  The ID of the location to list cash drawer shifts for.\n   * @param order       The order in which cash drawer shifts are listed in the response, based on their\n   *                              created_at field. Default value: ASC\n   * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. Default value:\n   *                              The current time minus 90 days.\n   * @param endTime     The beginning of the requested reporting period, in ISO 8601 format. Default value:\n   *                              The current time.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listCashDrawerShifts(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1CashDrawerShift[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.appendTemplatePath`/v1/${mapped.locationId}/cash-drawer-shifts`;\n    req.deprecated('V1EmployeesApi.listCashDrawerShifts');\n    return req.callAsJson(array(v1CashDrawerShiftSchema), requestOptions);\n  }\n\n  /**\n   * Provides the details for a single cash drawer shift, including all events that occurred during the\n   * shift.\n   *\n   * @param locationId  The ID of the location to list cash drawer shifts for.\n   * @param shiftId     The shift's ID.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveCashDrawerShift(\n    locationId: string,\n    shiftId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1CashDrawerShift>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      shiftId: [shiftId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/cash-drawer-shifts/${mapped.shiftId}`;\n    req.deprecated('V1EmployeesApi.retrieveCashDrawerShift');\n    return req.callAsJson(v1CashDrawerShiftSchema, requestOptions);\n  }\n}\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** V1AdjustInventoryRequest */\nexport interface V1AdjustInventoryRequest {\n  /** The number to adjust the variation's quantity by. */\n  quantityDelta?: number;\n  adjustmentType?: string;\n  /** A note about the inventory adjustment. */\n  memo?: string;\n}\n\nexport const v1AdjustInventoryRequestSchema: Schema<V1AdjustInventoryRequest> = object(\n  {\n    quantityDelta: ['quantity_delta', optional(number())],\n    adjustmentType: ['adjustment_type', optional(string())],\n    memo: ['memo', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1Category */\nexport interface V1Category {\n  /** The category's unique ID. */\n  id?: string;\n  /** The category's name. */\n  name?: string;\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1CategorySchema: Schema<V1Category> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  v2Id: ['v2_id', optional(string())],\n});\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1Discount */\nexport interface V1Discount {\n  /** The discount's unique ID. */\n  id?: string;\n  /** The discount's name. */\n  name?: string;\n  /** The rate of the discount, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. This rate is 0 if discount_type is VARIABLE_PERCENTAGE. */\n  rate?: string;\n  amountMoney?: V1Money;\n  discountType?: string;\n  /** Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment. */\n  pinRequired?: boolean;\n  color?: string;\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1DiscountSchema: Schema<V1Discount> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  rate: ['rate', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => v1MoneySchema))],\n  discountType: ['discount_type', optional(string())],\n  pinRequired: ['pin_required', optional(boolean())],\n  color: ['color', optional(string())],\n  v2Id: ['v2_id', optional(string())],\n});\n","import { boolean, object, optional, Schema, string } from '../schema';\n\n/** V1Fee */\nexport interface V1Fee {\n  /** The fee's unique ID. */\n  id?: string;\n  /** The fee's name. */\n  name?: string;\n  /** The rate of the fee, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. */\n  rate?: string;\n  calculationPhase?: string;\n  adjustmentType?: string;\n  /** If true, the fee applies to custom amounts entered into Square Point of Sale that are not associated with a particular item. */\n  appliesToCustomAmounts?: boolean;\n  /** If true, the fee is applied to all appropriate items. If false, the fee is not applied at all. */\n  enabled?: boolean;\n  inclusionType?: string;\n  type?: string;\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1FeeSchema: Schema<V1Fee> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  rate: ['rate', optional(string())],\n  calculationPhase: ['calculation_phase', optional(string())],\n  adjustmentType: ['adjustment_type', optional(string())],\n  appliesToCustomAmounts: ['applies_to_custom_amounts', optional(boolean())],\n  enabled: ['enabled', optional(boolean())],\n  inclusionType: ['inclusion_type', optional(string())],\n  type: ['type', optional(string())],\n  v2Id: ['v2_id', optional(string())],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** V1InventoryEntry */\nexport interface V1InventoryEntry {\n  /** The variation that the entry corresponds to. */\n  variationId?: string;\n  /** The current available quantity of the item variation. */\n  quantityOnHand?: number;\n}\n\nexport const v1InventoryEntrySchema: Schema<V1InventoryEntry> = object({\n  variationId: ['variation_id', optional(string())],\n  quantityOnHand: ['quantity_on_hand', optional(number())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1ItemImage */\nexport interface V1ItemImage {\n  /** The image's unique ID. */\n  id?: string;\n  /** The image's publicly accessible URL. */\n  url?: string;\n}\n\nexport const v1ItemImageSchema: Schema<V1ItemImage> = object({\n  id: ['id', optional(string())],\n  url: ['url', optional(string())],\n});\n","import {\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1ModifierOption */\nexport interface V1ModifierOption {\n  /** The modifier option's unique ID. */\n  id?: string;\n  /** The modifier option's name. */\n  name?: string;\n  priceMoney?: V1Money;\n  /** If true, the modifier option is the default option in a modifier list for which selection_type is SINGLE. */\n  onByDefault?: boolean;\n  /** Indicates the modifier option's list position when displayed in Square Point of Sale and the merchant dashboard. If more than one modifier option in the same modifier list has the same ordinal value, those options are displayed in alphabetical order. */\n  ordinal?: number;\n  /** The ID of the modifier list the option belongs to. */\n  modifierListId?: string;\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1ModifierOptionSchema: Schema<V1ModifierOption> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  priceMoney: ['price_money', optional(lazy(() => v1MoneySchema))],\n  onByDefault: ['on_by_default', optional(boolean())],\n  ordinal: ['ordinal', optional(number())],\n  modifierListId: ['modifier_list_id', optional(string())],\n  v2Id: ['v2_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { V1ModifierOption, v1ModifierOptionSchema } from './v1ModifierOption';\n\n/** V1ModifierList */\nexport interface V1ModifierList {\n  /** The modifier list's unique ID. */\n  id?: string;\n  /** The modifier list's name. */\n  name?: string;\n  selectionType?: string;\n  /** The options included in the modifier list. */\n  modifierOptions?: V1ModifierOption[];\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1ModifierListSchema: Schema<V1ModifierList> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  selectionType: ['selection_type', optional(string())],\n  modifierOptions: [\n    'modifier_options',\n    optional(array(lazy(() => v1ModifierOptionSchema))),\n  ],\n  v2Id: ['v2_id', optional(string())],\n});\n","import {\n  boolean,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1Variation */\nexport interface V1Variation {\n  /** The item variation's unique ID. */\n  id?: string;\n  /** The item variation's name. */\n  name?: string;\n  /** The ID of the variation's associated item. */\n  itemId?: string;\n  /** Indicates the variation's list position when displayed in Square Point of Sale and the merchant dashboard. If more than one variation for the same item has the same ordinal value, those variations are displayed in alphabetical order */\n  ordinal?: number;\n  pricingType?: string;\n  priceMoney?: V1Money;\n  /** The item variation's SKU, if any. */\n  sku?: string;\n  /** If true, inventory tracking is active for the variation. */\n  trackInventory?: boolean;\n  inventoryAlertType?: string;\n  /** If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard. */\n  inventoryAlertThreshold?: number;\n  /** Arbitrary metadata associated with the variation. Cannot exceed 255 characters. */\n  userData?: string;\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1VariationSchema: Schema<V1Variation> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  itemId: ['item_id', optional(string())],\n  ordinal: ['ordinal', optional(number())],\n  pricingType: ['pricing_type', optional(string())],\n  priceMoney: ['price_money', optional(lazy(() => v1MoneySchema))],\n  sku: ['sku', optional(string())],\n  trackInventory: ['track_inventory', optional(boolean())],\n  inventoryAlertType: ['inventory_alert_type', optional(string())],\n  inventoryAlertThreshold: ['inventory_alert_threshold', optional(number())],\n  userData: ['user_data', optional(string())],\n  v2Id: ['v2_id', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Category, v1CategorySchema } from './v1Category';\nimport { V1Fee, v1FeeSchema } from './v1Fee';\nimport { V1ItemImage, v1ItemImageSchema } from './v1ItemImage';\nimport { V1ModifierList, v1ModifierListSchema } from './v1ModifierList';\nimport { V1Variation, v1VariationSchema } from './v1Variation';\n\n/** V1Item */\nexport interface V1Item {\n  /** The item's ID. Must be unique among all entity IDs ever provided on behalf of the merchant. You can never reuse an ID. This value can include alphanumeric characters, dashes (-), and underscores (_). */\n  id?: string;\n  /** The item's name. */\n  name?: string;\n  /** The item's description. */\n  description?: string;\n  type?: string;\n  color?: string;\n  /** The text of the item's display label in Square Point of Sale. Only up to the first five characters of the string are used. */\n  abbreviation?: string;\n  visibility?: string;\n  /** If true, the item can be added to shipping orders from the merchant's online store. */\n  availableOnline?: boolean;\n  /** V1ItemImage */\n  masterImage?: V1ItemImage;\n  /** V1Category */\n  category?: V1Category;\n  /** The item's variations. You must specify at least one variation. */\n  variations?: V1Variation[];\n  /** The modifier lists that apply to the item, if any. */\n  modifierLists?: V1ModifierList[];\n  /** The fees that apply to the item, if any. */\n  fees?: V1Fee[];\n  /** Deprecated. This field is not used. */\n  taxable?: boolean;\n  /** The ID of the item's category, if any. */\n  categoryId?: string;\n  /** If true, the item can be added to pickup orders from the merchant's online store. Default value: false */\n  availableForPickup?: boolean;\n  /** The ID of the CatalogObject in the Connect v2 API. Objects that are shared across multiple locations share the same v2 ID. */\n  v2Id?: string;\n}\n\nexport const v1ItemSchema: Schema<V1Item> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  description: ['description', optional(string())],\n  type: ['type', optional(string())],\n  color: ['color', optional(string())],\n  abbreviation: ['abbreviation', optional(string())],\n  visibility: ['visibility', optional(string())],\n  availableOnline: ['available_online', optional(boolean())],\n  masterImage: ['master_image', optional(lazy(() => v1ItemImageSchema))],\n  category: ['category', optional(lazy(() => v1CategorySchema))],\n  variations: ['variations', optional(array(lazy(() => v1VariationSchema)))],\n  modifierLists: [\n    'modifier_lists',\n    optional(array(lazy(() => v1ModifierListSchema))),\n  ],\n  fees: ['fees', optional(array(lazy(() => v1FeeSchema)))],\n  taxable: ['taxable', optional(boolean())],\n  categoryId: ['category_id', optional(string())],\n  availableForPickup: ['available_for_pickup', optional(boolean())],\n  v2Id: ['v2_id', optional(string())],\n});\n","import { number, object, optional, Schema, string } from '../schema';\n\n/** V1PageCell */\nexport interface V1PageCell {\n  /** The unique identifier of the page the cell is included on. */\n  pageId?: string;\n  /** The row of the cell. Always an integer between 0 and 4, inclusive. */\n  row?: number;\n  /** The column of the cell. Always an integer between 0 and 4, inclusive. */\n  column?: number;\n  objectType?: string;\n  /** The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER. */\n  objectId?: string;\n  placeholderType?: string;\n}\n\nexport const v1PageCellSchema: Schema<V1PageCell> = object({\n  pageId: ['page_id', optional(string())],\n  row: ['row', optional(number())],\n  column: ['column', optional(number())],\n  objectType: ['object_type', optional(string())],\n  objectId: ['object_id', optional(string())],\n  placeholderType: ['placeholder_type', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1PageCell, v1PageCellSchema } from './v1PageCell';\n\n/** V1Page */\nexport interface V1Page {\n  /** The page's unique identifier. */\n  id?: string;\n  /** The page's name, if any. */\n  name?: string;\n  /** The page's position in the merchant's list of pages. Always an integer between 0 and 6, inclusive. */\n  pageIndex?: number;\n  /** The cells included on the page. */\n  cells?: V1PageCell[];\n}\n\nexport const v1PageSchema: Schema<V1Page> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  pageIndex: ['page_index', optional(number())],\n  cells: ['cells', optional(array(lazy(() => v1PageCellSchema)))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1UpdateModifierListRequest */\nexport interface V1UpdateModifierListRequest {\n  /** The modifier list's name. */\n  name?: string;\n  selectionType?: string;\n}\n\nexport const v1UpdateModifierListRequestSchema: Schema<V1UpdateModifierListRequest> = object(\n  {\n    name: ['name', optional(string())],\n    selectionType: ['selection_type', optional(string())],\n  }\n);\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  V1AdjustInventoryRequest,\n  v1AdjustInventoryRequestSchema,\n} from '../models/v1AdjustInventoryRequest';\nimport { V1Category, v1CategorySchema } from '../models/v1Category';\nimport { V1Discount, v1DiscountSchema } from '../models/v1Discount';\nimport { V1Fee, v1FeeSchema } from '../models/v1Fee';\nimport {\n  V1InventoryEntry,\n  v1InventoryEntrySchema,\n} from '../models/v1InventoryEntry';\nimport { V1Item, v1ItemSchema } from '../models/v1Item';\nimport { V1ModifierList, v1ModifierListSchema } from '../models/v1ModifierList';\nimport {\n  V1ModifierOption,\n  v1ModifierOptionSchema,\n} from '../models/v1ModifierOption';\nimport { V1Page, v1PageSchema } from '../models/v1Page';\nimport { V1PageCell, v1PageCellSchema } from '../models/v1PageCell';\nimport {\n  V1UpdateModifierListRequest,\n  v1UpdateModifierListRequestSchema,\n} from '../models/v1UpdateModifierListRequest';\nimport { V1Variation, v1VariationSchema } from '../models/v1Variation';\nimport { array, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class V1ItemsApi extends BaseApi {\n  /**\n   * Lists all the item categories for a given location.\n   *\n   * @param locationId  The ID of the location to list categories for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listCategories(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Category[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v1/${mapped.locationId}/categories`;\n    req.deprecated('V1ItemsApi.listCategories');\n    return req.callAsJson(array(v1CategorySchema), requestOptions);\n  }\n\n  /**\n   * Creates an item category.\n   *\n   * @param locationId  The ID of the location to create an item for.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createCategory(\n    locationId: string,\n    body: V1Category,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Category>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1CategorySchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/categories`;\n    req.deprecated('V1ItemsApi.createCategory');\n    return req.callAsJson(v1CategorySchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing item category.\n   *\n   *\n   * __DeleteCategory__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeleteCategoryRequest` object\n   * as documented below.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param categoryId  The ID of the category to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteCategory(\n    locationId: string,\n    categoryId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Category>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      categoryId: [categoryId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/categories/${mapped.categoryId}`;\n    req.deprecated('V1ItemsApi.deleteCategory');\n    return req.callAsJson(v1CategorySchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an existing item category.\n   *\n   * @param locationId  The ID of the category's associated location.\n   * @param categoryId  The ID of the category to edit.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateCategory(\n    locationId: string,\n    categoryId: string,\n    body: V1Category,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Category>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      categoryId: [categoryId, string()],\n      body: [body, v1CategorySchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/categories/${mapped.categoryId}`;\n    req.deprecated('V1ItemsApi.updateCategory');\n    return req.callAsJson(v1CategorySchema, requestOptions);\n  }\n\n  /**\n   * Lists all the discounts for a given location.\n   *\n   * @param locationId  The ID of the location to list categories for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listDiscounts(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Discount[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v1/${mapped.locationId}/discounts`;\n    req.deprecated('V1ItemsApi.listDiscounts');\n    return req.callAsJson(array(v1DiscountSchema), requestOptions);\n  }\n\n  /**\n   * Creates a discount.\n   *\n   * @param locationId  The ID of the location to create an item for.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createDiscount(\n    locationId: string,\n    body: V1Discount,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Discount>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1DiscountSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/discounts`;\n    req.deprecated('V1ItemsApi.createDiscount');\n    return req.callAsJson(v1DiscountSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing discount.\n   *\n   *\n   * __DeleteDiscount__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeleteDiscountRequest` object\n   * as documented below.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param discountId  The ID of the discount to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteDiscount(\n    locationId: string,\n    discountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Discount>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      discountId: [discountId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/discounts/${mapped.discountId}`;\n    req.deprecated('V1ItemsApi.deleteDiscount');\n    return req.callAsJson(v1DiscountSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an existing discount.\n   *\n   * @param locationId  The ID of the category's associated location.\n   * @param discountId  The ID of the discount to edit.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateDiscount(\n    locationId: string,\n    discountId: string,\n    body: V1Discount,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Discount>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      discountId: [discountId, string()],\n      body: [body, v1DiscountSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/discounts/${mapped.discountId}`;\n    req.deprecated('V1ItemsApi.updateDiscount');\n    return req.callAsJson(v1DiscountSchema, requestOptions);\n  }\n\n  /**\n   * Lists all the fees (taxes) for a given location.\n   *\n   * @param locationId  The ID of the location to list fees for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listFees(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Fee[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v1/${mapped.locationId}/fees`;\n    req.deprecated('V1ItemsApi.listFees');\n    return req.callAsJson(array(v1FeeSchema), requestOptions);\n  }\n\n  /**\n   * Creates a fee (tax).\n   *\n   * @param locationId  The ID of the location to create a fee for.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                    corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createFee(\n    locationId: string,\n    body: V1Fee,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Fee>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1FeeSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/fees`;\n    req.deprecated('V1ItemsApi.createFee');\n    return req.callAsJson(v1FeeSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing fee (tax).\n   *\n   *\n   * __DeleteFee__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeleteFeeRequest` object\n   * as documented below.\n   *\n   * @param locationId  The ID of the fee's associated location.\n   * @param feeId       The ID of the fee to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteFee(\n    locationId: string,\n    feeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Fee>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      feeId: [feeId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/fees/${mapped.feeId}`;\n    req.deprecated('V1ItemsApi.deleteFee');\n    return req.callAsJson(v1FeeSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an existing fee (tax).\n   *\n   * @param locationId  The ID of the fee's associated location.\n   * @param feeId       The ID of the fee to edit.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                    corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateFee(\n    locationId: string,\n    feeId: string,\n    body: V1Fee,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Fee>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      feeId: [feeId, string()],\n      body: [body, v1FeeSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/fees/${mapped.feeId}`;\n    req.deprecated('V1ItemsApi.updateFee');\n    return req.callAsJson(v1FeeSchema, requestOptions);\n  }\n\n  /**\n   * Provides inventory information for all inventory-enabled item\n   * variations.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param limit       The maximum number of inventory entries to return in a single response. This value\n   *                              cannot exceed 1000.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listInventory(\n    locationId: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1InventoryEntry[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/inventory`;\n    req.deprecated('V1ItemsApi.listInventory');\n    return req.callAsJson(array(v1InventoryEntrySchema), requestOptions);\n  }\n\n  /**\n   * Adjusts the current available inventory of an item variation.\n   *\n   * @param locationId   The ID of the item's associated location.\n   * @param variationId  The ID of the variation to adjust inventory information\n   *                                                        for.\n   * @param body         An object containing the fields to POST for the request.\n   *                                                        See the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async adjustInventory(\n    locationId: string,\n    variationId: string,\n    body: V1AdjustInventoryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1InventoryEntry>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      variationId: [variationId, string()],\n      body: [body, v1AdjustInventoryRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/inventory/${mapped.variationId}`;\n    req.deprecated('V1ItemsApi.adjustInventory');\n    return req.callAsJson(v1InventoryEntrySchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information of all items for a given location.\n   *\n   * @param locationId  The ID of the location to list items for.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listItems(\n    locationId: string,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/items`;\n    req.deprecated('V1ItemsApi.listItems');\n    return req.callAsJson(array(v1ItemSchema), requestOptions);\n  }\n\n  /**\n   * Creates an item and at least one variation for it.\n   *\n   *\n   *\n   * Item-related entities include fields you can use to associate them with\n   * entities in a non-Square system.\n   *\n   * When you create an item-related entity, you can optionally specify `id`.\n   * This value must be unique among all IDs ever specified for the account,\n   * including those specified by other applications. You can never reuse an\n   * entity ID. If you do not specify an ID, Square generates one for the entity.\n   *\n   * Item variations have a `user_data` string that lets you associate arbitrary\n   * metadata with the variation. The string cannot exceed 255 characters.\n   *\n   * @param locationId  The ID of the location to create an item for.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                     corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createItem(\n    locationId: string,\n    body: V1Item,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1ItemSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/items`;\n    req.deprecated('V1ItemsApi.createItem');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing item and all item variations associated with it.\n   *\n   *\n   * __DeleteItem__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeleteItemRequest` object\n   * as documented below.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param itemId      The ID of the item to modify.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteItem(\n    locationId: string,\n    itemId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}`;\n    req.deprecated('V1ItemsApi.deleteItem');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Provides the details for a single item, including associated modifier\n   * lists and fees.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param itemId      The item's ID.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveItem(\n    locationId: string,\n    itemId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}`;\n    req.deprecated('V1ItemsApi.retrieveItem');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the core details of an existing item.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param itemId      The ID of the item to modify.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                     corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateItem(\n    locationId: string,\n    itemId: string,\n    body: V1Item,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n      body: [body, v1ItemSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}`;\n    req.deprecated('V1ItemsApi.updateItem');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Removes a fee assocation from an item so the fee is no longer\n   * automatically applied to the item in Square Point of Sale.\n   *\n   * @param locationId  The ID of the fee's associated location.\n   * @param itemId      The ID of the item to add the fee to.\n   * @param feeId       The ID of the fee to apply.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async removeFee(\n    locationId: string,\n    itemId: string,\n    feeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n      feeId: [feeId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}/fees/${mapped.feeId}`;\n    req.deprecated('V1ItemsApi.removeFee');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Associates a fee with an item so the fee is automatically applied to\n   * the item in Square Point of Sale.\n   *\n   * @param locationId  The ID of the fee's associated location.\n   * @param itemId      The ID of the item to add the fee to.\n   * @param feeId       The ID of the fee to apply.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async applyFee(\n    locationId: string,\n    itemId: string,\n    feeId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n      feeId: [feeId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}/fees/${mapped.feeId}`;\n    req.deprecated('V1ItemsApi.applyFee');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Removes a modifier list association from an item so the modifier\n   * options from the list can no longer be applied to the item.\n   *\n   * @param locationId       The ID of the item's associated location.\n   * @param modifierListId   The ID of the modifier list to remove.\n   * @param itemId           The ID of the item to remove the modifier list from.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async removeModifierList(\n    locationId: string,\n    modifierListId: string,\n    itemId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n      itemId: [itemId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.modifierListId}/modifier-lists/${mapped.itemId}`;\n    req.deprecated('V1ItemsApi.removeModifierList');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Associates a modifier list with an item so the associated modifier\n   * options can be applied to the item.\n   *\n   * @param locationId       The ID of the item's associated location.\n   * @param modifierListId   The ID of the modifier list to apply.\n   * @param itemId           The ID of the item to add the modifier list to.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async applyModifierList(\n    locationId: string,\n    modifierListId: string,\n    itemId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Item>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n      itemId: [itemId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.modifierListId}/modifier-lists/${mapped.itemId}`;\n    req.deprecated('V1ItemsApi.applyModifierList');\n    return req.callAsJson(v1ItemSchema, requestOptions);\n  }\n\n  /**\n   * Creates an item variation for an existing item.\n   *\n   * @param locationId  The ID of the item's associated location.\n   * @param itemId      The item's ID.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                          corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createVariation(\n    locationId: string,\n    itemId: string,\n    body: V1Variation,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Variation>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n      body: [body, v1VariationSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}/variations`;\n    req.deprecated('V1ItemsApi.createVariation');\n    return req.callAsJson(v1VariationSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing item variation from an item.\n   *\n   *\n   * __DeleteVariation__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeleteVariationRequest` object\n   * as documented below.\n   *\n   * @param locationId   The ID of the item's associated location.\n   * @param itemId       The ID of the item to delete.\n   * @param variationId  The ID of the variation to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteVariation(\n    locationId: string,\n    itemId: string,\n    variationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Variation>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n      variationId: [variationId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}/variations/${mapped.variationId}`;\n    req.deprecated('V1ItemsApi.deleteVariation');\n    return req.callAsJson(v1VariationSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an existing item variation.\n   *\n   * @param locationId   The ID of the item's associated location.\n   * @param itemId       The ID of the item to modify.\n   * @param variationId  The ID of the variation to modify.\n   * @param body         An object containing the fields to POST for the request.  See the\n   *                                           corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateVariation(\n    locationId: string,\n    itemId: string,\n    variationId: string,\n    body: V1Variation,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Variation>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      itemId: [itemId, string()],\n      variationId: [variationId, string()],\n      body: [body, v1VariationSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/items/${mapped.itemId}/variations/${mapped.variationId}`;\n    req.deprecated('V1ItemsApi.updateVariation');\n    return req.callAsJson(v1VariationSchema, requestOptions);\n  }\n\n  /**\n   * Lists all the modifier lists for a given location.\n   *\n   * @param locationId  The ID of the location to list modifier lists for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listModifierLists(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierList[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists`;\n    req.deprecated('V1ItemsApi.listModifierLists');\n    return req.callAsJson(array(v1ModifierListSchema), requestOptions);\n  }\n\n  /**\n   * Creates an item modifier list and at least 1 modifier option for it.\n   *\n   * @param locationId  The ID of the location to create a modifier list for.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                             corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createModifierList(\n    locationId: string,\n    body: V1ModifierList,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierList>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1ModifierListSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists`;\n    req.deprecated('V1ItemsApi.createModifierList');\n    return req.callAsJson(v1ModifierListSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing item modifier list and all modifier options\n   * associated with it.\n   *\n   *\n   * __DeleteModifierList__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeleteModifierListRequest` object\n   * as documented below.\n   *\n   * @param locationId       The ID of the item's associated location.\n   * @param modifierListId   The ID of the modifier list to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteModifierList(\n    locationId: string,\n    modifierListId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierList>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists/${mapped.modifierListId}`;\n    req.deprecated('V1ItemsApi.deleteModifierList');\n    return req.callAsJson(v1ModifierListSchema, requestOptions);\n  }\n\n  /**\n   * Provides the details for a single modifier list.\n   *\n   * @param locationId       The ID of the item's associated location.\n   * @param modifierListId   The modifier list's ID.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveModifierList(\n    locationId: string,\n    modifierListId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierList>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists/${mapped.modifierListId}`;\n    req.deprecated('V1ItemsApi.retrieveModifierList');\n    return req.callAsJson(v1ModifierListSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an existing item modifier list.\n   *\n   * @param locationId       The ID of the item's associated location.\n   * @param modifierListId   The ID of the modifier list to edit.\n   * @param body             An object containing the fields to POST for the\n   *                                                               request.  See the corresponding object definition\n   *                                                               for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateModifierList(\n    locationId: string,\n    modifierListId: string,\n    body: V1UpdateModifierListRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierList>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n      body: [body, v1UpdateModifierListRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists/${mapped.modifierListId}`;\n    req.deprecated('V1ItemsApi.updateModifierList');\n    return req.callAsJson(v1ModifierListSchema, requestOptions);\n  }\n\n  /**\n   * Creates an item modifier option and adds it to a modifier list.\n   *\n   * @param locationId       The ID of the item's associated location.\n   * @param modifierListId   The ID of the modifier list to edit.\n   * @param body             An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createModifierOption(\n    locationId: string,\n    modifierListId: string,\n    body: V1ModifierOption,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierOption>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n      body: [body, v1ModifierOptionSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists/${mapped.modifierListId}/modifier-options`;\n    req.deprecated('V1ItemsApi.createModifierOption');\n    return req.callAsJson(v1ModifierOptionSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing item modifier option from a modifier list.\n   *\n   *\n   * __DeleteModifierOption__ returns nothing on success but Connect\n   * SDKs map the empty response to an empty `V1DeleteModifierOptionRequest`\n   * object.\n   *\n   * @param locationId         The ID of the item's associated location.\n   * @param modifierListId     The ID of the modifier list to delete.\n   * @param modifierOptionId   The ID of the modifier list to edit.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deleteModifierOption(\n    locationId: string,\n    modifierListId: string,\n    modifierOptionId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierOption>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n      modifierOptionId: [modifierOptionId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists/${mapped.modifierListId}/modifier-options/${mapped.modifierOptionId}`;\n    req.deprecated('V1ItemsApi.deleteModifierOption');\n    return req.callAsJson(v1ModifierOptionSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of an existing item modifier option.\n   *\n   * @param locationId         The ID of the item's associated location.\n   * @param modifierListId     The ID of the modifier list to edit.\n   * @param modifierOptionId   The ID of the modifier list to edit.\n   * @param body               An object containing the fields to POST for the request.\n   *                                                      See the corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updateModifierOption(\n    locationId: string,\n    modifierListId: string,\n    modifierOptionId: string,\n    body: V1ModifierOption,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1ModifierOption>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      modifierListId: [modifierListId, string()],\n      modifierOptionId: [modifierOptionId, string()],\n      body: [body, v1ModifierOptionSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/modifier-lists/${mapped.modifierListId}/modifier-options/${mapped.modifierOptionId}`;\n    req.deprecated('V1ItemsApi.updateModifierOption');\n    return req.callAsJson(v1ModifierOptionSchema, requestOptions);\n  }\n\n  /**\n   * Lists all Favorites pages (in Square Point of Sale) for a given\n   * location.\n   *\n   * @param locationId  The ID of the location to list Favorites pages for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listPages(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Page[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v1/${mapped.locationId}/pages`;\n    req.deprecated('V1ItemsApi.listPages');\n    return req.callAsJson(array(v1PageSchema), requestOptions);\n  }\n\n  /**\n   * Creates a Favorites page in Square Point of Sale.\n   *\n   * @param locationId  The ID of the location to create an item for.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                     corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async createPage(\n    locationId: string,\n    body: V1Page,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Page>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1PageSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/pages`;\n    req.deprecated('V1ItemsApi.createPage');\n    return req.callAsJson(v1PageSchema, requestOptions);\n  }\n\n  /**\n   * Deletes an existing Favorites page and all of its cells.\n   *\n   *\n   * __DeletePage__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeletePageRequest` object.\n   *\n   * @param locationId  The ID of the Favorites page's associated location.\n   * @param pageId      The ID of the page to delete.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deletePage(\n    locationId: string,\n    pageId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Page>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      pageId: [pageId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/pages/${mapped.pageId}`;\n    req.deprecated('V1ItemsApi.deletePage');\n    return req.callAsJson(v1PageSchema, requestOptions);\n  }\n\n  /**\n   * Modifies the details of a Favorites page in Square Point of Sale.\n   *\n   * @param locationId  The ID of the Favorites page's associated location\n   * @param pageId      The ID of the page to modify.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                     corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updatePage(\n    locationId: string,\n    pageId: string,\n    body: V1Page,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Page>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      pageId: [pageId, string()],\n      body: [body, v1PageSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/pages/${mapped.pageId}`;\n    req.deprecated('V1ItemsApi.updatePage');\n    return req.callAsJson(v1PageSchema, requestOptions);\n  }\n\n  /**\n   * Deletes a cell from a Favorites page in Square Point of Sale.\n   *\n   *\n   * __DeletePageCell__ returns nothing on success but Connect SDKs\n   * map the empty response to an empty `V1DeletePageCellRequest` object\n   * as documented below.\n   *\n   * @param locationId  The ID of the Favorites page's associated location.\n   * @param pageId      The ID of the page to delete.\n   * @param row         The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is\n   *                              the top row.\n   * @param column      The column of the cell to clear. Always an integer between 0 and 4, inclusive.\n   *                              Column 0 is the leftmost column.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async deletePageCell(\n    locationId: string,\n    pageId: string,\n    row?: string,\n    column?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Page>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      pageId: [pageId, string()],\n      row: [row, optional(string())],\n      column: [column, optional(string())],\n    });\n    req.query('row', mapped.row);\n    req.query('column', mapped.column);\n    req.appendTemplatePath`/v1/${mapped.locationId}/pages/${mapped.pageId}/cells`;\n    req.deprecated('V1ItemsApi.deletePageCell');\n    return req.callAsJson(v1PageSchema, requestOptions);\n  }\n\n  /**\n   * Modifies a cell of a Favorites page in Square Point of Sale.\n   *\n   * @param locationId  The ID of the Favorites page's associated location.\n   * @param pageId      The ID of the page the cell belongs to.\n   * @param body        An object containing the fields to POST for the request.  See the\n   *                                         corresponding object definition for field details.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async updatePageCell(\n    locationId: string,\n    pageId: string,\n    body: V1PageCell,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Page>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      pageId: [pageId, string()],\n      body: [body, v1PageCellSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/pages/${mapped.pageId}/cells`;\n    req.deprecated('V1ItemsApi.updatePageCell');\n    return req.callAsJson(v1PageSchema, requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** Additional information for a single-location account specified by its associated business account, if it has one. */\nexport interface V1MerchantLocationDetails {\n  /** The nickname assigned to the single-location account by the parent business. This value appears in the parent business's multi-location dashboard. */\n  nickname?: string;\n}\n\nexport const v1MerchantLocationDetailsSchema: Schema<V1MerchantLocationDetails> = object(\n  { nickname: ['nickname', optional(string())] }\n);\n","import { object, Schema, string } from '../schema';\n\n/** Represents a phone number. */\nexport interface V1PhoneNumber {\n  /** The phone number's international calling code. For US phone numbers, this value is +1. */\n  callingCode: string;\n  /** The phone number. */\n  number: string;\n}\n\nexport const v1PhoneNumberSchema: Schema<V1PhoneNumber> = object({\n  callingCode: ['calling_code', string()],\n  number: ['number', string()],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Address, addressSchema } from './address';\nimport {\n  V1MerchantLocationDetails,\n  v1MerchantLocationDetailsSchema,\n} from './v1MerchantLocationDetails';\nimport { V1PhoneNumber, v1PhoneNumberSchema } from './v1PhoneNumber';\n\n/**\n * Defines the fields that are included in the response body of\n * a request to the **RetrieveBusiness** endpoint.\n */\nexport interface V1Merchant {\n  /** The merchant account's unique identifier. */\n  id?: string;\n  /** The name associated with the merchant account. */\n  name?: string;\n  /** The email address associated with the merchant account. */\n  email?: string;\n  accountType?: string;\n  /** Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account. */\n  accountCapabilities?: string[];\n  /** The country associated with the merchant account, in ISO 3166-1-alpha-2 format. */\n  countryCode?: string;\n  /** The language associated with the merchant account, in BCP 47 format. */\n  languageCode?: string;\n  /** The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD. */\n  currencyCode?: string;\n  /** The name of the merchant's business. */\n  businessName?: string;\n  /** Represents a physical address. */\n  businessAddress?: Address;\n  /** Represents a phone number. */\n  businessPhone?: V1PhoneNumber;\n  businessType?: string;\n  /** Represents a physical address. */\n  shippingAddress?: Address;\n  /** Additional information for a single-location account specified by its associated business account, if it has one. */\n  locationDetails?: V1MerchantLocationDetails;\n  /** The URL of the merchant's online store. */\n  marketUrl?: string;\n}\n\nexport const v1MerchantSchema: Schema<V1Merchant> = object({\n  id: ['id', optional(string())],\n  name: ['name', optional(string())],\n  email: ['email', optional(string())],\n  accountType: ['account_type', optional(string())],\n  accountCapabilities: ['account_capabilities', optional(array(string()))],\n  countryCode: ['country_code', optional(string())],\n  languageCode: ['language_code', optional(string())],\n  currencyCode: ['currency_code', optional(string())],\n  businessName: ['business_name', optional(string())],\n  businessAddress: ['business_address', optional(lazy(() => addressSchema))],\n  businessPhone: ['business_phone', optional(lazy(() => v1PhoneNumberSchema))],\n  businessType: ['business_type', optional(string())],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  locationDetails: [\n    'location_details',\n    optional(lazy(() => v1MerchantLocationDetailsSchema)),\n  ],\n  marketUrl: ['market_url', optional(string())],\n});\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport { V1Merchant, v1MerchantSchema } from '../models/v1Merchant';\nimport { array } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class V1LocationsApi extends BaseApi {\n  /**\n   * Get the general information for a business.\n   *\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveBusiness(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Merchant>> {\n    const req = this.createRequest('GET', '/v1/me');\n    req.deprecated('V1LocationsApi.retrieveBusiness');\n    return req.callAsJson(v1MerchantSchema, requestOptions);\n  }\n\n  /**\n   * Provides details for all business locations associated with a Square\n   * account, including the Square-assigned object ID for the location.\n   *\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listLocations(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Merchant[]>> {\n    const req = this.createRequest('GET', '/v1/me/locations');\n    req.deprecated('V1LocationsApi.listLocations');\n    return req.callAsJson(array(v1MerchantSchema), requestOptions);\n  }\n}\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1BankAccount */\nexport interface V1BankAccount {\n  /** The bank account's Square-issued ID. */\n  id?: string;\n  /** The Square-issued ID of the merchant associated with the bank account. */\n  merchantId?: string;\n  /** The name of the bank that manages the account. */\n  bankName?: string;\n  /** The name associated with the bank account. */\n  name?: string;\n  /** The bank account's routing number. */\n  routingNumber?: string;\n  /** The last few digits of the bank account number. */\n  accountNumberSuffix?: string;\n  /** The currency code of the currency associated with the bank account, in ISO 4217 format. For example, the currency code for US dollars is USD. */\n  currencyCode?: string;\n  type?: string;\n}\n\nexport const v1BankAccountSchema: Schema<V1BankAccount> = object({\n  id: ['id', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  bankName: ['bank_name', optional(string())],\n  name: ['name', optional(string())],\n  routingNumber: ['routing_number', optional(string())],\n  accountNumberSuffix: ['account_number_suffix', optional(string())],\n  currencyCode: ['currency_code', optional(string())],\n  type: ['type', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1CreateRefundRequest */\nexport interface V1CreateRefundRequest {\n  /**\n   * The ID of the payment to refund. If you are creating a `PARTIAL`\n   * refund for a split tender payment, instead provide the id of the\n   * particular tender you want to refund.\n   */\n  paymentId: string;\n  type: string;\n  /** The reason for the refund. */\n  reason: string;\n  refundedMoney?: V1Money;\n  /** An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once. */\n  requestIdempotenceKey?: string;\n}\n\nexport const v1CreateRefundRequestSchema: Schema<V1CreateRefundRequest> = object(\n  {\n    paymentId: ['payment_id', string()],\n    type: ['type', string()],\n    reason: ['reason', string()],\n    refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n    requestIdempotenceKey: ['request_idempotence_key', optional(string())],\n  }\n);\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1OrderHistoryEntry */\nexport interface V1OrderHistoryEntry {\n  action?: string;\n  /** The time when the action was performed, in ISO 8601 format. */\n  createdAt?: string;\n}\n\nexport const v1OrderHistoryEntrySchema: Schema<V1OrderHistoryEntry> = object({\n  action: ['action', optional(string())],\n  createdAt: ['created_at', optional(string())],\n});\n","import { boolean, lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/**\n * A tender represents a discrete monetary exchange. Square represents this\n * exchange as a money object with a specific currency and amount, where the\n * amount is given in the smallest denomination of the given currency.\n * Square POS can accept more than one form of tender for a single payment (such\n * as by splitting a bill between a credit card and a gift card). The `tender`\n * field of the Payment object lists all forms of tender used for the payment.\n * Split tender payments behave slightly differently from single tender payments:\n * The receipt_url for a split tender corresponds only to the first tender listed\n * in the tender field. To get the receipt URLs for the remaining tenders, use\n * the receipt_url fields of the corresponding Tender objects.\n * *A note on gift cards**: when a customer purchases a Square gift card from a\n * merchant, the merchant receives the full amount of the gift card in the\n * associated payment.\n * When that gift card is used as a tender, the balance of the gift card is\n * reduced and the merchant receives no funds. A `Tender` object with a type of\n * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the\n * associated payment.\n */\nexport interface V1Tender {\n  /** The tender's unique ID. */\n  id?: string;\n  type?: string;\n  /** A human-readable description of the tender. */\n  name?: string;\n  /** The ID of the employee that processed the tender. */\n  employeeId?: string;\n  /** The URL of the receipt for the tender. */\n  receiptUrl?: string;\n  /** The brand of a credit card. */\n  cardBrand?: string;\n  /** The last four digits of the provided credit card's account number. */\n  panSuffix?: string;\n  entryMethod?: string;\n  /** Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER. */\n  paymentNote?: string;\n  totalMoney?: V1Money;\n  tenderedMoney?: V1Money;\n  /** The time when the tender was created, in ISO 8601 format. */\n  tenderedAt?: string;\n  /** The time when the tender was settled, in ISO 8601 format. */\n  settledAt?: string;\n  changeBackMoney?: V1Money;\n  refundedMoney?: V1Money;\n  /** Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange. */\n  isExchange?: boolean;\n}\n\nexport const v1TenderSchema: Schema<V1Tender> = object({\n  id: ['id', optional(string())],\n  type: ['type', optional(string())],\n  name: ['name', optional(string())],\n  employeeId: ['employee_id', optional(string())],\n  receiptUrl: ['receipt_url', optional(string())],\n  cardBrand: ['card_brand', optional(string())],\n  panSuffix: ['pan_suffix', optional(string())],\n  entryMethod: ['entry_method', optional(string())],\n  paymentNote: ['payment_note', optional(string())],\n  totalMoney: ['total_money', optional(lazy(() => v1MoneySchema))],\n  tenderedMoney: ['tendered_money', optional(lazy(() => v1MoneySchema))],\n  tenderedAt: ['tendered_at', optional(string())],\n  settledAt: ['settled_at', optional(string())],\n  changeBackMoney: ['change_back_money', optional(lazy(() => v1MoneySchema))],\n  refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n  isExchange: ['is_exchange', optional(boolean())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Address, addressSchema } from './address';\nimport { Error, errorSchema } from './error';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1OrderHistoryEntry,\n  v1OrderHistoryEntrySchema,\n} from './v1OrderHistoryEntry';\nimport { V1Tender, v1TenderSchema } from './v1Tender';\n\n/** V1Order */\nexport interface V1Order {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The order's unique identifier. */\n  id?: string;\n  /** The email address of the order's buyer. */\n  buyerEmail?: string;\n  /** The name of the order's buyer. */\n  recipientName?: string;\n  /** The phone number to use for the order's delivery. */\n  recipientPhoneNumber?: string;\n  state?: string;\n  /** Represents a physical address. */\n  shippingAddress?: Address;\n  subtotalMoney?: V1Money;\n  totalShippingMoney?: V1Money;\n  totalTaxMoney?: V1Money;\n  totalPriceMoney?: V1Money;\n  totalDiscountMoney?: V1Money;\n  /** The time when the order was created, in ISO 8601 format. */\n  createdAt?: string;\n  /** The time when the order was last modified, in ISO 8601 format. */\n  updatedAt?: string;\n  /** The time when the order expires if no action is taken, in ISO 8601 format. */\n  expiresAt?: string;\n  /** The unique identifier of the payment associated with the order. */\n  paymentId?: string;\n  /** A note provided by the buyer when the order was created, if any. */\n  buyerNote?: string;\n  /** A note provided by the merchant when the order's state was set to COMPLETED, if any */\n  completedNote?: string;\n  /** A note provided by the merchant when the order's state was set to REFUNDED, if any. */\n  refundedNote?: string;\n  /** A note provided by the merchant when the order's state was set to CANCELED, if any. */\n  canceledNote?: string;\n  /**\n   * A tender represents a discrete monetary exchange. Square represents this\n   * exchange as a money object with a specific currency and amount, where the\n   * amount is given in the smallest denomination of the given currency.\n   * Square POS can accept more than one form of tender for a single payment (such\n   * as by splitting a bill between a credit card and a gift card). The `tender`\n   * field of the Payment object lists all forms of tender used for the payment.\n   * Split tender payments behave slightly differently from single tender payments:\n   * The receipt_url for a split tender corresponds only to the first tender listed\n   * in the tender field. To get the receipt URLs for the remaining tenders, use\n   * the receipt_url fields of the corresponding Tender objects.\n   * *A note on gift cards**: when a customer purchases a Square gift card from a\n   * merchant, the merchant receives the full amount of the gift card in the\n   * associated payment.\n   * When that gift card is used as a tender, the balance of the gift card is\n   * reduced and the merchant receives no funds. A `Tender` object with a type of\n   * `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the\n   * associated payment.\n   */\n  tender?: V1Tender;\n  /** The history of actions associated with the order. */\n  orderHistory?: V1OrderHistoryEntry[];\n  /** The promo code provided by the buyer, if any. */\n  promoCode?: string;\n  /** For Bitcoin transactions, the address that the buyer sent Bitcoin to. */\n  btcReceiveAddress?: string;\n  /** For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC). */\n  btcPriceSatoshi?: number;\n}\n\nexport const v1OrderSchema: Schema<V1Order> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  id: ['id', optional(string())],\n  buyerEmail: ['buyer_email', optional(string())],\n  recipientName: ['recipient_name', optional(string())],\n  recipientPhoneNumber: ['recipient_phone_number', optional(string())],\n  state: ['state', optional(string())],\n  shippingAddress: ['shipping_address', optional(lazy(() => addressSchema))],\n  subtotalMoney: ['subtotal_money', optional(lazy(() => v1MoneySchema))],\n  totalShippingMoney: [\n    'total_shipping_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  totalTaxMoney: ['total_tax_money', optional(lazy(() => v1MoneySchema))],\n  totalPriceMoney: ['total_price_money', optional(lazy(() => v1MoneySchema))],\n  totalDiscountMoney: [\n    'total_discount_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  createdAt: ['created_at', optional(string())],\n  updatedAt: ['updated_at', optional(string())],\n  expiresAt: ['expires_at', optional(string())],\n  paymentId: ['payment_id', optional(string())],\n  buyerNote: ['buyer_note', optional(string())],\n  completedNote: ['completed_note', optional(string())],\n  refundedNote: ['refunded_note', optional(string())],\n  canceledNote: ['canceled_note', optional(string())],\n  tender: ['tender', optional(lazy(() => v1TenderSchema))],\n  orderHistory: [\n    'order_history',\n    optional(array(lazy(() => v1OrderHistoryEntrySchema))),\n  ],\n  promoCode: ['promo_code', optional(string())],\n  btcReceiveAddress: ['btc_receive_address', optional(string())],\n  btcPriceSatoshi: ['btc_price_satoshi', optional(number())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1PaymentDiscount */\nexport interface V1PaymentDiscount {\n  /** The discount's name. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID. */\n  discountId?: string;\n}\n\nexport const v1PaymentDiscountSchema: Schema<V1PaymentDiscount> = object({\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  discountId: ['discount_id', optional(string())],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1PaymentItemDetail */\nexport interface V1PaymentItemDetail {\n  /** The name of the item's merchant-defined category, if any. */\n  categoryName?: string;\n  /** The item's merchant-defined SKU, if any. */\n  sku?: string;\n  /** The unique ID of the item purchased, if any. */\n  itemId?: string;\n  /** The unique ID of the item variation purchased, if any. */\n  itemVariationId?: string;\n}\n\nexport const v1PaymentItemDetailSchema: Schema<V1PaymentItemDetail> = object({\n  categoryName: ['category_name', optional(string())],\n  sku: ['sku', optional(string())],\n  itemId: ['item_id', optional(string())],\n  itemVariationId: ['item_variation_id', optional(string())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1PaymentModifier */\nexport interface V1PaymentModifier {\n  /** The modifier option's name. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** TThe ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID. */\n  modifierOptionId?: string;\n}\n\nexport const v1PaymentModifierSchema: Schema<V1PaymentModifier> = object({\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  modifierOptionId: ['modifier_option_id', optional(string())],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { Error, errorSchema } from './error';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1PaymentTax */\nexport interface V1PaymentTax {\n  /** Any errors that occurred during the request. */\n  errors?: Error[];\n  /** The merchant-defined name of the tax. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%. */\n  rate?: string;\n  inclusionType?: string;\n  /** The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID. */\n  feeId?: string;\n}\n\nexport const v1PaymentTaxSchema: Schema<V1PaymentTax> = object({\n  errors: ['errors', optional(array(lazy(() => errorSchema)))],\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  rate: ['rate', optional(string())],\n  inclusionType: ['inclusion_type', optional(string())],\n  feeId: ['fee_id', optional(string())],\n});\n","import {\n  array,\n  lazy,\n  number,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1PaymentDiscount,\n  v1PaymentDiscountSchema,\n} from './v1PaymentDiscount';\nimport {\n  V1PaymentItemDetail,\n  v1PaymentItemDetailSchema,\n} from './v1PaymentItemDetail';\nimport {\n  V1PaymentModifier,\n  v1PaymentModifierSchema,\n} from './v1PaymentModifier';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\n\n/**\n * Payment include an` itemizations` field that lists the items purchased,\n * along with associated fees, modifiers, and discounts. Each itemization has an\n * `itemization_type` field that indicates which of the following the itemization\n * represents:\n * <ul>\n * <li>An item variation from the merchant's item library</li>\n * <li>A custom monetary amount</li>\n * <li>\n * An action performed on a Square gift card, such as activating or\n * reloading it.\n * </li>\n * </ul>\n * *Note**: itemization information included in a `Payment` object reflects\n * details collected **at the time of the payment**. Details such as the name or\n * price of items might have changed since the payment was processed.\n */\nexport interface V1PaymentItemization {\n  /** The item's name. */\n  name?: string;\n  /** The quantity of the item purchased. This can be a decimal value. */\n  quantity?: number;\n  itemizationType?: string;\n  /** V1PaymentItemDetail */\n  itemDetail?: V1PaymentItemDetail;\n  /** Notes entered by the merchant about the item at the time of payment, if any. */\n  notes?: string;\n  /** The name of the item variation purchased, if any. */\n  itemVariationName?: string;\n  totalMoney?: V1Money;\n  singleQuantityMoney?: V1Money;\n  grossSalesMoney?: V1Money;\n  discountMoney?: V1Money;\n  netSalesMoney?: V1Money;\n  /** All taxes applied to this itemization. */\n  taxes?: V1PaymentTax[];\n  /** All discounts applied to this itemization. */\n  discounts?: V1PaymentDiscount[];\n  /** All modifier options applied to this itemization. */\n  modifiers?: V1PaymentModifier[];\n}\n\nexport const v1PaymentItemizationSchema: Schema<V1PaymentItemization> = object({\n  name: ['name', optional(string())],\n  quantity: ['quantity', optional(number())],\n  itemizationType: ['itemization_type', optional(string())],\n  itemDetail: ['item_detail', optional(lazy(() => v1PaymentItemDetailSchema))],\n  notes: ['notes', optional(string())],\n  itemVariationName: ['item_variation_name', optional(string())],\n  totalMoney: ['total_money', optional(lazy(() => v1MoneySchema))],\n  singleQuantityMoney: [\n    'single_quantity_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  grossSalesMoney: ['gross_sales_money', optional(lazy(() => v1MoneySchema))],\n  discountMoney: ['discount_money', optional(lazy(() => v1MoneySchema))],\n  netSalesMoney: ['net_sales_money', optional(lazy(() => v1MoneySchema))],\n  taxes: ['taxes', optional(array(lazy(() => v1PaymentTaxSchema)))],\n  discounts: [\n    'discounts',\n    optional(array(lazy(() => v1PaymentDiscountSchema))),\n  ],\n  modifiers: [\n    'modifiers',\n    optional(array(lazy(() => v1PaymentModifierSchema))),\n  ],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\n\n/** V1PaymentSurcharge */\nexport interface V1PaymentSurcharge {\n  /** The name of the surcharge. */\n  name?: string;\n  appliedMoney?: V1Money;\n  /** The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, \"0.7\" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set. */\n  rate?: string;\n  amountMoney?: V1Money;\n  type?: string;\n  /** Indicates whether the surcharge is taxable. */\n  taxable?: boolean;\n  /** The list of taxes that should be applied to the surcharge. */\n  taxes?: V1PaymentTax[];\n  /** A Square-issued unique identifier associated with the surcharge. */\n  surchargeId?: string;\n}\n\nexport const v1PaymentSurchargeSchema: Schema<V1PaymentSurcharge> = object({\n  name: ['name', optional(string())],\n  appliedMoney: ['applied_money', optional(lazy(() => v1MoneySchema))],\n  rate: ['rate', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => v1MoneySchema))],\n  type: ['type', optional(string())],\n  taxable: ['taxable', optional(boolean())],\n  taxes: ['taxes', optional(array(lazy(() => v1PaymentTaxSchema)))],\n  surchargeId: ['surcharge_id', optional(string())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1PaymentSurcharge,\n  v1PaymentSurchargeSchema,\n} from './v1PaymentSurcharge';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\n\n/** V1Refund */\nexport interface V1Refund {\n  type?: string;\n  /** The merchant-specified reason for the refund. */\n  reason?: string;\n  refundedMoney?: V1Money;\n  refundedProcessingFeeMoney?: V1Money;\n  refundedTaxMoney?: V1Money;\n  refundedAdditiveTaxMoney?: V1Money;\n  /** All of the additive taxes associated with the refund. */\n  refundedAdditiveTax?: V1PaymentTax[];\n  refundedInclusiveTaxMoney?: V1Money;\n  /** All of the inclusive taxes associated with the refund. */\n  refundedInclusiveTax?: V1PaymentTax[];\n  refundedTipMoney?: V1Money;\n  refundedDiscountMoney?: V1Money;\n  refundedSurchargeMoney?: V1Money;\n  /** A list of all surcharges associated with the refund. */\n  refundedSurcharges?: V1PaymentSurcharge[];\n  /** The time when the merchant initiated the refund for Square to process, in ISO 8601 format. */\n  createdAt?: string;\n  /** The time when Square processed the refund on behalf of the merchant, in ISO 8601 format. */\n  processedAt?: string;\n  /** A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders. */\n  paymentId?: string;\n  merchantId?: string;\n  /** Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded. */\n  isExchange?: boolean;\n}\n\nexport const v1RefundSchema: Schema<V1Refund> = object({\n  type: ['type', optional(string())],\n  reason: ['reason', optional(string())],\n  refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n  refundedProcessingFeeMoney: [\n    'refunded_processing_fee_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedTaxMoney: ['refunded_tax_money', optional(lazy(() => v1MoneySchema))],\n  refundedAdditiveTaxMoney: [\n    'refunded_additive_tax_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedAdditiveTax: [\n    'refunded_additive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  refundedInclusiveTaxMoney: [\n    'refunded_inclusive_tax_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedInclusiveTax: [\n    'refunded_inclusive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  refundedTipMoney: ['refunded_tip_money', optional(lazy(() => v1MoneySchema))],\n  refundedDiscountMoney: [\n    'refunded_discount_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedSurchargeMoney: [\n    'refunded_surcharge_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  refundedSurcharges: [\n    'refunded_surcharges',\n    optional(array(lazy(() => v1PaymentSurchargeSchema))),\n  ],\n  createdAt: ['created_at', optional(string())],\n  processedAt: ['processed_at', optional(string())],\n  paymentId: ['payment_id', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  isExchange: ['is_exchange', optional(boolean())],\n});\n","import {\n  array,\n  boolean,\n  lazy,\n  object,\n  optional,\n  Schema,\n  string,\n} from '../schema';\nimport { Device, deviceSchema } from './device';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1PaymentItemization,\n  v1PaymentItemizationSchema,\n} from './v1PaymentItemization';\nimport {\n  V1PaymentSurcharge,\n  v1PaymentSurchargeSchema,\n} from './v1PaymentSurcharge';\nimport { V1PaymentTax, v1PaymentTaxSchema } from './v1PaymentTax';\nimport { V1Refund, v1RefundSchema } from './v1Refund';\nimport { V1Tender, v1TenderSchema } from './v1Tender';\n\n/**\n * A payment represents a paid transaction between a Square merchant and a\n * customer. Payment details are usually available from Connect API endpoints\n * within a few minutes after the transaction completes.\n * Each Payment object includes several fields that end in `_money`. These fields\n * describe the various amounts of money that contribute to the payment total:\n * <ul>\n * <li>\n * Monetary values are <b>positive</b> if they represent an\n * <em>increase</em> in the amount of money the merchant receives (e.g.,\n * <code>tax_money</code>, <code>tip_money</code>).\n * </li>\n * <li>\n * Monetary values are <b>negative</b> if they represent an\n * <em>decrease</em> in the amount of money the merchant receives (e.g.,\n * <code>discount_money</code>, <code>refunded_money</code>).\n * </li>\n * </ul>\n */\nexport interface V1Payment {\n  /** The payment's unique identifier. */\n  id?: string;\n  /** The unique identifier of the merchant that took the payment. */\n  merchantId?: string;\n  /** The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise. */\n  createdAt?: string;\n  /** The unique identifier of the Square account that took the payment. */\n  creatorId?: string;\n  device?: Device;\n  /** The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page. */\n  paymentUrl?: string;\n  /**\n   * The URL of the receipt for the payment. Note that for split tender\n   * payments, this URL corresponds to the receipt for the first tender\n   * listed in the payment's tender field. Each Tender object has its own\n   * receipt_url field you can use to get the other receipts associated with\n   * a split tender payment.\n   */\n  receiptUrl?: string;\n  inclusiveTaxMoney?: V1Money;\n  additiveTaxMoney?: V1Money;\n  taxMoney?: V1Money;\n  tipMoney?: V1Money;\n  discountMoney?: V1Money;\n  totalCollectedMoney?: V1Money;\n  processingFeeMoney?: V1Money;\n  netTotalMoney?: V1Money;\n  refundedMoney?: V1Money;\n  swedishRoundingMoney?: V1Money;\n  grossSalesMoney?: V1Money;\n  netSalesMoney?: V1Money;\n  /** All of the inclusive taxes associated with the payment. */\n  inclusiveTax?: V1PaymentTax[];\n  /** All of the additive taxes associated with the payment. */\n  additiveTax?: V1PaymentTax[];\n  /** All of the tenders associated with the payment. */\n  tender?: V1Tender[];\n  /** All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange. */\n  refunds?: V1Refund[];\n  /** The items purchased in the payment. */\n  itemizations?: V1PaymentItemization[];\n  surchargeMoney?: V1Money;\n  /** A list of all surcharges associated with the payment. */\n  surcharges?: V1PaymentSurcharge[];\n  /**\n   * Indicates whether or not the payment is only partially paid for.\n   * If true, this payment will have the tenders collected so far, but the\n   * itemizations will be empty until the payment is completed.\n   */\n  isPartial?: boolean;\n}\n\nexport const v1PaymentSchema: Schema<V1Payment> = object({\n  id: ['id', optional(string())],\n  merchantId: ['merchant_id', optional(string())],\n  createdAt: ['created_at', optional(string())],\n  creatorId: ['creator_id', optional(string())],\n  device: ['device', optional(lazy(() => deviceSchema))],\n  paymentUrl: ['payment_url', optional(string())],\n  receiptUrl: ['receipt_url', optional(string())],\n  inclusiveTaxMoney: [\n    'inclusive_tax_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  additiveTaxMoney: ['additive_tax_money', optional(lazy(() => v1MoneySchema))],\n  taxMoney: ['tax_money', optional(lazy(() => v1MoneySchema))],\n  tipMoney: ['tip_money', optional(lazy(() => v1MoneySchema))],\n  discountMoney: ['discount_money', optional(lazy(() => v1MoneySchema))],\n  totalCollectedMoney: [\n    'total_collected_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  processingFeeMoney: [\n    'processing_fee_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  netTotalMoney: ['net_total_money', optional(lazy(() => v1MoneySchema))],\n  refundedMoney: ['refunded_money', optional(lazy(() => v1MoneySchema))],\n  swedishRoundingMoney: [\n    'swedish_rounding_money',\n    optional(lazy(() => v1MoneySchema)),\n  ],\n  grossSalesMoney: ['gross_sales_money', optional(lazy(() => v1MoneySchema))],\n  netSalesMoney: ['net_sales_money', optional(lazy(() => v1MoneySchema))],\n  inclusiveTax: [\n    'inclusive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  additiveTax: [\n    'additive_tax',\n    optional(array(lazy(() => v1PaymentTaxSchema))),\n  ],\n  tender: ['tender', optional(array(lazy(() => v1TenderSchema)))],\n  refunds: ['refunds', optional(array(lazy(() => v1RefundSchema)))],\n  itemizations: [\n    'itemizations',\n    optional(array(lazy(() => v1PaymentItemizationSchema))),\n  ],\n  surchargeMoney: ['surcharge_money', optional(lazy(() => v1MoneySchema))],\n  surcharges: [\n    'surcharges',\n    optional(array(lazy(() => v1PaymentSurchargeSchema))),\n  ],\n  isPartial: ['is_partial', optional(boolean())],\n});\n","import { lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\n\n/** V1SettlementEntry */\nexport interface V1SettlementEntry {\n  /** The settlement's unique identifier. */\n  paymentId?: string;\n  type?: string;\n  amountMoney?: V1Money;\n  feeMoney?: V1Money;\n}\n\nexport const v1SettlementEntrySchema: Schema<V1SettlementEntry> = object({\n  paymentId: ['payment_id', optional(string())],\n  type: ['type', optional(string())],\n  amountMoney: ['amount_money', optional(lazy(() => v1MoneySchema))],\n  feeMoney: ['fee_money', optional(lazy(() => v1MoneySchema))],\n});\n","import { array, lazy, object, optional, Schema, string } from '../schema';\nimport { V1Money, v1MoneySchema } from './v1Money';\nimport {\n  V1SettlementEntry,\n  v1SettlementEntrySchema,\n} from './v1SettlementEntry';\n\n/** V1Settlement */\nexport interface V1Settlement {\n  /** The settlement's unique identifier. */\n  id?: string;\n  status?: string;\n  totalMoney?: V1Money;\n  /** The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format. */\n  initiatedAt?: string;\n  /** The Square-issued unique identifier for the bank account associated with the settlement. */\n  bankAccountId?: string;\n  /** The entries included in this settlement. */\n  entries?: V1SettlementEntry[];\n}\n\nexport const v1SettlementSchema: Schema<V1Settlement> = object({\n  id: ['id', optional(string())],\n  status: ['status', optional(string())],\n  totalMoney: ['total_money', optional(lazy(() => v1MoneySchema))],\n  initiatedAt: ['initiated_at', optional(string())],\n  bankAccountId: ['bank_account_id', optional(string())],\n  entries: ['entries', optional(array(lazy(() => v1SettlementEntrySchema)))],\n});\n","import { object, optional, Schema, string } from '../schema';\n\n/** V1UpdateOrderRequest */\nexport interface V1UpdateOrderRequest {\n  action: string;\n  /** The tracking number of the shipment associated with the order. Only valid if action is COMPLETE. */\n  shippedTrackingNumber?: string;\n  /** A merchant-specified note about the completion of the order. Only valid if action is COMPLETE. */\n  completedNote?: string;\n  /** A merchant-specified note about the refunding of the order. Only valid if action is REFUND. */\n  refundedNote?: string;\n  /** A merchant-specified note about the canceling of the order. Only valid if action is CANCEL. */\n  canceledNote?: string;\n}\n\nexport const v1UpdateOrderRequestSchema: Schema<V1UpdateOrderRequest> = object({\n  action: ['action', string()],\n  shippedTrackingNumber: ['shipped_tracking_number', optional(string())],\n  completedNote: ['completed_note', optional(string())],\n  refundedNote: ['refunded_note', optional(string())],\n  canceledNote: ['canceled_note', optional(string())],\n});\n","import { ApiResponse } from '../apiResponse';\nimport { RequestOptions } from '../http/requestBuilder';\nimport { V1BankAccount, v1BankAccountSchema } from '../models/v1BankAccount';\nimport {\n  V1CreateRefundRequest,\n  v1CreateRefundRequestSchema,\n} from '../models/v1CreateRefundRequest';\nimport { V1Order, v1OrderSchema } from '../models/v1Order';\nimport { V1Payment, v1PaymentSchema } from '../models/v1Payment';\nimport { V1Refund, v1RefundSchema } from '../models/v1Refund';\nimport { V1Settlement, v1SettlementSchema } from '../models/v1Settlement';\nimport {\n  V1UpdateOrderRequest,\n  v1UpdateOrderRequestSchema,\n} from '../models/v1UpdateOrderRequest';\nimport { array, boolean, number, optional, string } from '../schema';\nimport { BaseApi } from './baseApi';\n\nexport class V1TransactionsApi extends BaseApi {\n  /**\n   * Provides non-confidential details for all of a location's associated bank accounts. This endpoint\n   * does not provide full bank account numbers, and there is no way to obtain a full bank account number\n   * with the Connect API.\n   *\n   * @param locationId  The ID of the location to list bank accounts for.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async listBankAccounts(\n    locationId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1BankAccount[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({ locationId: [locationId, string()] });\n    req.appendTemplatePath`/v1/${mapped.locationId}/bank-accounts`;\n    req.deprecated('V1TransactionsApi.listBankAccounts');\n    return req.callAsJson(array(v1BankAccountSchema), requestOptions);\n  }\n\n  /**\n   * Provides non-confidential details for a merchant's associated bank account. This endpoint does not\n   * provide full bank account numbers, and there is no way to obtain a full bank account number with the\n   * Connect API.\n   *\n   * @param locationId      The ID of the bank account's associated location.\n   * @param bankAccountId   The bank account's Square-issued ID. You obtain this value from Settlement\n   *                                  objects returned.\n   * @return Response from the API call\n   * @deprecated\n   */\n  async retrieveBankAccount(\n    locationId: string,\n    bankAccountId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1BankAccount>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      bankAccountId: [bankAccountId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/bank-accounts/${mapped.bankAccountId}`;\n    req.deprecated('V1TransactionsApi.retrieveBankAccount');\n    return req.callAsJson(v1BankAccountSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for a merchant's online store orders.\n   *\n   * @param locationId  The ID of the location to list online store orders for.\n   * @param order       TThe order in which payments are listed in the response.\n   * @param limit       The maximum number of payments to return in a single response. This value cannot\n   *                              exceed 200.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   */\n  async listOrders(\n    locationId: string,\n    order?: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Order[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/orders`;\n    return req.callAsJson(array(v1OrderSchema), requestOptions);\n  }\n\n  /**\n   * Provides comprehensive information for a single online store order, including the order's history.\n   *\n   * @param locationId  The ID of the order's associated location.\n   * @param orderId     The order's Square-issued ID. You obtain this value from Order objects returned by\n   *                              the List Orders endpoint\n   * @return Response from the API call\n   */\n  async retrieveOrder(\n    locationId: string,\n    orderId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Order>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      orderId: [orderId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/orders/${mapped.orderId}`;\n    return req.callAsJson(v1OrderSchema, requestOptions);\n  }\n\n  /**\n   * Updates the details of an online store order. Every update you perform on an order corresponds to\n   * one of three actions:\n   *\n   * @param locationId  The ID of the order's associated location.\n   * @param orderId     The order's Square-issued ID. You obtain this value from Order\n   *                                                   objects returned by the List Orders endpoint\n   * @param body        An object containing the fields to POST for the request.  See\n   *                                                   the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async updateOrder(\n    locationId: string,\n    orderId: string,\n    body: V1UpdateOrderRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Order>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      orderId: [orderId, string()],\n      body: [body, v1UpdateOrderRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/orders/${mapped.orderId}`;\n    return req.callAsJson(v1OrderSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all payments taken for a given\n   * Square account during a date range. Date ranges cannot exceed 1 year in\n   * length. See Date ranges for details of inclusive and exclusive dates.\n   *\n   * *Note**: Details for payments processed with Square Point of Sale while\n   * in offline mode may not be transmitted to Square for up to 72 hours.\n   * Offline payments have a `created_at` value that reflects the time the\n   * payment was originally processed, not the time it was subsequently\n   * transmitted to Square. Consequently, the ListPayments endpoint might\n   * list an offline payment chronologically between online payments that\n   * were seen in a previous request.\n   *\n   * @param locationId      The ID of the location to list payments for. If you specify me, this endpoint\n   *                                   returns payments aggregated from all of the business's locations.\n   * @param order           The order in which payments are listed in the response.\n   * @param beginTime       The beginning of the requested reporting period, in ISO 8601 format. If this\n   *                                   value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an\n   *                                   error. Default value: The current time minus one year.\n   * @param endTime         The end of the requested reporting period, in ISO 8601 format. If this value is\n   *                                   more than one year greater than begin_time, this endpoint returns an error.\n   *                                   Default value: The current time.\n   * @param limit           The maximum number of payments to return in a single response. This value\n   *                                   cannot exceed 200.\n   * @param batchToken      A pagination cursor to retrieve the next set of results for your original query\n   *                                   to the endpoint.\n   * @param includePartial  Indicates whether or not to include partial payments in the response. Partial\n   *                                   payments will have the tenders collected so far, but the itemizations will be\n   *                                   empty until the payment is completed.\n   * @return Response from the API call\n   */\n  async listPayments(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    batchToken?: string,\n    includePartial?: boolean,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Payment[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n      includePartial: [includePartial, optional(boolean())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.query('include_partial', mapped.includePartial);\n    req.appendTemplatePath`/v1/${mapped.locationId}/payments`;\n    return req.callAsJson(array(v1PaymentSchema), requestOptions);\n  }\n\n  /**\n   * Provides comprehensive information for a single payment.\n   *\n   * @param locationId  The ID of the payment's associated location.\n   * @param paymentId   The Square-issued payment ID. payment_id comes from Payment objects returned by the\n   *                              List Payments endpoint, Settlement objects returned by the List Settlements endpoint,\n   *                              or Refund objects returned by the List Refunds endpoint.\n   * @return Response from the API call\n   */\n  async retrievePayment(\n    locationId: string,\n    paymentId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Payment>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      paymentId: [paymentId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/payments/${mapped.paymentId}`;\n    return req.callAsJson(v1PaymentSchema, requestOptions);\n  }\n\n  /**\n   * Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff\n   * during a date range. Date ranges cannot exceed one year in length.\n   *\n   * @param locationId  The ID of the location to list refunds for.\n   * @param order       TThe order in which payments are listed in the response.\n   * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value\n   *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.\n   *                              Default value: The current time minus one year.\n   * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more\n   *                              than one year greater than begin_time, this endpoint returns an error. Default value:\n   *                              The current time.\n   * @param limit       The approximate number of refunds to return in a single response. Default: 100. Max:\n   *                              200. Response may contain more results than the prescribed limit when refunds are\n   *                              made simultaneously to multiple tenders in a payment or when refunds are generated in\n   *                              an exchange to account for the value of returned goods.\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   */\n  async listRefunds(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Refund[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/refunds`;\n    return req.callAsJson(array(v1RefundSchema), requestOptions);\n  }\n\n  /**\n   * Issues a refund for a previously processed payment. You must issue\n   * a refund within 60 days of the associated payment.\n   *\n   * You cannot issue a partial refund for a split tender payment. You must\n   * instead issue a full or partial refund for a particular tender, by\n   * providing the applicable tender id to the V1CreateRefund endpoint.\n   * Issuing a full refund for a split tender payment refunds all tenders\n   * associated with the payment.\n   *\n   * Issuing a refund for a card payment is not reversible. For development\n   * purposes, you can create fake cash payments in Square Point of Sale and\n   * refund them.\n   *\n   * @param locationId  The ID of the original payment's associated location.\n   * @param body        An object containing the fields to POST for the request.  See\n   *                                                    the corresponding object definition for field details.\n   * @return Response from the API call\n   */\n  async createRefund(\n    locationId: string,\n    body: V1CreateRefundRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Refund>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      body: [body, v1CreateRefundRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/v1/${mapped.locationId}/refunds`;\n    return req.callAsJson(v1RefundSchema, requestOptions);\n  }\n\n  /**\n   * Provides summary information for all deposits and withdrawals\n   * initiated by Square to a linked bank account during a date range. Date\n   * ranges cannot exceed one year in length.\n   *\n   * *Note**: the ListSettlements endpoint does not provide entry\n   * information.\n   *\n   * @param locationId  The ID of the location to list settlements for. If you specify me, this endpoint\n   *                              returns settlements aggregated from all of the business's locations.\n   * @param order       The order in which settlements are listed in the response.\n   * @param beginTime   The beginning of the requested reporting period, in ISO 8601 format. If this value\n   *                              is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error.\n   *                              Default value: The current time minus one year.\n   * @param endTime     The end of the requested reporting period, in ISO 8601 format. If this value is more\n   *                              than one year greater than begin_time, this endpoint returns an error. Default value:\n   *                              The current time.\n   * @param limit       The maximum number of settlements to return in a single response. This value cannot\n   *                              exceed 200.\n   * @param status      Provide this parameter to retrieve only settlements with a particular status (SENT\n   *                              or FAILED).\n   * @param batchToken  A pagination cursor to retrieve the next set of results for your original query to\n   *                              the endpoint.\n   * @return Response from the API call\n   */\n  async listSettlements(\n    locationId: string,\n    order?: string,\n    beginTime?: string,\n    endTime?: string,\n    limit?: number,\n    status?: string,\n    batchToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Settlement[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      order: [order, optional(string())],\n      beginTime: [beginTime, optional(string())],\n      endTime: [endTime, optional(string())],\n      limit: [limit, optional(number())],\n      status: [status, optional(string())],\n      batchToken: [batchToken, optional(string())],\n    });\n    req.query('order', mapped.order);\n    req.query('begin_time', mapped.beginTime);\n    req.query('end_time', mapped.endTime);\n    req.query('limit', mapped.limit);\n    req.query('status', mapped.status);\n    req.query('batch_token', mapped.batchToken);\n    req.appendTemplatePath`/v1/${mapped.locationId}/settlements`;\n    return req.callAsJson(array(v1SettlementSchema), requestOptions);\n  }\n\n  /**\n   * Provides comprehensive information for a single settlement.\n   *\n   * The returned `Settlement` objects include an `entries` field that lists\n   * the transactions that contribute to the settlement total. Most\n   * settlement entries correspond to a payment payout, but settlement\n   * entries are also generated for less common events, like refunds, manual\n   * adjustments, or chargeback holds.\n   *\n   * Square initiates its regular deposits as indicated in the\n   * [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)\n   * help article. Details for a regular deposit are usually not available\n   * from Connect API endpoints before 10 p.m. PST the same day.\n   *\n   * Square does not know when an initiated settlement **completes**, only\n   * whether it has failed. A completed settlement is typically reflected in\n   * a bank account within 3 business days, but in exceptional cases it may\n   * take longer.\n   *\n   * @param locationId    The ID of the settlements's associated location.\n   * @param settlementId  The settlement's Square-issued ID. You obtain this value from Settlement objects\n   *                                returned by the List Settlements endpoint.\n   * @return Response from the API call\n   */\n  async retrieveSettlement(\n    locationId: string,\n    settlementId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<V1Settlement>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      locationId: [locationId, string()],\n      settlementId: [settlementId, string()],\n    });\n    req.appendTemplatePath`/v1/${mapped.locationId}/settlements/${mapped.settlementId}`;\n    return req.callAsJson(v1SettlementSchema, requestOptions);\n  }\n}\n","/**\n * Set a header in the headers map.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n * @param value Header value\n */\nexport function setHeader(\n  headers: Record<string, string>,\n  name: string,\n  value?: string\n): void {\n  const realHeaderName = lookupCaseInsensitive(headers, name);\n  setHeaderInternal(headers, realHeaderName, name, value);\n}\n\nfunction setHeaderInternal(\n  headers: Record<string, string>,\n  realHeaderName: string | null,\n  name: string,\n  value: string | undefined\n): void {\n  if (realHeaderName) {\n    delete headers[realHeaderName];\n  }\n  if (value) {\n    headers[name] = value;\n  }\n}\n\n/**\n * Set a header in the headers map if it is not already set.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n * @param value Header value\n */\nexport function setHeaderIfNotSet(\n  headers: Record<string, string>,\n  name: string,\n  value?: string\n): void {\n  const realHeaderName = lookupCaseInsensitive(headers, name);\n  if (!realHeaderName) {\n    setHeaderInternal(headers, realHeaderName, name, value);\n  }\n}\n\n/**\n * Get header from a map of headers.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n */\nexport function getHeader(\n  headers: Record<string, string>,\n  name: string\n): string | null {\n  const prop = lookupCaseInsensitive(headers, name);\n  if (prop) {\n    return headers[prop];\n  }\n  return null;\n}\n\n/**\n * Looks up and returns the matching property name from the object.\n *\n * This method returns the matching property name in the object which might or might\n * not have the same case as the prop argument.\n *\n * @param obj Object with string property names\n * @param prop Property to lookup\n */\nexport function lookupCaseInsensitive(\n  obj: Record<string, unknown>,\n  prop: string\n): string | null {\n  prop = prop.toLowerCase();\n  for (const p in obj) {\n    if (\n      Object.prototype.hasOwnProperty.call(obj, p) &&\n      prop === p.toLowerCase()\n    ) {\n      return p;\n    }\n  }\n  return null;\n}\n\n/**\n * Merge headers\n *\n * Header names are compared using case-insensitive comparison. This method\n * preserves the original header name. If the headersToMerge overrides an existing\n * header, then the new header name (with its casing) is used.\n *\n * @param headers Headers to merge into\n * @param headersToMerge Headers to set\n */\nexport function mergeHeaders(\n  headers: Record<string, string>,\n  headersToMerge: Record<string, string>\n): void {\n  const headerKeys: Record<string, string> = {};\n\n  // Create a map of lower-cased-header-name to original-header-names\n  for (const headerName of Object.getOwnPropertyNames(headers)) {\n    headerKeys[headerName.toLowerCase()] = headerName;\n  }\n\n  // Override headers with new values\n  for (const headerName of Object.getOwnPropertyNames(headersToMerge)) {\n    const lowerCasedName = headerName.toLowerCase();\n    if (headerKeys[lowerCasedName]) {\n      delete headers[headerKeys[lowerCasedName]];\n    }\n    headerKeys[lowerCasedName] = headerName;\n    headers[headerName] = headersToMerge[headerName];\n  }\n}\n\n/**\n * Assert headers object is valid\n */\nexport function assertHeaders(\n  headers: unknown\n): asserts headers is Record<string, string> {\n  if (headers === null || typeof headers !== 'object') {\n    throw new TypeError('Headers must be an object.');\n  }\n\n  for (const headerName of Object.getOwnPropertyNames(headers)) {\n    if (!isValidHeaderName(headerName)) {\n      throw new Error(`\"${headerName}\" is not a valid header name.`);\n    }\n    const headerValue = (headers as Record<string, unknown>)[headerName];\n    if (typeof headerValue !== 'string') {\n      throw new TypeError(\n        `Header value must be string but ${typeof headerValue} provided.`\n      );\n    }\n  }\n}\n\n/**\n * Return true if header name is valid\n * @param headerName Header name\n */\nexport function isValidHeaderName(headerName: string): boolean {\n  return /^[\\w!#$%&'*+.^`|~-]+$/.test(headerName);\n}\n\nexport const CONTENT_TYPE_HEADER = 'content-type';\nexport const ACCEPT_HEADER = 'accept';\nexport const CONTENT_LENGTH_HEADER = 'content-length';\nexport const AUTHORIZATION_HEADER = 'authorization';\nexport const FORM_URLENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nexport const JSON_CONTENT_TYPE = 'application/json';\nexport const TEXT_CONTENT_TYPE = 'text/plain; charset=utf-8';\nexport const XML_CONTENT_TYPE = 'application/xml';\n","import { HttpContext } from './httpContext';\nimport { HttpRequest } from './httpRequest';\n\n/**\n * Interface for a method that executes an HTTP request and returns the HTTP context.\n *\n * The context contains the HTTP response and the HTTP request (which may or may not be the same\n * as the original HTTP request).\n */\nexport type HttpCallExecutor<T> = (\n  request: HttpRequest,\n  requestOptions: T\n) => Promise<HttpContext>;\n\n/**\n * Interface representing an HTTP interceptor method.\n *\n * HTTP interceptors are used to extend the HTTP call pipeline with new behavior or\n * features.\n *\n * An HTTP interceptor receives an HTTP request. It can modify the\n * HTTP request and then pass it along to the next HTTP interceptor in the chain which\n * then returns an HTTP response. It then returns this HTTP response, after optionally\n * modifying it.\n */\nexport interface HttpInterceptorInterface<T> {\n  (request: HttpRequest, requestOptions: T, next: HttpCallExecutor<T>): Promise<\n    HttpContext\n  >;\n}\n\n/**\n * Calls HTTP interceptor chain\n *\n * @param interceptors HTTP interceptor chain\n * @param client Terminating HTTP handler\n */\nexport function callHttpInterceptors<T>(\n  interceptors: HttpInterceptorInterface<T>[],\n  client: HttpCallExecutor<T>\n): HttpCallExecutor<T> {\n  let next = client;\n  for (let index = interceptors.length - 1; index >= 0; index--) {\n    const current = interceptors[index];\n    const last = next;\n    next = (request, options) => current(request, options, last);\n  }\n  return next;\n}\n\n/** Pass-through HTTP interceptor. */\nexport function passThroughInterceptor<T>(\n  request: HttpRequest,\n  requestOptions: T,\n  next: HttpCallExecutor<T>\n): Promise<HttpContext> {\n  return next(request, requestOptions);\n}\n","import { AUTHORIZATION_HEADER, setHeader } from './http/httpHeaders';\nimport { passThroughInterceptor } from './http/httpInterceptor';\nimport { AuthenticatorInterface } from './http/requestBuilder';\n\n/** None authentication provider */\nexport const noneAuthenticationProvider = () => passThroughInterceptor;\n\nexport const accessTokenAuthenticationProvider = ({\n  accessToken,\n}: {\n  accessToken: string;\n}): AuthenticatorInterface<boolean> => {\n  return (requiresAuth?: boolean) => {\n    if (!requiresAuth) {\n      return passThroughInterceptor;\n    }\n\n    return (request, options, next) => {\n      request.headers = request.headers ?? {};\n      setHeader(request.headers, AUTHORIZATION_HEADER, `Bearer ${accessToken}`);\n\n      return next(request, options);\n    };\n  };\n};\n","/** An interface for all configuration parameters required by the SDK. */\nexport interface Configuration {\n  timeout: number;\n  additionalHeaders: Readonly<Record<string, string>>;\n  environment: Environment;\n  accessToken: string;\n  unstable_httpClientOptions?: any;\n}\n\n/** Environments available for API */\nexport enum Environment {\n  Production = 'production',\n  Sandbox = 'sandbox',\n}\n","import { Configuration, Environment } from './configuration';\n\n/** Default values for the configuration parameters of the client. */\nexport const DEFAULT_CONFIGURATION: Configuration = {\n  timeout: 60000,\n  additionalHeaders: {},\n  environment: Environment.Production,\n  accessToken: 'TODO access token',\n};\n","import { HttpContext } from '../http/httpContext';\nimport { HttpRequest } from '../http/httpRequest';\nimport { ApiResponse } from '../apiResponse';\nimport { Error as SquareError } from '../models/error';\n\n/**\n * Thrown when the HTTP status code is not okay.\n *\n * The ApiError extends the ApiResponse interface, so all ApiResponse\n * properties are available.\n */\nexport class ApiError<T = {}> extends Error\n  implements ApiResponse<T | undefined> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: T | undefined;\n  public body: string | Blob | NodeJS.ReadableStream;\n  public errors?: SquareError[];\n\n  constructor(context: HttpContext, message: string) {\n    super(message);\n\n    const { request, response } = context;\n    this.request = request;\n    this.statusCode = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.body;\n\n    if (typeof response.body === 'string' && response.body !== '') {\n      try {\n        this.result = JSON.parse(response.body);\n\n        if (typeof this.result === 'object') {\n          const result = this.result as Record<string, unknown>;\n          if ('errors' in result) {\n            this.errors = result['errors'] as SquareError[];\n          } else {\n            this.errors = [\n              {\n                category: 'V1_ERROR',\n                code: (result['type'] as string) ?? 'Unknown',\n                detail: result['message'] as string,\n                field: result['field'] as string,\n              },\n            ];\n          }\n        }\n      } catch (error) {\n        if (__DEV__) {\n          if (console) {\n            console.warn(\n              `Unexpected error: Could not parse HTTP response body as JSON. ${error.message}`\n            );\n          }\n        }\n      }\n    }\n  }\n}\n","import warning from 'tiny-warning';\n\n/**\n * Validates the protocol and removes duplicate forward slashes\n *\n * @param url URL to clean\n * @returns Sanitized URL\n */\nexport function sanitizeUrl(url: string): string {\n  // ensure that the urls are absolute\n  const protocolRegex = /^https?:\\/\\/[^/]+/;\n  const match = url.match(protocolRegex);\n  if (match === null) {\n    throw new Error(`Invalid URL format: ${url}`);\n  }\n\n  // remove redundant double-forward slashes\n  const protocol = match[0];\n  const queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, '/');\n  return protocol + queryUrl;\n}\n\n/**\n * Check whether value is an instance of Blob\n *\n * @remark\n * Reference: https://github.com/sindresorhus/is-blob/blob/master/index.js\n *\n * @param value Value to check\n * @returns True if the value is a Blob instance\n */\nexport function isBlob(value: unknown): value is Blob {\n  if (typeof Blob === 'undefined') {\n    return false;\n  }\n\n  return (\n    value instanceof Blob ||\n    Object.prototype.toString.call(value) === '[object Blob]'\n  );\n}\n\n// This is used by deprecated() to keep track of \"hits\".\nconst deprecatedHits: Record<string, boolean> = {};\n\n/**\n * Create warning for deprecated method usage.\n *\n * This is called once per deprecated method. If this method is called again\n * with the same arguments, no warning is generated.\n *\n * @param methodName Method name for deprecated method\n * @param notice Optional message for deprecation\n */\nexport function deprecated(methodName: string, notice?: string): void {\n  let message = `Method ${methodName} is deprecated.`;\n  if (notice) {\n    message += ` ${notice}`;\n  }\n  if (deprecatedHits[message]) {\n    return;\n  }\n  deprecatedHits[message] = true;\n  warning(false, message);\n}\n","/**\n * Thrown when the API call is aborted by the caller.\n *\n * Note that when an AbortError is thrown, it is not a guarantee that the API call\n * did not go through.\n */\nexport class AbortError extends Error {}\n","/**\n * Wraps file with mime-type and filename to be sent as part of an HTTP request.\n */\nexport class FileWrapper {\n  constructor(\n    public file: Blob | import('stream').Readable,\n    public options?: FileWrapperOptions\n  ) {\n    this.file = file;\n  }\n}\n\n/** File upload options such as filename and mime-type */\ninterface FileWrapperOptions {\n  /** Mime-type to be sent with the file */\n  contentType?: string;\n  /** Name of the file to be used in the upload data */\n  filename?: string;\n  /** Headers to be used in the multipart request */\n  headers?: Record<string, string>;\n}\n\n/** Returns true if value is a FileWrapper */\nexport function isFileWrapper(value: unknown): value is FileWrapper {\n  return value instanceof FileWrapper;\n}\n\n/**\n * Returns a deep clone of the FileWrapper instance\n *\n * @param fileWrapper FileWrapper instance to copy\n */\nexport function cloneFileWrapper(fileWrapper: FileWrapper): FileWrapper {\n  let options: FileWrapperOptions | undefined;\n  if (fileWrapper.options) {\n    options = cloneFileWrapperOptions(fileWrapper.options);\n  }\n  return new FileWrapper(fileWrapper.file, options);\n}\n\nfunction cloneFileWrapperOptions(\n  fileWrapperOptions: FileWrapperOptions\n): FileWrapperOptions {\n  const clone = { ...fileWrapperOptions };\n  if (fileWrapperOptions.headers) {\n    clone.headers = { ...fileWrapperOptions.headers };\n  }\n  return clone;\n}\n","import { FileWrapper, isFileWrapper, cloneFileWrapper } from '../fileWrapper';\n\n/**\n * Type for Key-value pair for form-urlencoded serialization\n */\nexport type FormKeyValuePair = { key: string; value: string | FileWrapper };\n\n/**\n * Type for list of key-value pairs for form-urlencoded serialization\n */\nexport type FormKeyValuePairList = FormKeyValuePair[];\n\n/**\n * Type for formatting function used to create key for nested arrays\n */\nexport type ArrayPrefixFunction = (\n  prefix: string,\n  key: number | string\n) => string;\n\n/**\n * Array prefix format: item[1]=1&item[2]=2\n */\nexport const indexedPrefix: ArrayPrefixFunction = (prefix, key) =>\n  `${prefix}[${key}]`;\n\n/**\n * Array prefix format: item[]=1&item[]=2\n */\nexport const unindexedPrefix: ArrayPrefixFunction = prefix => prefix + '[]';\n\n/**\n * Array prefix format: item=1&item=2\n */\nexport const plainPrefix: ArrayPrefixFunction = prefix => prefix;\n\n/**\n * Converts an object to a list of key-value pairs for form-urlencoded serialization.\n *\n * @param obj The object to serialize\n * @param prefixFormat Formatting function to create key for nested arrays\n * @return Result of serialization\n */\nexport function formDataEncodeObject(\n  obj: Record<string, unknown>,\n  prefixFormat: ArrayPrefixFunction = indexedPrefix\n): FormKeyValuePairList {\n  const result: FormKeyValuePairList = [];\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    if (value === null || value === undefined) {\n      continue;\n    } else if (\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      typeof value === 'boolean' ||\n      typeof value === 'bigint'\n    ) {\n      result.push({ key, value: value.toString() });\n    } else if (isFileWrapper(value)) {\n      result.push({ key, value: cloneFileWrapper(value) });\n    } else if (Array.isArray(value)) {\n      for (let iter = 0; iter < value.length; iter += 1) {\n        result.push(\n          ...formDataEncodeObject({ [prefixFormat(key, iter)]: value[iter] })\n        );\n      }\n    } else if (typeof value === 'object') {\n      for (const objectKey in value) {\n        if (Object.prototype.hasOwnProperty.call(value, objectKey)) {\n          const element = value[objectKey as keyof typeof value];\n          result.push(\n            ...formDataEncodeObject({\n              [indexedPrefix(key, objectKey)]: element,\n            })\n          );\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Return a new list with all key-value pairs, which have a FileWrapper as value, removed\n *\n * @param params List of key-value pairs\n */\nexport function filterFileWrapperFromKeyValuePairs(\n  params: FormKeyValuePairList\n): { key: string; value: string }[] {\n  return params.filter(p => !isFileWrapper(p.value)) as any;\n}\n\n/**\n * Serializes an object for a form-urlencoded request.\n *\n * Nested and complex types in values will be flattened using {@link formDataEncodeObject() function} method.\n *\n * @param  obj The object to be serialized\n * @return The result of serialization\n */\nexport function urlEncodeObject(obj: Record<string, unknown>): string {\n  const params = formDataEncodeObject(obj);\n  return urlEncodeKeyValuePairs(params);\n}\n\n/**\n * Serializes a list of key-value pairs for a form-urlencoded request.\n *\n * @param params List of key-value pairs to serialize\n * @return The result of serialization\n */\nexport function urlEncodeKeyValuePairs(\n  params: FormKeyValuePairList | undefined\n): string {\n  const encode = encodeURIComponent;\n  return (params || [])\n    .map(p => `${encode(p.key)}=${encode(p.value.toString())}`)\n    .join('&');\n}\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport isNode from 'detect-node';\nimport FormData from 'form-data';\nimport { isBlob } from '../apiHelper';\nimport { AbortError } from '../errors/abortError';\nimport { isFileWrapper } from '../fileWrapper';\nimport {\n  CONTENT_TYPE_HEADER,\n  FORM_URLENCODED_CONTENT_TYPE,\n  mergeHeaders,\n  setHeader,\n  setHeaderIfNotSet,\n} from './httpHeaders';\nimport { HttpRequest } from './httpRequest';\nimport { HttpResponse } from './httpResponse';\nimport { urlEncodeKeyValuePairs } from './queryString';\n\nexport const DEFAULT_AXIOS_CONFIG_OVERRIDES: AxiosRequestConfig = {\n  transformResponse: [],\n};\n\nexport const DEFAULT_TIMEOUT = 30 * 1000;\n\n/**\n * HTTP client implementation.\n *\n * This implementation is a wrapper over the Axios client.\n */\nexport class HttpClient {\n  private _axiosInstance: AxiosInstance;\n  private _timeout: number;\n\n  constructor({\n    clientConfigOverrides,\n    timeout = DEFAULT_TIMEOUT,\n  }: { clientConfigOverrides?: AxiosRequestConfig; timeout?: number } = {}) {\n    this._timeout = timeout;\n    this._axiosInstance = axios.create({\n      ...DEFAULT_AXIOS_CONFIG_OVERRIDES,\n      ...clientConfigOverrides,\n    });\n  }\n\n  /** Converts an HttpRequest object to an Axios request. */\n  public convertHttpRequest(req: HttpRequest): AxiosRequestConfig {\n    const newRequest: AxiosRequestConfig = {\n      method: req.method,\n      url: req.url,\n      responseType: 'text',\n      headers: { ...req.headers },\n    };\n\n    if (req.auth) {\n      // Set basic auth credentials if provided\n      newRequest.auth = {\n        username: req.auth.username,\n        password: req.auth.password || '',\n      };\n    }\n\n    const requestBody = req.body;\n    if (requestBody?.type === 'text') {\n      newRequest.data = requestBody.content;\n    } else if (\n      requestBody?.type === 'form-data' &&\n      requestBody.content.some(item => isFileWrapper(item.value))\n    ) {\n      // Create multipart request if a file is present\n      const form = new FormData();\n      for (const iter of requestBody.content) {\n        if (isFileWrapper(iter.value)) {\n          let fileData = iter.value.file;\n\n          // Make sure Blob has the correct content type if provided\n          if (isBlob(fileData) && iter.value.options?.contentType) {\n            fileData = new Blob([fileData], {\n              type: iter.value.options.contentType,\n            });\n          }\n\n          form.append(iter.key, fileData, iter.value.options);\n        } else {\n          form.append(iter.key, iter.value);\n        }\n      }\n\n      newRequest.data = form;\n      mergeHeaders(newRequest.headers, form.getHeaders());\n    } else if (\n      requestBody?.type === 'form-data' ||\n      requestBody?.type === 'form'\n    ) {\n      // Create form-urlencoded request\n      setHeader(\n        newRequest.headers,\n        CONTENT_TYPE_HEADER,\n        FORM_URLENCODED_CONTENT_TYPE\n      );\n      newRequest.data = urlEncodeKeyValuePairs(requestBody.content);\n    } else if (requestBody?.type === 'stream') {\n      let contentType = 'application/octet-stream';\n      if (isBlob(requestBody.content.file) && requestBody.content.file.type) {\n        // Set Blob mime type as the content-type header if present\n        contentType = requestBody.content.file.type;\n      } else if (requestBody.content.options?.contentType) {\n        // Otherwise, use the content type if available.\n        contentType = requestBody.content.options.contentType;\n      }\n      setHeaderIfNotSet(newRequest.headers, CONTENT_TYPE_HEADER, contentType);\n      newRequest.data = requestBody.content.file;\n    } else if (requestBody?.type !== undefined) {\n      throw new Error(\n        `HTTP client encountered unknown body type '${requestBody?.type}'. Could not execute HTTP request.`\n      );\n    }\n\n    if (req.responseType === 'stream') {\n      newRequest.responseType = isNode ? 'stream' : 'blob';\n    }\n\n    // Prevent superagent from converting any status code to error\n    newRequest.validateStatus = () => true;\n\n    // Set 30 seconds timeout\n    newRequest.timeout = this._timeout;\n\n    return newRequest;\n  }\n\n  /** Converts an Axios response to an HttpResponse object. */\n  public convertHttpResponse(resp: AxiosResponse): HttpResponse {\n    return {\n      body: resp.data,\n      headers: resp.headers,\n      statusCode: resp.status,\n    };\n  }\n\n  /**\n   * Executes the HttpRequest with the given options and returns the HttpResponse\n   * or throws an error.\n   */\n  public async executeRequest(\n    request: HttpRequest,\n    requestOptions?: { abortSignal?: AbortSignal }\n  ): Promise<HttpResponse> {\n    const axiosRequest = this.convertHttpRequest(request);\n\n    if (requestOptions?.abortSignal) {\n      // throw if already aborted; do not place HTTP call\n      if (requestOptions.abortSignal.aborted) {\n        throw this.abortError();\n      }\n\n      const cancelToken = axios.CancelToken.source();\n      axiosRequest.cancelToken = cancelToken.token;\n\n      // attach abort event handler\n      requestOptions.abortSignal.addEventListener('abort', () => {\n        cancelToken.cancel();\n      });\n    }\n\n    try {\n      return this.convertHttpResponse(await this._axiosInstance(axiosRequest));\n    } catch (error) {\n      // abort error should be thrown as the AbortError\n      if (axios.isCancel(error)) {\n        throw this.abortError();\n      }\n\n      throw error;\n    }\n  }\n\n  private abortError() {\n    return new AbortError('The HTTP call was aborted.');\n  }\n}\n","import { SchemaValidationError } from '../schema';\n\n/**\n * Thrown when one or more arguments passed to a method fail validation.\n */\nexport class ArgumentsValidationError extends Error {\n  public readonly errors: Record<string, SchemaValidationError[]>;\n  constructor(errors: Record<string, SchemaValidationError[]>) {\n    const errorKeys = Object.keys(errors);\n\n    let message: string;\n    if (errorKeys.length === 0) {\n      message = 'One or more arguments failed validation.';\n    } else if (errorKeys.length === 1 && errors[errorKeys[0]].length === 1) {\n      message = `Argument for '${errorKeys[0]}' failed validation.\\n\\n${\n        errors[errorKeys[0]][0].message\n      }`;\n    } else {\n      message = `The following arguments failed validation: ${errorKeys.join(\n        ', '\n      )}.\\n\\n`;\n\n      const msgList: string[] = [];\n      for (const param of errorKeys) {\n        msgList.push(`> For argument '${param}':`);\n        if (errors[param].length === 1) {\n          msgList.push(errors[param][0].message!);\n        } else {\n          for (let index = 0; index < errors[param].length; index++) {\n            const error = errors[param][index];\n            msgList.push(`>> Issue #${index + 1}\\n\\n${error.message}`);\n          }\n        }\n      }\n\n      message += msgList.join('\\n\\n');\n    }\n\n    super(message);\n    this.errors = errors;\n  }\n}\n","import { HttpRequest } from '../http/httpRequest';\nimport { ApiResponse } from '../apiResponse';\nimport { SchemaValidationError } from '../schema';\n\n/**\n * Thrown when the API response does not match the schema.\n */\nexport class ResponseValidationError extends Error\n  implements ApiResponse<never> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: never;\n  public body: string | Blob | NodeJS.ReadableStream;\n  public errors: SchemaValidationError[];\n\n  constructor(apiResponse: ApiResponse<any>, errors: SchemaValidationError[]) {\n    let message = 'The response did not match the response schema.';\n\n    if (errors.length === 1) {\n      message += `\\n\\n${errors[0].message}`;\n    } else {\n      message += errors\n        .map((e, i) => `\\n\\n> Issue #${i + 1}\\n\\n${e.message}`)\n        .join('');\n    }\n\n    super(message);\n\n    this.request = apiResponse.request;\n    this.statusCode = apiResponse.statusCode;\n    this.headers = apiResponse.headers;\n    this.body = apiResponse.body;\n    this.errors = errors;\n  }\n}\n","import flatMap from 'lodash.flatmap';\n\n/** Marker for skipping URL-encoding when used with Path templating */\nexport class SkipEncode<T extends PathTemplatePrimitiveTypes> {\n  constructor(public value: T) {}\n}\n\nexport type PathTemplatePrimitiveTypes = string | string[] | number | number[];\n\n/** Path template argument type */\nexport type PathTemplateTypes =\n  | PathTemplatePrimitiveTypes\n  | SkipEncode<PathTemplatePrimitiveTypes>;\n\n/**\n * URL path templating method.\n *\n * Template arguments of array type are imploded using the path separator and\n * individual elements are URL-encoded.\n *\n * Template arguments are URL-encoded unless wrapped in a SkipEncode instance.\n */\nexport function pathTemplate(\n  strings: TemplateStringsArray,\n  ...args: PathTemplateTypes[]\n) {\n  const values = flatMap(\n    interweaveArrays(\n      strings.map(s => new SkipEncode(s)),\n      args\n    ),\n    encodePathTemplateSegment\n  );\n  const pathSegment = values.join('');\n  return pathSegment;\n}\n\nfunction encodePathTemplateSegment(value: PathTemplateTypes) {\n  let skipEncode = false;\n  const encode = (m: string | number) =>\n    skipEncode ? m.toString() : encodeURIComponent(m);\n  if (value instanceof SkipEncode) {\n    value = value.value;\n    skipEncode = true;\n  }\n  return Array.isArray(value)\n    ? (value as Array<string | number>).map<string | number>(encode).join('/')\n    : [encode(value)];\n}\n\nfunction interweaveArrays<A, B>(\n  a: ReadonlyArray<A>,\n  b: ReadonlyArray<B>\n): Array<A | B> {\n  const min = Math.min(a.length, b.length);\n  return Array.apply(null, new Array(min))\n    .reduce((result: Array<A | B>, _, index) => {\n      result.push(a[index], b[index]);\n      return result;\n    }, [])\n    .concat((a.length > min ? a : b).slice(min));\n}\n","import {\n  Schema,\n  SchemaMappedType,\n  SchemaType,\n  SchemaValidationError,\n  validateAndUnmap,\n} from '../schema';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError';\n\n/**\n * Prepares arguments for being sent in the API request.\n *\n * Each argument is validated and converted to a JSON-serialization ready value.\n *\n * If one or more arguments fail validation, an ArgumentsValidationError is\n * thrown, which contains the validation details for all arguments that failed\n * validation.\n *\n * @param params Map of arguments with values and schema\n * @returns Map of serialization-ready argument values\n *\n * @throws ArgumentsValidationError\n */\nexport function prepareArgs<\n  S extends Schema<any, any>,\n  T extends Record<string, [SchemaType<S>, S]>\n>(params: T): { [key in keyof T]: SchemaMappedType<T[key][1]> } {\n  const validationErrors: Record<string, SchemaValidationError[]> = {};\n  const result: Partial<{ [key in keyof T]: SchemaMappedType<T[key][1]> }> = {};\n\n  for (const paramName in params) {\n    if (Object.prototype.hasOwnProperty.call(params, paramName)) {\n      const paramInfo = params[paramName];\n      const validationResult = validateAndUnmap(paramInfo[0], paramInfo[1]);\n      if (validationResult.errors) {\n        validationErrors[paramName] = validationResult.errors;\n      } else {\n        result[paramName] = validationResult.result;\n      }\n    }\n  }\n\n  if (Object.keys(validationErrors).length > 0) {\n    throw new ArgumentsValidationError(validationErrors);\n  }\n\n  return result as any;\n}\n","export function xmlSerialize(_rootName: string, _value: unknown): string {\n  throw new Error('XML serialization is not available.');\n}\n\nexport async function xmlDeserialize(\n  _rootName: string,\n  _xmlString: string\n): Promise<any> {\n  throw new Error('XML deserialization is not available.');\n}\n","import isNode from 'detect-node';\nimport { FileWrapper } from '../fileWrapper';\nimport { deprecated, sanitizeUrl } from '../apiHelper';\nimport { ApiResponse } from '../apiResponse';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError';\nimport { ResponseValidationError } from '../errors/responseValidationError';\nimport {\n  Schema,\n  validateAndMap,\n  validateAndMapXml,\n  validateAndUnmapXml,\n} from '../schema';\nimport { HttpContext } from './httpContext';\nimport {\n  ACCEPT_HEADER,\n  CONTENT_LENGTH_HEADER,\n  CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE,\n  mergeHeaders,\n  setHeader,\n  setHeaderIfNotSet,\n  TEXT_CONTENT_TYPE,\n  XML_CONTENT_TYPE,\n} from './httpHeaders';\nimport {\n  callHttpInterceptors,\n  HttpInterceptorInterface,\n} from './httpInterceptor';\nimport {\n  HttpMethod,\n  HttpRequest,\n  HttpRequestMultipartFormBody,\n  HttpRequestUrlEncodedFormBody,\n} from './httpRequest';\nimport { HttpResponse } from './httpResponse';\nimport {\n  pathTemplate,\n  PathTemplatePrimitiveTypes,\n  PathTemplateTypes,\n  SkipEncode,\n} from './pathTemplate';\nimport {\n  filterFileWrapperFromKeyValuePairs,\n  formDataEncodeObject,\n  urlEncodeObject,\n} from './queryString';\nimport { prepareArgs } from './validate';\nimport { xmlDeserialize, xmlSerialize } from './xmlSerialization';\n\nexport interface RequestBuilderFactory<BaseUrlParamType, AuthParams> {\n  (httpMethod: HttpMethod, path?: string): RequestBuilder<\n    BaseUrlParamType,\n    AuthParams\n  >;\n}\n\ntype QueryValue =\n  | string\n  | string[]\n  | number\n  | number[]\n  | boolean\n  | null\n  | undefined;\n\nexport function skipEncode<T extends PathTemplatePrimitiveTypes>(\n  value: T\n): SkipEncode<T> {\n  return new SkipEncode(value);\n}\n\n/** Optional API call options such as the Abort Signal. */\nexport interface RequestOptions {\n  /**\n   * Allows cancelling the API call using an Abort Signal.\n   *\n   * This must be set to an instance compatible with the\n   * [WHATWG AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal). The\n   * AbortSignal comes built-in in modern browsers and can be polyfilled for older browser versions\n   * and Node.js using the\n   * [abort-controller](https://github.com/mysticatea/abort-controller) package.\n   */\n  abortSignal?: AbortSignal;\n}\n\nexport interface HttpClientInterface {\n  (request: HttpRequest, requestOptions?: RequestOptions): Promise<\n    HttpResponse\n  >;\n}\n\nexport interface ApiErrorConstructor {\n  new (response: HttpContext, message: string): any;\n}\n\nexport interface AuthenticatorInterface<AuthParams> {\n  (authParams?: AuthParams): HttpInterceptorInterface<\n    RequestOptions | undefined\n  >;\n}\n\nexport interface RequestBuilder<BaseUrlParamType, AuthParams> {\n  deprecated(methodName: string, message?: string): void;\n  prepareArgs: typeof prepareArgs;\n  method(httpMethodName: HttpMethod): void;\n  baseUrl(arg: BaseUrlParamType): void;\n  authenticate(params: AuthParams): void;\n  appendPath(path: string): void;\n  appendTemplatePath(\n    strings: TemplateStringsArray,\n    ...args: Array<PathTemplateTypes>\n  ): void;\n  acceptJson(): void;\n  accept(acceptHeaderValue: string): void;\n  contentType(contentTypeHeaderValue: string): void;\n  header(name: string, value?: string | boolean | number): void;\n  headers(headersToMerge: Record<string, string>): void;\n  query(name: string, value: QueryValue): void;\n  query(parameters?: Record<string, QueryValue> | null): void;\n  form(parameters: Record<string, unknown>): void;\n  formData(parameters: Record<string, unknown>): void;\n  text(body: string): void;\n  json(data: unknown): void;\n  xml<T>(\n    argName: string,\n    data: T,\n    rootName: string,\n    schema: Schema<T, any>\n  ): void;\n  stream(file?: FileWrapper): void;\n  toRequest(): HttpRequest;\n  intercept(\n    interceptor: HttpInterceptorInterface<RequestOptions | undefined>\n  ): void;\n  interceptRequest(interceptor: (request: HttpRequest) => HttpRequest): void;\n  interceptResponse(interceptor: (response: HttpContext) => HttpContext): void;\n  defaultToError(apiErrorCtor: ApiErrorConstructor): void;\n  validateResponse(validate: boolean): void;\n  throwOn<ErrorCtorArgs extends any[]>(\n    statusCode: number | [number, number],\n    errorConstructor: {\n      new (response: HttpContext, ...args: ErrorCtorArgs): any;\n    },\n    ...args: ErrorCtorArgs\n  ): void;\n  call(requestOptions?: RequestOptions): Promise<ApiResponse<void>>;\n  callAsJson<T>(\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n  callAsStream(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>>;\n  callAsText(requestOptions?: RequestOptions): Promise<ApiResponse<string>>;\n  callAsOptionalText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string | undefined>>;\n  callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n  callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n}\n\nexport class DefaultRequestBuilder<BaseUrlParamType, AuthParams>\n  implements RequestBuilder<BaseUrlParamType, AuthParams> {\n  protected _accept?: string;\n  protected _contentType?: string;\n  protected _headers: Record<string, string>;\n  protected _body?: string;\n  protected _stream?: FileWrapper;\n  protected _query: string[];\n  protected _form?: HttpRequestUrlEncodedFormBody['content'];\n  protected _formData?: HttpRequestMultipartFormBody['content'];\n  protected _baseUrlArg: BaseUrlParamType | undefined;\n  protected _validateResponse: boolean;\n  protected _interceptors: HttpInterceptorInterface<\n    RequestOptions | undefined\n  >[];\n  protected _authParams?: AuthParams;\n  public prepareArgs: typeof prepareArgs;\n\n  constructor(\n    protected _httpClient: HttpClientInterface,\n    protected _baseUrlProvider: (arg?: BaseUrlParamType) => string,\n    protected _apiErrorFactory: ApiErrorConstructor,\n    protected _authenticationProvider: AuthenticatorInterface<AuthParams>,\n    protected _httpMethod: HttpMethod,\n    protected _path?: string\n  ) {\n    this._headers = {};\n    this._query = [];\n    this._interceptors = [];\n    this._validateResponse = true;\n    this._addResponseValidator();\n    this._addAuthentication();\n    this.prepareArgs = prepareArgs.bind(this);\n  }\n  authenticate(params: AuthParams): void {\n    this._authParams = params;\n  }\n  deprecated(methodName: string, message?: string): void {\n    deprecated(methodName, message);\n  }\n  appendTemplatePath(\n    strings: TemplateStringsArray,\n    ...args: Array<PathTemplateTypes>\n  ): void {\n    const pathSegment = pathTemplate(strings, ...args);\n    this.appendPath(pathSegment);\n  }\n  method(httpMethodName: HttpMethod): void {\n    this._httpMethod = httpMethodName;\n  }\n  baseUrl(arg: BaseUrlParamType): void {\n    this._baseUrlArg = arg;\n  }\n  appendPath(path: string): void {\n    this._path = this._path ? mergePath(this._path, path) : path;\n  }\n  acceptJson(): void {\n    this._accept = JSON_CONTENT_TYPE;\n  }\n  accept(acceptHeaderValue: string): void {\n    this._accept = acceptHeaderValue;\n  }\n  contentType(contentTypeHeaderValue: string): void {\n    this._contentType = contentTypeHeaderValue;\n  }\n  header(name: string, value?: string | boolean | number): void {\n    if (value === undefined) {\n      return;\n    }\n    setHeader(this._headers, name, value.toString());\n  }\n  headers(headersToMerge: Record<string, string>): void {\n    mergeHeaders(this._headers, headersToMerge);\n  }\n  query(name: string, value: QueryValue): void;\n  query(parameters?: Record<string, QueryValue> | null): void;\n  query(\n    nameOrParameters: string | Record<string, QueryValue> | null | undefined,\n    value?: unknown\n  ): void {\n    if (nameOrParameters === null || nameOrParameters === undefined) return;\n    const queryString =\n      typeof nameOrParameters === 'string'\n        ? urlEncodeObject({\n            [nameOrParameters]: value,\n          })\n        : urlEncodeObject(nameOrParameters);\n    if (queryString) {\n      this._query.push(queryString);\n    }\n  }\n  text(body: string): void {\n    this._body = body;\n    this._setContentTypeIfNotSet(TEXT_CONTENT_TYPE);\n  }\n  json(data: unknown): void {\n    this._body = JSON.stringify(data);\n    this._setContentTypeIfNotSet(JSON_CONTENT_TYPE);\n  }\n  xml<T>(\n    argName: string,\n    data: T,\n    rootName: string,\n    schema: Schema<T, any>\n  ): void {\n    const mappingResult = validateAndUnmapXml(data, schema);\n    if (mappingResult.errors) {\n      throw new ArgumentsValidationError({ [argName]: mappingResult.errors });\n    }\n    this._body = xmlSerialize(rootName, mappingResult.result);\n    this._setContentTypeIfNotSet(XML_CONTENT_TYPE);\n  }\n  stream(file?: FileWrapper): void {\n    this._stream = file;\n  }\n  form(parameters: Record<string, unknown>): void {\n    this._form = filterFileWrapperFromKeyValuePairs(\n      formDataEncodeObject(parameters)\n    );\n  }\n  formData(parameters: Record<string, unknown>): void {\n    this._formData = formDataEncodeObject(parameters);\n  }\n  toRequest(): HttpRequest {\n    const request: HttpRequest = {\n      method: this._httpMethod,\n      url: mergePath(this._baseUrlProvider(this._baseUrlArg), this._path),\n    };\n\n    if (this._query.length > 0) {\n      const queryString = this._query.join('&');\n      request.url +=\n        (request.url.indexOf('?') === -1 ? '?' : '&') + queryString;\n    }\n\n    request.url = sanitizeUrl(request.url);\n\n    // defensively copy headers\n    const headers = { ...this._headers };\n\n    if (this._accept) {\n      setHeader(headers, ACCEPT_HEADER, this._accept);\n    }\n\n    if (this._contentType) {\n      setHeader(headers, CONTENT_TYPE_HEADER, this._contentType);\n    }\n\n    setHeader(headers, CONTENT_LENGTH_HEADER);\n\n    request.headers = headers;\n\n    if (this._body !== undefined) {\n      request.body = { type: 'text', content: this._body };\n    } else if (this._form !== undefined) {\n      request.body = { type: 'form', content: this._form };\n    } else if (this._formData !== undefined) {\n      request.body = { type: 'form-data', content: this._formData };\n    } else if (this._stream !== undefined) {\n      request.body = { type: 'stream', content: this._stream };\n    }\n\n    return request;\n  }\n  intercept(\n    interceptor: HttpInterceptorInterface<RequestOptions | undefined>\n  ): void {\n    this._interceptors.push(interceptor);\n  }\n  interceptRequest(\n    interceptor: (httpRequest: HttpRequest) => HttpRequest\n  ): void {\n    this.intercept((req, opt, next) => next(interceptor(req), opt));\n  }\n  interceptResponse(interceptor: (response: HttpContext) => HttpContext): void {\n    this.intercept(async (req, opt, next) => interceptor(await next(req, opt)));\n  }\n  defaultToError(apiErrorCtor: ApiErrorConstructor): void {\n    this._apiErrorFactory = apiErrorCtor;\n  }\n  validateResponse(validate: boolean): void {\n    this._validateResponse = validate;\n  }\n  throwOn<ErrorCtorArgs extends any[]>(\n    statusCode: number | [number, number],\n    errorConstructor: {\n      new (response: HttpContext, ...args: ErrorCtorArgs): any;\n    },\n    ...args: ErrorCtorArgs\n  ): void {\n    this.interceptResponse(context => {\n      const { response } = context;\n      if (\n        (typeof statusCode === 'number' &&\n          response.statusCode === statusCode) ||\n        (typeof statusCode !== 'number' &&\n          response.statusCode >= statusCode[0] &&\n          response.statusCode <= statusCode[1])\n      ) {\n        throw new errorConstructor(context, ...args);\n      }\n      return context;\n    });\n  }\n  async call(requestOptions?: RequestOptions): Promise<ApiResponse<void>> {\n    // Prepare the HTTP pipeline\n    const pipeline = callHttpInterceptors(\n      this._interceptors,\n      async (request, opt) => {\n        const response = await this._httpClient(request, opt);\n        return { request, response };\n      }\n    );\n\n    // Execute HTTP pipeline\n    const { request, response } = await pipeline(\n      this.toRequest(),\n      requestOptions\n    );\n\n    return { ...response, request, result: undefined };\n  }\n  async callAsText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string>> {\n    const result = await this.call(requestOptions);\n    if (typeof result.body !== 'string') {\n      throw new Error('Could not parse body as string.'); // TODO: Replace with SDK error\n    }\n    return { ...result, result: result.body };\n  }\n  async callAsOptionalText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string | undefined>> {\n    const result = await this.call(requestOptions);\n    if (typeof result.body !== 'string') {\n      return { ...result, result: undefined };\n    }\n    return { ...result, result: result.body };\n  }\n  async callAsStream(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {\n    this.interceptRequest(req => ({ ...req, responseType: 'stream' }));\n    const result = await this.call(requestOptions);\n    return { ...result, result: convertToStream(result.body) };\n  }\n  async callAsJson<T>(\n    schema: Schema<T>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    this.interceptRequest(request => {\n      const headers = { ...request.headers };\n      setHeaderIfNotSet(headers, ACCEPT_HEADER, JSON_CONTENT_TYPE);\n      return { ...request, headers };\n    });\n    const result = await this.call(requestOptions);\n    if (result.body === '') {\n      throw new Error(\n        'Could not parse body as JSON. The response body is empty.'\n      );\n    }\n    if (typeof result.body !== 'string') {\n      throw new Error(\n        'Could not parse body as JSON. The response body is not a string.'\n      );\n    }\n    let parsed: unknown;\n    try {\n      parsed = JSON.parse(result.body);\n    } catch (error) {\n      throw new Error(`Could not parse body as JSON.\\n\\n${error.message}`);\n    }\n    const mappingResult = validateAndMap(parsed, schema);\n    if (mappingResult.errors) {\n      throw new ResponseValidationError(result, mappingResult.errors);\n    }\n    return { ...result, result: mappingResult.result };\n  }\n  async callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    this.interceptRequest(request => {\n      const headers = { ...request.headers };\n      setHeaderIfNotSet(headers, ACCEPT_HEADER, XML_CONTENT_TYPE);\n      return { ...request, headers };\n    });\n    const result = await this.call(requestOptions);\n    if (result.body === '') {\n      throw new Error(\n        'Could not parse body as XML. The response body is empty.'\n      );\n    }\n    if (typeof result.body !== 'string') {\n      throw new Error(\n        'Could not parse body as XML. The response body is not a string.'\n      );\n    }\n    let xmlObject: unknown;\n    try {\n      xmlObject = await xmlDeserialize(rootName, result.body);\n    } catch (error) {\n      throw new Error(`Could not parse body as XML.\\n\\n${error.message}`);\n    }\n    const mappingResult = validateAndMapXml(xmlObject, schema);\n    if (mappingResult.errors) {\n      throw new ResponseValidationError(result, mappingResult.errors);\n    }\n    return { ...result, result: mappingResult.result };\n  }\n  private _setContentTypeIfNotSet(contentType: string) {\n    if (!this._contentType) {\n      setHeaderIfNotSet(this._headers, CONTENT_TYPE_HEADER, contentType);\n    }\n  }\n  private _addResponseValidator(): void {\n    this.interceptResponse(context => {\n      const { response } = context;\n      if (\n        this._validateResponse &&\n        (response.statusCode < 200 || response.statusCode >= 300)\n      ) {\n        throw new this._apiErrorFactory(\n          context,\n          `Response status code was not ok: ${response.statusCode}.`\n        );\n      }\n      return context;\n    });\n  }\n  private _addAuthentication() {\n    this.intercept((...args) => {\n      const handler = this._authenticationProvider(this._authParams);\n      return handler(...args);\n    });\n  }\n}\n\nexport function createRequestBuilderFactory<BaseUrlParamType, AuthParams>(\n  httpClient: HttpClientInterface,\n  baseUrlProvider: (arg?: BaseUrlParamType) => string,\n  apiErrorFactory: ApiErrorConstructor,\n  authenticationProvider: AuthenticatorInterface<AuthParams>\n): RequestBuilderFactory<BaseUrlParamType, AuthParams> {\n  return (httpMethod, path?) => {\n    return new DefaultRequestBuilder(\n      httpClient,\n      baseUrlProvider,\n      apiErrorFactory,\n      authenticationProvider,\n      httpMethod,\n      path\n    );\n  };\n}\n\nfunction mergePath(left: string, right?: string): string {\n  if (!right || right === '') {\n    return left;\n  }\n\n  if (left[left.length - 1] === '/' && right[0] === '/') {\n    return left + right.substr(1);\n  } else if (left[left.length - 1] === '/' || right[0] === '/') {\n    return left + right;\n  } else {\n    return `${left}/${right}`;\n  }\n}\n\nexport function convertToStream(\n  content: string | Blob | NodeJS.ReadableStream\n): Blob | NodeJS.ReadableStream {\n  if (typeof content !== 'string') {\n    return content;\n  }\n\n  if (isNode) {\n    // ref: https://stackoverflow.com/a/22085851\n    const rs = new (require('stream').Readable)();\n    rs._read = () => {};\n    rs.push(content);\n    rs.push(null);\n    return rs;\n  }\n\n  return new Blob([content]);\n}\n","import { ApplePayApi } from './api/applePayApi';\nimport { BankAccountsApi } from './api/bankAccountsApi';\nimport { BookingsApi } from './api/bookingsApi';\nimport { CashDrawersApi } from './api/cashDrawersApi';\nimport { CatalogApi } from './api/catalogApi';\nimport { CheckoutApi } from './api/checkoutApi';\nimport { CustomerGroupsApi } from './api/customerGroupsApi';\nimport { CustomersApi } from './api/customersApi';\nimport { CustomerSegmentsApi } from './api/customerSegmentsApi';\nimport { DevicesApi } from './api/devicesApi';\nimport { DisputesApi } from './api/disputesApi';\nimport { EmployeesApi } from './api/employeesApi';\nimport { InventoryApi } from './api/inventoryApi';\nimport { InvoicesApi } from './api/invoicesApi';\nimport { LaborApi } from './api/laborApi';\nimport { LocationsApi } from './api/locationsApi';\nimport { LoyaltyApi } from './api/loyaltyApi';\nimport { MerchantsApi } from './api/merchantsApi';\nimport { MobileAuthorizationApi } from './api/mobileAuthorizationApi';\nimport { OAuthApi } from './api/oAuthApi';\nimport { OrdersApi } from './api/ordersApi';\nimport { PaymentsApi } from './api/paymentsApi';\nimport { RefundsApi } from './api/refundsApi';\nimport { SubscriptionsApi } from './api/subscriptionsApi';\nimport { TeamApi } from './api/teamApi';\nimport { TerminalApi } from './api/terminalApi';\nimport { TransactionsApi } from './api/transactionsApi';\nimport { V1EmployeesApi } from './api/v1EmployeesApi';\nimport { V1ItemsApi } from './api/v1ItemsApi';\nimport { V1LocationsApi } from './api/v1LocationsApi';\nimport { V1TransactionsApi } from './api/v1TransactionsApi';\nimport { accessTokenAuthenticationProvider } from './authentication';\nimport {\n  AuthParams,\n  ClientInterface,\n  SdkRequestBuilder,\n  SdkRequestBuilderFactory,\n  Server,\n} from './clientInterface';\nimport { Configuration, Environment } from './configuration';\nimport { DEFAULT_CONFIGURATION } from './defaultConfiguration';\nimport { ApiError } from './errors/apiError';\nimport { HttpClient } from './http/httpClient';\nimport { assertHeaders, mergeHeaders } from './http/httpHeaders';\nimport {\n  AuthenticatorInterface,\n  createRequestBuilderFactory,\n  HttpClientInterface,\n} from './http/requestBuilder';\n\n/** Current SDK version */\nexport const SDK_VERSION = '7.0.0';\nconst USER_AGENT = 'Square-TypeScript-SDK/7.0.0';\n\nexport class Client implements ClientInterface {\n  private _config: Readonly<Configuration>;\n  private _requestBuilderFactory: SdkRequestBuilderFactory;\n\n  public readonly applePayApi: ApplePayApi;\n  public readonly bankAccountsApi: BankAccountsApi;\n  public readonly bookingsApi: BookingsApi;\n  public readonly cashDrawersApi: CashDrawersApi;\n  public readonly catalogApi: CatalogApi;\n  public readonly checkoutApi: CheckoutApi;\n  public readonly customerGroupsApi: CustomerGroupsApi;\n  public readonly customersApi: CustomersApi;\n  public readonly customerSegmentsApi: CustomerSegmentsApi;\n  public readonly devicesApi: DevicesApi;\n  public readonly disputesApi: DisputesApi;\n  public readonly employeesApi: EmployeesApi;\n  public readonly inventoryApi: InventoryApi;\n  public readonly invoicesApi: InvoicesApi;\n  public readonly laborApi: LaborApi;\n  public readonly locationsApi: LocationsApi;\n  public readonly loyaltyApi: LoyaltyApi;\n  public readonly merchantsApi: MerchantsApi;\n  public readonly mobileAuthorizationApi: MobileAuthorizationApi;\n  public readonly oAuthApi: OAuthApi;\n  public readonly ordersApi: OrdersApi;\n  public readonly paymentsApi: PaymentsApi;\n  public readonly refundsApi: RefundsApi;\n  public readonly subscriptionsApi: SubscriptionsApi;\n  public readonly teamApi: TeamApi;\n  public readonly terminalApi: TerminalApi;\n  public readonly transactionsApi: TransactionsApi;\n  public readonly v1EmployeesApi: V1EmployeesApi;\n  public readonly v1ItemsApi: V1ItemsApi;\n  public readonly v1LocationsApi: V1LocationsApi;\n  public readonly v1TransactionsApi: V1TransactionsApi;\n\n  constructor(config?: Partial<Configuration>) {\n    this._config = {\n      ...DEFAULT_CONFIGURATION,\n      ...config,\n    };\n    this._requestBuilderFactory = createRequestHandlerFactory(\n      server => getBaseUri(server, this._config),\n      accessTokenAuthenticationProvider(this._config),\n      new HttpClient({\n        timeout: this._config.timeout,\n        clientConfigOverrides: this._config.unstable_httpClientOptions,\n      }),\n      [\n        withErrorHandlers,\n        withUserAgent,\n        withAdditionalHeaders(this._config),\n        withAuthenticationByDefault,\n      ]\n    );\n\n    this.applePayApi = new ApplePayApi(this);\n    this.bankAccountsApi = new BankAccountsApi(this);\n    this.bookingsApi = new BookingsApi(this);\n    this.cashDrawersApi = new CashDrawersApi(this);\n    this.catalogApi = new CatalogApi(this);\n    this.checkoutApi = new CheckoutApi(this);\n    this.customerGroupsApi = new CustomerGroupsApi(this);\n    this.customersApi = new CustomersApi(this);\n    this.customerSegmentsApi = new CustomerSegmentsApi(this);\n    this.devicesApi = new DevicesApi(this);\n    this.disputesApi = new DisputesApi(this);\n    this.employeesApi = new EmployeesApi(this);\n    this.inventoryApi = new InventoryApi(this);\n    this.invoicesApi = new InvoicesApi(this);\n    this.laborApi = new LaborApi(this);\n    this.locationsApi = new LocationsApi(this);\n    this.loyaltyApi = new LoyaltyApi(this);\n    this.merchantsApi = new MerchantsApi(this);\n    this.mobileAuthorizationApi = new MobileAuthorizationApi(this);\n    this.oAuthApi = new OAuthApi(this);\n    this.ordersApi = new OrdersApi(this);\n    this.paymentsApi = new PaymentsApi(this);\n    this.refundsApi = new RefundsApi(this);\n    this.subscriptionsApi = new SubscriptionsApi(this);\n    this.teamApi = new TeamApi(this);\n    this.terminalApi = new TerminalApi(this);\n    this.transactionsApi = new TransactionsApi(this);\n    this.v1EmployeesApi = new V1EmployeesApi(this);\n    this.v1ItemsApi = new V1ItemsApi(this);\n    this.v1LocationsApi = new V1LocationsApi(this);\n    this.v1TransactionsApi = new V1TransactionsApi(this);\n  }\n\n  public getRequestBuilderFactory(): SdkRequestBuilderFactory {\n    return this._requestBuilderFactory;\n  }\n\n  /**\n   * Clone this client and override given configuration options\n   */\n  public withConfiguration(config: Partial<Configuration>) {\n    return new Client({ ...this._config, ...config });\n  }\n}\n\nfunction createHttpClientAdapter(client: HttpClient): HttpClientInterface {\n  return async (request, requestOptions) => {\n    return await client.executeRequest(request, requestOptions);\n  };\n}\n\nfunction getBaseUri(server: Server = 'default', config: Configuration): string {\n  if (config.environment === Environment.Production) {\n    if (server === 'default') {\n      return 'https://connect.squareup.com';\n    }\n  }\n  if (config.environment === Environment.Sandbox) {\n    if (server === 'default') {\n      return 'https://connect.squareupsandbox.com';\n    }\n  }\n  throw new Error('Could not get Base URL. Invalid environment or server.');\n}\n\nfunction createRequestHandlerFactory(\n  baseUrlProvider: (server?: Server) => string,\n  authProvider: AuthenticatorInterface<AuthParams>,\n  httpClient: HttpClient,\n  addons: ((rb: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  const requestBuilderFactory = createRequestBuilderFactory(\n    createHttpClientAdapter(httpClient),\n    baseUrlProvider,\n    ApiError,\n    authProvider\n  );\n\n  return tap(requestBuilderFactory, ...addons);\n}\n\nfunction tap(\n  requestBuilderFactory: SdkRequestBuilderFactory,\n  ...callback: ((requestBuilder: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  return (...args) => {\n    const requestBuilder = requestBuilderFactory(...args);\n    callback.forEach(c => c(requestBuilder));\n    return requestBuilder;\n  };\n}\n\nfunction withErrorHandlers(rb: SdkRequestBuilder) {\n  rb.defaultToError(ApiError);\n}\n\nfunction withAdditionalHeaders({\n  additionalHeaders,\n}: {\n  additionalHeaders: Readonly<Record<string, string>>;\n}) {\n  const clone = { ...additionalHeaders };\n  assertHeaders(clone);\n  return (rb: SdkRequestBuilder) => {\n    rb.interceptRequest(request => {\n      const headers = request.headers ?? {};\n      mergeHeaders(headers, clone);\n      return { ...request, headers };\n    });\n  };\n}\n\nfunction withUserAgent(rb: SdkRequestBuilder) {\n  rb.header('user-agent', USER_AGENT);\n}\n\nfunction withAuthenticationByDefault(rb: SdkRequestBuilder) {\n  rb.authenticate(true);\n}\n"],"names":["undefined","registerDomainRequestSchema","object","domainName","string","errorSchema","category","code","detail","optional","field","registerDomainResponseSchema","errors","array","lazy","status","BaseApi","client","createRequest","getRequestBuilderFactory","ApplePayApi","registerDomain","body","requestOptions","req","mapped","prepareArgs","json","callAsJson","bankAccountSchema","id","accountNumberSuffix","country","currency","accountType","holderName","primaryBankIdentificationNumber","secondaryBankIdentificationNumber","debitMandateReferenceId","referenceId","locationId","creditable","boolean","debitable","fingerprint","version","number","bankName","getBankAccountByV1IdResponseSchema","bankAccount","getBankAccountResponseSchema","listBankAccountsResponseSchema","bankAccounts","cursor","BankAccountsApi","listBankAccounts","limit","query","getBankAccountByV1Id","v1BankAccountId","appendTemplatePath","getBankAccount","bankAccountId","appointmentSegmentSchema","durationMinutes","serviceVariationId","teamMemberId","serviceVariationVersion","bookingSchema","createdAt","updatedAt","startAt","customerId","customerNote","sellerNote","appointmentSegments","createBookingRequestSchema","idempotencyKey","booking","createBookingResponseSchema","teamMemberBookingProfileSchema","description","displayName","isBookable","profileImageUrl","listTeamMemberBookingProfilesResponseSchema","teamMemberBookingProfiles","retrieveBookingResponseSchema","moneySchema","amount","businessAppointmentSettingsSchema","locationTypes","alignmentTime","minBookingLeadTimeSeconds","maxBookingLeadTimeSeconds","anyTeamMemberBookingEnabled","multipleServiceBookingEnabled","maxAppointmentsPerDayLimitType","maxAppointmentsPerDayLimit","cancellationWindowSeconds","cancellationFeeMoney","cancellationPolicy","cancellationPolicyText","skipBookingFlowStaffSelection","businessBookingProfileSchema","sellerId","bookingEnabled","customerTimezoneChoice","bookingPolicy","allowUserCancel","businessAppointmentSettings","retrieveBusinessBookingProfileResponseSchema","businessBookingProfile","retrieveTeamMemberBookingProfileResponseSchema","teamMemberBookingProfile","filterValueSchema","all","any","none","segmentFilterSchema","teamMemberIdFilter","timeRangeSchema","endAt","searchAvailabilityFilterSchema","startAtRange","segmentFilters","bookingId","searchAvailabilityQuerySchema","filter","searchAvailabilityRequestSchema","availabilitySchema","searchAvailabilityResponseSchema","availabilities","updateBookingRequestSchema","updateBookingResponseSchema","BookingsApi","createBooking","searchAvailability","retrieveBusinessBookingProfile","listTeamMemberBookingProfiles","bookableOnly","retrieveTeamMemberBookingProfile","retrieveBooking","updateBooking","cashDrawerShiftEventSchema","employeeId","eventType","eventMoney","listCashDrawerShiftEventsResponseSchema","events","cashDrawerShiftSummarySchema","state","openedAt","endedAt","closedAt","openedCashMoney","expectedCashMoney","closedCashMoney","listCashDrawerShiftsResponseSchema","items","cashDrawerDeviceSchema","name","cashDrawerShiftSchema","employeeIds","openingEmployeeId","endingEmployeeId","closingEmployeeId","cashPaymentMoney","cashRefundsMoney","cashPaidInMoney","cashPaidOutMoney","device","retrieveCashDrawerShiftResponseSchema","cashDrawerShift","CashDrawersApi","listCashDrawerShifts","sortOrder","beginTime","endTime","retrieveCashDrawerShift","shiftId","listCashDrawerShiftEvents","batchDeleteCatalogObjectsRequestSchema","objectIds","batchDeleteCatalogObjectsResponseSchema","deletedObjectIds","deletedAt","batchRetrieveCatalogObjectsRequestSchema","includeRelatedObjects","catalogCategorySchema","catalogCustomAttributeDefinitionNumberConfigSchema","precision","catalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelectionSchema","uid","catalogCustomAttributeDefinitionSelectionConfigSchema","maxAllowedSelections","allowedSelections","catalogCustomAttributeDefinitionStringConfigSchema","enforceUniqueness","sourceApplicationSchema","product","applicationId","catalogCustomAttributeDefinitionSchema","type","sourceApplication","allowedObjectTypes","sellerVisibility","appVisibility","stringConfig","numberConfig","selectionConfig","customAttributeUsageCount","key","catalogCustomAttributeValueSchema","stringValue","customAttributeDefinitionId","numberValue","booleanValue","selectionUidValues","catalogDiscountSchema","discountType","percentage","amountMoney","pinRequired","labelColor","modifyTaxBasis","catalogImageSchema","url","caption","catalogModifierOverrideSchema","modifierId","onByDefault","catalogItemModifierListInfoSchema","modifierListId","modifierOverrides","minSelectedModifiers","maxSelectedModifiers","enabled","catalogItemOptionForItemSchema","itemOptionId","catalogItemSchema","abbreviation","availableOnline","availableForPickup","availableElectronically","categoryId","taxIds","modifierListInfo","variations","catalogObjectSchema","productType","skipModifierScreen","itemOptions","catalogItemOptionSchema","showColors","values","catalogItemOptionValueSchema","color","ordinal","catalogItemOptionValueForItemVariationSchema","itemOptionValueId","itemVariationLocationOverridesSchema","priceMoney","pricingType","trackInventory","inventoryAlertType","inventoryAlertThreshold","catalogItemVariationSchema","itemId","sku","upc","locationOverrides","userData","serviceDuration","availableForBooking","itemOptionValues","measurementUnitId","teamMemberIds","measurementUnitCustomSchema","measurementUnitSchema","customUnit","areaUnit","lengthUnit","volumeUnit","weightUnit","genericUnit","timeUnit","catalogMeasurementUnitSchema","measurementUnit","catalogModifierSchema","catalogModifierListSchema","selectionType","modifiers","catalogPricingRuleSchema","timePeriodIds","discountId","matchProductsId","applyProductsId","excludeProductsId","validFromDate","validFromLocalTime","validUntilDate","validUntilLocalTime","excludeStrategy","catalogProductSetSchema","productIdsAny","productIdsAll","quantityExact","quantityMin","quantityMax","allProducts","catalogQuickAmountSchema","score","catalogQuickAmountsSettingsSchema","option","eligibleForAutoAmounts","amounts","subscriptionPhaseSchema","cadence","periods","recurringPriceMoney","catalogSubscriptionPlanSchema","phases","catalogTaxSchema","calculationPhase","inclusionType","appliesToCustomAmounts","catalogTimePeriodSchema","event","catalogV1IdSchema","catalogV1Id","isDeleted","customAttributeValues","dict","catalogV1Ids","presentAtAllLocations","presentAtLocationIds","absentAtLocationIds","imageId","itemData","categoryData","itemVariationData","taxData","discountData","modifierListData","modifierData","timePeriodData","productSetData","pricingRuleData","imageData","measurementUnitData","subscriptionPlanData","itemOptionData","itemOptionValueData","customAttributeDefinitionData","quickAmountsSettingsData","batchRetrieveCatalogObjectsResponseSchema","objects","relatedObjects","catalogObjectBatchSchema","batchUpsertCatalogObjectsRequestSchema","batches","catalogIdMappingSchema","clientObjectId","objectId","batchUpsertCatalogObjectsResponseSchema","idMappings","catalogInfoResponseLimitsSchema","batchUpsertMaxObjectsPerBatch","batchUpsertMaxTotalObjects","batchRetrieveMaxObjectIds","searchMaxPageLimit","batchDeleteMaxObjectIds","updateItemTaxesMaxItemIds","updateItemTaxesMaxTaxesToEnable","updateItemTaxesMaxTaxesToDisable","updateItemModifierListsMaxItemIds","updateItemModifierListsMaxModifierListsToEnable","updateItemModifierListsMaxModifierListsToDisable","standardUnitDescriptionSchema","unit","standardUnitDescriptionGroupSchema","standardUnitDescriptions","languageCode","catalogInfoResponseSchema","limits","standardUnitDescriptionGroup","createCatalogImageRequestSchema","image","createCatalogImageResponseSchema","deleteCatalogObjectResponseSchema","listCatalogResponseSchema","retrieveCatalogObjectResponseSchema","rangeSchema","min","max","customAttributeFilterSchema","stringFilter","numberFilter","selectionUidsFilter","boolFilter","searchCatalogItemsRequestSchema","textFilter","categoryIds","stockLevels","enabledLocationIds","productTypes","customAttributeFilters","searchCatalogItemsResponseSchema","matchedVariationIds","catalogQueryExactSchema","attributeName","attributeValue","catalogQueryItemsForItemOptionsSchema","itemOptionIds","catalogQueryItemsForModifierListSchema","modifierListIds","catalogQueryItemsForTaxSchema","catalogQueryItemVariationsForItemOptionValuesSchema","itemOptionValueIds","catalogQueryPrefixSchema","attributePrefix","catalogQueryRangeSchema","attributeMinValue","attributeMaxValue","catalogQuerySetSchema","attributeValues","catalogQuerySortedAttributeSchema","initialAttributeValue","catalogQueryTextSchema","keywords","catalogQuerySchema","sortedAttributeQuery","exactQuery","setQuery","prefixQuery","rangeQuery","textQuery","itemsForTaxQuery","itemsForModifierListQuery","itemsForItemOptionsQuery","itemVariationsForItemOptionValuesQuery","searchCatalogObjectsRequestSchema","objectTypes","includeDeletedObjects","searchCatalogObjectsResponseSchema","latestTime","updateItemModifierListsRequestSchema","itemIds","modifierListsToEnable","modifierListsToDisable","updateItemModifierListsResponseSchema","updateItemTaxesRequestSchema","taxesToEnable","taxesToDisable","updateItemTaxesResponseSchema","upsertCatalogObjectRequestSchema","upsertCatalogObjectResponseSchema","catalogObject","CatalogApi","batchDeleteCatalogObjects","batchRetrieveCatalogObjects","batchUpsertCatalogObjects","createCatalogImage","request","imageFile","formData","JSON","stringify","image_file","catalogInfo","listCatalog","types","upsertCatalogObject","deleteCatalogObject","retrieveCatalogObject","searchCatalogObjects","searchCatalogItems","updateItemModifierLists","updateItemTaxes","addressSchema","addressLine1","addressLine2","addressLine3","locality","sublocality","sublocality2","sublocality3","administrativeDistrictLevel1","administrativeDistrictLevel2","administrativeDistrictLevel3","postalCode","firstName","lastName","organization","chargeRequestAdditionalRecipientSchema","orderFulfillmentPickupDetailsCurbsidePickupDetailsSchema","curbsideDetails","buyerArrivedAt","orderFulfillmentRecipientSchema","emailAddress","phoneNumber","address","orderFulfillmentPickupDetailsSchema","recipient","expiresAt","autoCompleteDuration","scheduleType","pickupAt","pickupWindowDuration","prepTimeDuration","note","placedAt","acceptedAt","rejectedAt","readyAt","expiredAt","pickedUpAt","canceledAt","cancelReason","isCurbsidePickup","curbsidePickupDetails","orderFulfillmentShipmentDetailsSchema","carrier","shippingNote","shippingType","trackingNumber","trackingUrl","inProgressAt","packagedAt","expectedShippedAt","shippedAt","failedAt","failureReason","orderFulfillmentSchema","metadata","pickupDetails","shipmentDetails","orderLineItemAppliedDiscountSchema","discountUid","appliedMoney","orderLineItemAppliedTaxSchema","taxUid","orderLineItemModifierSchema","catalogObjectId","basePriceMoney","totalPriceMoney","orderQuantityUnitSchema","orderLineItemSchema","quantity","quantityUnit","variationName","appliedTaxes","appliedDiscounts","variationTotalPriceMoney","grossSalesMoney","totalTaxMoney","totalDiscountMoney","totalMoney","orderLineItemDiscountSchema","scope","rewardIds","pricingRuleId","orderLineItemTaxSchema","orderMoneyAmountsSchema","taxMoney","discountMoney","tipMoney","serviceChargeMoney","orderPricingOptionsSchema","autoApplyDiscounts","orderReturnDiscountSchema","sourceDiscountUid","orderReturnLineItemModifierSchema","sourceModifierUid","orderReturnLineItemSchema","sourceLineItemUid","returnModifiers","grossReturnMoney","orderReturnServiceChargeSchema","sourceServiceChargeUid","taxable","orderReturnTaxSchema","sourceTaxUid","orderRoundingAdjustmentSchema","orderReturnSchema","sourceOrderId","returnLineItems","returnServiceCharges","returnTaxes","returnDiscounts","roundingAdjustment","returnAmounts","orderRewardSchema","rewardTierId","orderServiceChargeSchema","orderSourceSchema","additionalRecipientSchema","receivableId","refundSchema","transactionId","tenderId","reason","processingFeeMoney","additionalRecipients","cardSchema","cardBrand","last4","expMonth","expYear","cardholderName","billingAddress","cardType","prepaidType","bin","tenderCardDetailsSchema","card","entryMethod","tenderCashDetailsSchema","buyerTenderedMoney","changeBackMoney","tenderSchema","cardDetails","cashDetails","paymentId","orderSchema","source","lineItems","taxes","discounts","serviceCharges","fulfillments","returns","netAmounts","tenders","refunds","totalTipMoney","totalServiceChargeMoney","pricingOptions","rewards","createOrderRequestSchema","order","createCheckoutRequestSchema","askForShippingAddress","merchantSupportEmail","prePopulateBuyerEmail","prePopulateShippingAddress","redirectUrl","checkoutSchema","checkoutPageUrl","createCheckoutResponseSchema","checkout","CheckoutApi","createCheckout","customerGroupSchema","createCustomerGroupRequestSchema","group","createCustomerGroupResponseSchema","deleteCustomerGroupResponseSchema","listCustomerGroupsResponseSchema","groups","retrieveCustomerGroupResponseSchema","updateCustomerGroupRequestSchema","updateCustomerGroupResponseSchema","CustomerGroupsApi","listCustomerGroups","createCustomerGroup","deleteCustomerGroup","groupId","retrieveCustomerGroup","updateCustomerGroup","addGroupToCustomerResponseSchema","createCustomerCardRequestSchema","cardNonce","verificationToken","createCustomerCardResponseSchema","createCustomerRequestSchema","givenName","familyName","companyName","nickname","birthday","customerGroupInfoSchema","customerPreferencesSchema","emailUnsubscribed","customerSchema","cards","preferences","creationSource","groupIds","segmentIds","createCustomerResponseSchema","customer","deleteCustomerCardResponseSchema","deleteCustomerResponseSchema","listCustomersResponseSchema","customers","removeGroupFromCustomerResponseSchema","retrieveCustomerResponseSchema","customerCreationSourceFilterSchema","rule","customerTextFilterSchema","exact","fuzzy","customerFilterSchema","customerSortSchema","customerQuerySchema","sort","searchCustomersRequestSchema","searchCustomersResponseSchema","updateCustomerRequestSchema","updateCustomerResponseSchema","CustomersApi","listCustomers","sortField","createCustomer","searchCustomers","deleteCustomer","retrieveCustomer","updateCustomer","createCustomerCard","deleteCustomerCard","cardId","removeGroupFromCustomer","addGroupToCustomer","customerSegmentSchema","listCustomerSegmentsResponseSchema","segments","retrieveCustomerSegmentResponseSchema","segment","CustomerSegmentsApi","listCustomerSegments","retrieveCustomerSegment","segmentId","deviceCodeSchema","deviceId","pairBy","statusChangedAt","pairedAt","createDeviceCodeRequestSchema","deviceCode","createDeviceCodeResponseSchema","getDeviceCodeResponseSchema","listDeviceCodesResponseSchema","deviceCodes","DevicesApi","listDeviceCodes","createDeviceCode","getDeviceCode","disputedPaymentSchema","disputeSchema","disputeId","dueAt","disputedPayment","evidenceIds","brandDisputeId","reportedDate","acceptDisputeResponseSchema","dispute","createDisputeEvidenceFileRequestSchema","evidenceType","contentType","disputeEvidenceSchema","evidenceId","uploadedAt","createDisputeEvidenceFileResponseSchema","evidence","createDisputeEvidenceTextRequestSchema","evidenceText","createDisputeEvidenceTextResponseSchema","listDisputeEvidenceResponseSchema","listDisputesResponseSchema","disputes","removeDisputeEvidenceResponseSchema","retrieveDisputeEvidenceResponseSchema","retrieveDisputeResponseSchema","submitEvidenceResponseSchema","DisputesApi","listDisputes","states","retrieveDispute","acceptDispute","listDisputeEvidence","removeDisputeEvidence","retrieveDisputeEvidence","createDisputeEvidenceFile","createDisputeEvidenceText","submitEvidence","employeeSchema","email","locationIds","isOwner","listEmployeesResponseSchema","employees","retrieveEmployeeResponseSchema","employee","EmployeesApi","listEmployees","deprecated","retrieveEmployee","inventoryAdjustmentSchema","fromState","toState","catalogObjectType","occurredAt","refundId","purchaseOrderId","goodsReceiptId","inventoryPhysicalCountSchema","inventoryTransferSchema","fromLocationId","toLocationId","inventoryChangeSchema","physicalCount","adjustment","transfer","batchChangeInventoryRequestSchema","changes","ignoreUnchangedCounts","inventoryCountSchema","calculatedAt","batchChangeInventoryResponseSchema","counts","batchRetrieveInventoryChangesRequestSchema","catalogObjectIds","updatedAfter","updatedBefore","batchRetrieveInventoryChangesResponseSchema","batchRetrieveInventoryCountsRequestSchema","batchRetrieveInventoryCountsResponseSchema","retrieveInventoryAdjustmentResponseSchema","retrieveInventoryChangesResponseSchema","retrieveInventoryCountResponseSchema","retrieveInventoryPhysicalCountResponseSchema","count","InventoryApi","retrieveInventoryAdjustment","adjustmentId","batchChangeInventory","batchRetrieveInventoryChanges","batchRetrieveInventoryCounts","retrieveInventoryPhysicalCount","physicalCountId","retrieveInventoryCount","retrieveInventoryChanges","cancelInvoiceRequestSchema","invoicePaymentReminderSchema","relativeScheduledDays","message","sentAt","invoicePaymentRequestSchema","requestMethod","requestType","dueDate","fixedAmountRequestedMoney","percentageRequested","tippingEnabled","reminders","computedAmountMoney","totalCompletedAmountMoney","roundingAdjustmentIncludedMoney","invoiceRecipientSchema","invoiceSchema","orderId","primaryRecipient","paymentRequests","invoiceNumber","title","scheduledAt","publicUrl","nextPaymentAmountMoney","timezone","cancelInvoiceResponseSchema","invoice","createInvoiceRequestSchema","createInvoiceResponseSchema","deleteInvoiceResponseSchema","getInvoiceResponseSchema","listInvoicesResponseSchema","invoices","publishInvoiceRequestSchema","publishInvoiceResponseSchema","invoiceFilterSchema","customerIds","invoiceSortSchema","invoiceQuerySchema","searchInvoicesRequestSchema","searchInvoicesResponseSchema","updateInvoiceRequestSchema","fieldsToClear","updateInvoiceResponseSchema","InvoicesApi","listInvoices","createInvoice","searchInvoices","deleteInvoice","invoiceId","getInvoice","updateInvoice","cancelInvoice","publishInvoice","breakTypeSchema","breakName","expectedDuration","isPaid","createBreakTypeRequestSchema","breakType","createBreakTypeResponseSchema","breakSchema","breakTypeId","shiftWageSchema","hourlyRate","shiftSchema","wage","breaks","createShiftRequestSchema","shift","createShiftResponseSchema","deleteBreakTypeResponseSchema","deleteShiftResponseSchema","getBreakTypeResponseSchema","employeeWageSchema","getEmployeeWageResponseSchema","employeeWage","getShiftResponseSchema","teamMemberWageSchema","getTeamMemberWageResponseSchema","teamMemberWage","listBreakTypesResponseSchema","breakTypes","listEmployeeWagesResponseSchema","employeeWages","listTeamMemberWagesResponseSchema","teamMemberWages","workweekConfigSchema","startOfWeek","startOfDayLocalTime","listWorkweekConfigsResponseSchema","workweekConfigs","dateRangeSchema","startDate","endDate","shiftWorkdaySchema","dateRange","matchShiftsBy","defaultTimezone","shiftFilterSchema","start","end","workday","shiftSortSchema","shiftQuerySchema","searchShiftsRequestSchema","searchShiftsResponseSchema","shifts","updateBreakTypeRequestSchema","updateBreakTypeResponseSchema","updateShiftRequestSchema","updateShiftResponseSchema","updateWorkweekConfigRequestSchema","workweekConfig","updateWorkweekConfigResponseSchema","LaborApi","listBreakTypes","createBreakType","deleteBreakType","getBreakType","updateBreakType","listEmployeeWages","getEmployeeWage","createShift","searchShifts","deleteShift","getShift","updateShift","listTeamMemberWages","getTeamMemberWage","listWorkweekConfigs","updateWorkweekConfig","businessHoursPeriodSchema","dayOfWeek","startLocalTime","endLocalTime","businessHoursSchema","coordinatesSchema","latitude","longitude","locationSchema","capabilities","merchantId","businessName","websiteUrl","businessHours","businessEmail","twitterUsername","instagramUsername","facebookUrl","coordinates","logoUrl","posBackgroundUrl","mcc","fullFormatLogoUrl","createLocationRequestSchema","location","createLocationResponseSchema","listLocationsResponseSchema","locations","retrieveLocationResponseSchema","updateLocationRequestSchema","updateLocationResponseSchema","LocationsApi","listLocations","createLocation","retrieveLocation","updateLocation","loyaltyEventAccumulatePointsSchema","loyaltyProgramId","points","accumulateLoyaltyPointsRequestSchema","accumulatePoints","loyaltyEventAdjustPointsSchema","loyaltyEventCreateRewardSchema","rewardId","loyaltyEventDeleteRewardSchema","loyaltyEventExpirePointsSchema","loyaltyEventOtherSchema","loyaltyEventRedeemRewardSchema","loyaltyEventSchema","createReward","redeemReward","deleteReward","adjustPoints","loyaltyAccountId","expirePoints","otherEvent","accumulateLoyaltyPointsResponseSchema","adjustLoyaltyPointsRequestSchema","adjustLoyaltyPointsResponseSchema","calculateLoyaltyPointsRequestSchema","transactionAmountMoney","calculateLoyaltyPointsResponseSchema","loyaltyAccountMappingSchema","value","loyaltyAccountSchema","mappings","programId","balance","lifetimePoints","enrolledAt","createLoyaltyAccountRequestSchema","loyaltyAccount","createLoyaltyAccountResponseSchema","loyaltyRewardSchema","redeemedAt","createLoyaltyRewardRequestSchema","reward","createLoyaltyRewardResponseSchema","deleteLoyaltyRewardResponseSchema","loyaltyProgramAccrualRuleSchema","accrualType","visitMinimumAmountMoney","spendAmountMoney","loyaltyProgramExpirationPolicySchema","expirationDuration","loyaltyProgramRewardDefinitionSchema","percentageDiscount","fixedDiscountMoney","maxDiscountMoney","loyaltyProgramRewardTierSchema","definition","loyaltyProgramTerminologySchema","one","other","loyaltyProgramSchema","rewardTiers","expirationPolicy","terminology","accrualRules","listLoyaltyProgramsResponseSchema","programs","redeemLoyaltyRewardRequestSchema","redeemLoyaltyRewardResponseSchema","retrieveLoyaltyAccountResponseSchema","retrieveLoyaltyRewardResponseSchema","searchLoyaltyAccountsRequestLoyaltyAccountQuerySchema","searchLoyaltyAccountsRequestSchema","searchLoyaltyAccountsResponseSchema","loyaltyAccounts","loyaltyEventDateTimeFilterSchema","loyaltyEventLocationFilterSchema","loyaltyEventLoyaltyAccountFilterSchema","loyaltyEventOrderFilterSchema","loyaltyEventTypeFilterSchema","loyaltyEventFilterSchema","loyaltyAccountFilter","typeFilter","dateTimeFilter","locationFilter","orderFilter","loyaltyEventQuerySchema","searchLoyaltyEventsRequestSchema","searchLoyaltyEventsResponseSchema","searchLoyaltyRewardsRequestLoyaltyRewardQuerySchema","searchLoyaltyRewardsRequestSchema","searchLoyaltyRewardsResponseSchema","LoyaltyApi","createLoyaltyAccount","searchLoyaltyAccounts","retrieveLoyaltyAccount","accountId","accumulateLoyaltyPoints","adjustLoyaltyPoints","searchLoyaltyEvents","listLoyaltyPrograms","calculateLoyaltyPoints","createLoyaltyReward","searchLoyaltyRewards","deleteLoyaltyReward","retrieveLoyaltyReward","redeemLoyaltyReward","merchantSchema","mainLocationId","listMerchantsResponseSchema","merchant","retrieveMerchantResponseSchema","MerchantsApi","listMerchants","retrieveMerchant","createMobileAuthorizationCodeRequestSchema","createMobileAuthorizationCodeResponseSchema","authorizationCode","error","MobileAuthorizationApi","createMobileAuthorizationCode","obtainTokenRequestSchema","clientId","clientSecret","redirectUri","grantType","refreshToken","migrationToken","scopes","shortLived","obtainTokenResponseSchema","accessToken","tokenType","subscriptionId","planId","idToken","renewTokenRequestSchema","renewTokenResponseSchema","revokeTokenRequestSchema","revokeOnlyAccessToken","revokeTokenResponseSchema","success","OAuthApi","renewToken","authorization","header","authenticate","revokeToken","obtainToken","batchRetrieveOrdersRequestSchema","orderIds","batchRetrieveOrdersResponseSchema","orders","calculateOrderRequestSchema","proposedRewards","calculateOrderResponseSchema","createOrderResponseSchema","payOrderRequestSchema","orderVersion","paymentIds","payOrderResponseSchema","retrieveOrderResponseSchema","searchOrdersCustomerFilterSchema","searchOrdersDateTimeFilterSchema","searchOrdersFulfillmentFilterSchema","fulfillmentTypes","fulfillmentStates","searchOrdersSourceFilterSchema","sourceNames","searchOrdersStateFilterSchema","searchOrdersFilterSchema","stateFilter","fulfillmentFilter","sourceFilter","customerFilter","searchOrdersSortSchema","searchOrdersQuerySchema","searchOrdersRequestSchema","returnEntries","orderEntrySchema","searchOrdersResponseSchema","orderEntries","updateOrderRequestSchema","updateOrderResponseSchema","OrdersApi","createOrder","batchRetrieveOrders","calculateOrder","searchOrders","retrieveOrder","updateOrder","payOrder","cancelPaymentByIdempotencyKeyRequestSchema","cancelPaymentByIdempotencyKeyResponseSchema","deviceDetailsSchema","deviceInstallationId","deviceName","cardPaymentDetailsSchema","cvvStatus","avsStatus","authResultCode","applicationIdentifier","applicationName","applicationCryptogram","verificationMethod","verificationResults","statementDescription","deviceDetails","refundRequiresCardPresence","processingFeeSchema","effectiveAt","riskEvaluationSchema","riskLevel","paymentSchema","appFeeMoney","processingFee","refundedMoney","delayDuration","delayAction","delayedUntil","sourceType","refundIds","riskEvaluation","buyerEmailAddress","shippingAddress","statementDescriptionIdentifier","receiptNumber","receiptUrl","cancelPaymentResponseSchema","payment","completePaymentResponseSchema","createPaymentRequestSchema","sourceId","autocomplete","acceptPartialAuthorization","createPaymentResponseSchema","getPaymentResponseSchema","listPaymentsResponseSchema","payments","PaymentsApi","listPayments","total","createPayment","cancelPaymentByIdempotencyKey","getPayment","cancelPayment","completePayment","paymentRefundSchema","getPaymentRefundResponseSchema","refund","listPaymentRefundsResponseSchema","refundPaymentRequestSchema","refundPaymentResponseSchema","RefundsApi","listPaymentRefunds","refundPayment","getPaymentRefund","subscriptionSchema","canceledDate","taxPercentage","invoiceIds","priceOverrideMoney","paidUntilDate","cancelSubscriptionResponseSchema","subscription","createSubscriptionRequestSchema","createSubscriptionResponseSchema","subscriptionEventSchema","subscriptionEventType","effectiveDate","listSubscriptionEventsResponseSchema","subscriptionEvents","retrieveSubscriptionResponseSchema","searchSubscriptionsFilterSchema","searchSubscriptionsQuerySchema","searchSubscriptionsRequestSchema","searchSubscriptionsResponseSchema","subscriptions","updateSubscriptionRequestSchema","updateSubscriptionResponseSchema","SubscriptionsApi","createSubscription","searchSubscriptions","retrieveSubscription","updateSubscription","cancelSubscription","listSubscriptionEvents","teamMemberAssignedLocationsSchema","assignmentType","teamMemberSchema","assignedLocations","createTeamMemberRequestSchema","teamMember","bulkCreateTeamMembersRequestSchema","teamMembers","createTeamMemberResponseSchema","bulkCreateTeamMembersResponseSchema","updateTeamMemberRequestSchema","bulkUpdateTeamMembersRequestSchema","updateTeamMemberResponseSchema","bulkUpdateTeamMembersResponseSchema","retrieveTeamMemberResponseSchema","jobAssignmentSchema","jobTitle","payType","annualRate","weeklyHours","wageSettingSchema","jobAssignments","isOvertimeExempt","retrieveWageSettingResponseSchema","wageSetting","searchTeamMembersFilterSchema","searchTeamMembersQuerySchema","searchTeamMembersRequestSchema","searchTeamMembersResponseSchema","updateWageSettingRequestSchema","updateWageSettingResponseSchema","TeamApi","createTeamMember","bulkCreateTeamMembers","bulkUpdateTeamMembers","searchTeamMembers","retrieveTeamMember","updateTeamMember","retrieveWageSetting","updateWageSetting","tipSettingsSchema","allowTipping","separateTipScreen","customTipField","tipPercentages","smartTipping","deviceCheckoutOptionsSchema","skipReceiptScreen","tipSettings","terminalCheckoutSchema","deviceOptions","deadlineDuration","cancelTerminalCheckoutResponseSchema","terminalRefundSchema","cancelTerminalRefundResponseSchema","createTerminalCheckoutRequestSchema","createTerminalCheckoutResponseSchema","createTerminalRefundRequestSchema","createTerminalRefundResponseSchema","getTerminalCheckoutResponseSchema","getTerminalRefundResponseSchema","terminalCheckoutQueryFilterSchema","terminalCheckoutQuerySortSchema","terminalCheckoutQuerySchema","searchTerminalCheckoutsRequestSchema","searchTerminalCheckoutsResponseSchema","checkouts","terminalRefundQueryFilterSchema","terminalRefundQuerySortSchema","terminalRefundQuerySchema","searchTerminalRefundsRequestSchema","searchTerminalRefundsResponseSchema","TerminalApi","createTerminalCheckout","searchTerminalCheckouts","getTerminalCheckout","checkoutId","cancelTerminalCheckout","createTerminalRefund","searchTerminalRefunds","getTerminalRefund","terminalRefundId","cancelTerminalRefund","captureTransactionResponseSchema","chargeRequestSchema","customerCardId","delayCapture","transactionSchema","chargeResponseSchema","transaction","createRefundRequestSchema","createRefundResponseSchema","listRefundsResponseSchema","listTransactionsResponseSchema","transactions","retrieveTransactionResponseSchema","voidTransactionResponseSchema","TransactionsApi","listRefunds","listTransactions","charge","retrieveTransaction","captureTransaction","createRefund","voidTransaction","deviceSchema","v1MoneySchema","currencyCode","v1CashDrawerEventSchema","v1CashDrawerShiftSchema","startingCashMoney","v1EmployeeSchema","roleIds","authorizedLocationIds","externalId","v1EmployeeRoleSchema","permissions","v1TimecardSchema","deleted","clockinTime","clockoutTime","clockinLocationId","clockoutLocationId","regularSecondsWorked","overtimeSecondsWorked","doubletimeSecondsWorked","v1TimecardEventSchema","V1EmployeesApi","beginUpdatedAt","endUpdatedAt","beginCreatedAt","endCreatedAt","batchToken","createEmployee","updateEmployee","listEmployeeRoles","createEmployeeRole","retrieveEmployeeRole","roleId","updateEmployeeRole","listTimecards","beginClockinTime","endClockinTime","beginClockoutTime","endClockoutTime","createTimecard","deleteTimecard","timecardId","unknown","retrieveTimecard","updateTimecard","listTimecardEvents","v1AdjustInventoryRequestSchema","quantityDelta","adjustmentType","memo","v1CategorySchema","v2Id","v1DiscountSchema","rate","v1FeeSchema","v1InventoryEntrySchema","variationId","quantityOnHand","v1ItemImageSchema","v1ModifierOptionSchema","v1ModifierListSchema","modifierOptions","v1VariationSchema","v1ItemSchema","visibility","masterImage","modifierLists","fees","v1PageCellSchema","pageId","row","column","objectType","placeholderType","v1PageSchema","pageIndex","cells","v1UpdateModifierListRequestSchema","V1ItemsApi","listCategories","createCategory","deleteCategory","updateCategory","listDiscounts","createDiscount","deleteDiscount","updateDiscount","listFees","createFee","deleteFee","feeId","updateFee","listInventory","adjustInventory","listItems","createItem","deleteItem","retrieveItem","updateItem","removeFee","applyFee","removeModifierList","applyModifierList","createVariation","deleteVariation","updateVariation","listModifierLists","createModifierList","deleteModifierList","retrieveModifierList","updateModifierList","createModifierOption","deleteModifierOption","modifierOptionId","updateModifierOption","listPages","createPage","deletePage","updatePage","deletePageCell","updatePageCell","v1MerchantLocationDetailsSchema","v1PhoneNumberSchema","callingCode","v1MerchantSchema","accountCapabilities","countryCode","businessAddress","businessPhone","businessType","locationDetails","marketUrl","V1LocationsApi","retrieveBusiness","v1BankAccountSchema","routingNumber","v1CreateRefundRequestSchema","requestIdempotenceKey","v1OrderHistoryEntrySchema","action","v1TenderSchema","panSuffix","paymentNote","tenderedMoney","tenderedAt","settledAt","isExchange","v1OrderSchema","buyerEmail","recipientName","recipientPhoneNumber","subtotalMoney","totalShippingMoney","buyerNote","completedNote","refundedNote","canceledNote","tender","orderHistory","promoCode","btcReceiveAddress","btcPriceSatoshi","v1PaymentDiscountSchema","v1PaymentItemDetailSchema","categoryName","itemVariationId","v1PaymentModifierSchema","v1PaymentTaxSchema","v1PaymentItemizationSchema","itemizationType","itemDetail","notes","itemVariationName","singleQuantityMoney","netSalesMoney","v1PaymentSurchargeSchema","surchargeId","v1RefundSchema","refundedProcessingFeeMoney","refundedTaxMoney","refundedAdditiveTaxMoney","refundedAdditiveTax","refundedInclusiveTaxMoney","refundedInclusiveTax","refundedTipMoney","refundedDiscountMoney","refundedSurchargeMoney","refundedSurcharges","processedAt","v1PaymentSchema","creatorId","paymentUrl","inclusiveTaxMoney","additiveTaxMoney","totalCollectedMoney","netTotalMoney","swedishRoundingMoney","inclusiveTax","additiveTax","itemizations","surchargeMoney","surcharges","isPartial","v1SettlementEntrySchema","feeMoney","v1SettlementSchema","initiatedAt","entries","v1UpdateOrderRequestSchema","shippedTrackingNumber","V1TransactionsApi","retrieveBankAccount","listOrders","includePartial","retrievePayment","listSettlements","retrieveSettlement","settlementId","setHeader","headers","realHeaderName","lookupCaseInsensitive","setHeaderInternal","setHeaderIfNotSet","obj","prop","toLowerCase","p","Object","prototype","hasOwnProperty","call","mergeHeaders","headersToMerge","headerKeys","getOwnPropertyNames","headerName","lowerCasedName","assertHeaders","TypeError","isValidHeaderName","Error","headerValue","test","CONTENT_TYPE_HEADER","ACCEPT_HEADER","CONTENT_LENGTH_HEADER","AUTHORIZATION_HEADER","FORM_URLENCODED_CONTENT_TYPE","JSON_CONTENT_TYPE","TEXT_CONTENT_TYPE","XML_CONTENT_TYPE","callHttpInterceptors","interceptors","next","index","current","last","options","length","passThroughInterceptor","accessTokenAuthenticationProvider","requiresAuth","Environment","DEFAULT_CONFIGURATION","timeout","additionalHeaders","environment","Production","ApiError","context","response","statusCode","result","parse","console","warn","sanitizeUrl","protocolRegex","match","protocol","queryUrl","substring","replace","isBlob","Blob","toString","deprecatedHits","methodName","notice","warning","AbortError","FileWrapper","file","isFileWrapper","cloneFileWrapper","fileWrapper","cloneFileWrapperOptions","fileWrapperOptions","clone","indexedPrefix","prefix","formDataEncodeObject","prefixFormat","keys","push","Array","isArray","iter","objectKey","element","filterFileWrapperFromKeyValuePairs","params","urlEncodeObject","urlEncodeKeyValuePairs","encode","encodeURIComponent","map","join","DEFAULT_AXIOS_CONFIG_OVERRIDES","transformResponse","DEFAULT_TIMEOUT","HttpClient","clientConfigOverrides","_timeout","_axiosInstance","axios","create","convertHttpRequest","newRequest","method","responseType","auth","username","password","requestBody","data","content","some","item","form","FormData","fileData","append","getHeaders","isNode","validateStatus","convertHttpResponse","resp","executeRequest","axiosRequest","abortSignal","aborted","abortError","cancelToken","CancelToken","token","addEventListener","cancel","isCancel","ArgumentsValidationError","errorKeys","msgList","param","ResponseValidationError","apiResponse","e","i","SkipEncode","pathTemplate","strings","args","flatMap","interweaveArrays","s","encodePathTemplateSegment","pathSegment","skipEncode","m","a","b","Math","apply","reduce","_","concat","slice","validationErrors","paramName","paramInfo","validationResult","validateAndUnmap","xmlSerialize","_rootName","_value","xmlDeserialize","_xmlString","DefaultRequestBuilder","_httpClient","_baseUrlProvider","_apiErrorFactory","_authenticationProvider","_httpMethod","_path","_headers","_query","_interceptors","_validateResponse","_addResponseValidator","_addAuthentication","bind","_authParams","appendPath","httpMethodName","baseUrl","arg","_baseUrlArg","path","mergePath","acceptJson","_accept","accept","acceptHeaderValue","contentTypeHeaderValue","_contentType","nameOrParameters","queryString","text","_body","_setContentTypeIfNotSet","xml","argName","rootName","schema","mappingResult","validateAndUnmapXml","stream","_stream","parameters","_form","_formData","toRequest","indexOf","intercept","interceptor","interceptRequest","opt","interceptResponse","defaultToError","apiErrorCtor","validateResponse","validate","throwOn","errorConstructor","pipeline","callAsText","callAsOptionalText","callAsStream","convertToStream","parsed","validateAndMap","callAsXml","xmlObject","validateAndMapXml","handler","createRequestBuilderFactory","httpClient","baseUrlProvider","apiErrorFactory","authenticationProvider","httpMethod","left","right","substr","rs","require","Readable","_read","SDK_VERSION","USER_AGENT","Client","config","_config","_requestBuilderFactory","createRequestHandlerFactory","server","getBaseUri","unstable_httpClientOptions","withErrorHandlers","withUserAgent","withAdditionalHeaders","withAuthenticationByDefault","applePayApi","bankAccountsApi","bookingsApi","cashDrawersApi","catalogApi","checkoutApi","customerGroupsApi","customersApi","customerSegmentsApi","devicesApi","disputesApi","employeesApi","inventoryApi","invoicesApi","laborApi","locationsApi","loyaltyApi","merchantsApi","mobileAuthorizationApi","oAuthApi","ordersApi","paymentsApi","refundsApi","subscriptionsApi","teamApi","terminalApi","transactionsApi","v1EmployeesApi","v1ItemsApi","v1LocationsApi","v1TransactionsApi","withConfiguration","createHttpClientAdapter","Sandbox","authProvider","addons","requestBuilderFactory","tap","callback","requestBuilder","forEach","c","rb"],"mappings":"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"}